// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: remotecontrolmessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "remotecontrolmessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {
namespace remote {

namespace {

const ::google::protobuf::Descriptor* RequestFiles_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestFiles_reflection_ = NULL;
const ::google::protobuf::Descriptor* Files_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Files_reflection_ = NULL;
const ::google::protobuf::Descriptor* SongMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SongMetadata_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SongMetadata_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Playlist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Playlist_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestPlaylists_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestPlaylists_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestPlaylistSongs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestPlaylistSongs_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestChangeSong_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestChangeSong_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestSetVolume_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestSetVolume_reflection_ = NULL;
const ::google::protobuf::Descriptor* Repeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Repeat_reflection_ = NULL;
const ::google::protobuf::Descriptor* Shuffle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Shuffle_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseClementineInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseClementineInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseCurrentMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseCurrentMetadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponsePlaylists_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponsePlaylists_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponsePlaylistSongs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponsePlaylistSongs_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseEngineStateChanged_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseEngineStateChanged_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseUpdateTrackPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseUpdateTrackPosition_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestConnect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestConnect_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseDisconnect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseDisconnect_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseActiveChanged_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseActiveChanged_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestSetTrackPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestSetTrackPosition_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestInsertUrls_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestInsertUrls_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestRemoveSongs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestRemoveSongs_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestOpenPlaylist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestOpenPlaylist_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestClosePlaylist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestClosePlaylist_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseLyrics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseLyrics_reflection_ = NULL;
const ::google::protobuf::Descriptor* Lyric_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Lyric_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestDownloadSongs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestDownloadSongs_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseSongFileChunk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseSongFileChunk_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseLibraryChunk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseLibraryChunk_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseSongOffer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseSongOffer_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestRateSong_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestRateSong_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseDownloadTotalSize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseDownloadTotalSize_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestGlobalSearch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestGlobalSearch_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseGlobalSearch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseGlobalSearch_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseTranscoderStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseTranscoderStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseGlobalSearchStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseGlobalSearchStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EngineState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RepeatMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ShuffleMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ReasonDisconnect_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DownloadItem_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GlobalSearchStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_remotecontrolmessages_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_remotecontrolmessages_2eproto() {
  protobuf_AddDesc_remotecontrolmessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "remotecontrolmessages.proto");
  GOOGLE_CHECK(file != NULL);
  RequestFiles_descriptor_ = file->message_type(0);
  static const int RequestFiles_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFiles, relativepath_),
  };
  RequestFiles_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestFiles_descriptor_,
      RequestFiles::default_instance_,
      RequestFiles_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFiles, _has_bits_[0]),
      -1,
      -1,
      sizeof(RequestFiles),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFiles, _internal_metadata_),
      -1);
  Files_descriptor_ = file->message_type(1);
  static const int Files_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Files, relativepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Files, file_),
  };
  Files_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Files_descriptor_,
      Files::default_instance_,
      Files_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Files, _has_bits_[0]),
      -1,
      -1,
      sizeof(Files),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Files, _internal_metadata_),
      -1);
  SongMetadata_descriptor_ = file->message_type(2);
  static const int SongMetadata_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongMetadata, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongMetadata, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongMetadata, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongMetadata, album_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongMetadata, artist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongMetadata, albumartist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongMetadata, track_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongMetadata, disc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongMetadata, pretty_year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongMetadata, genre_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongMetadata, playcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongMetadata, pretty_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongMetadata, art_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongMetadata, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongMetadata, is_local_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongMetadata, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongMetadata, file_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongMetadata, rating_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongMetadata, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongMetadata, art_automatic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongMetadata, art_manual_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongMetadata, type_),
  };
  SongMetadata_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SongMetadata_descriptor_,
      SongMetadata::default_instance_,
      SongMetadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongMetadata, _has_bits_[0]),
      -1,
      -1,
      sizeof(SongMetadata),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongMetadata, _internal_metadata_),
      -1);
  SongMetadata_Type_descriptor_ = SongMetadata_descriptor_->enum_type(0);
  Playlist_descriptor_ = file->message_type(3);
  static const int Playlist_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Playlist, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Playlist, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Playlist, item_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Playlist, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Playlist, closed_),
  };
  Playlist_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Playlist_descriptor_,
      Playlist::default_instance_,
      Playlist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Playlist, _has_bits_[0]),
      -1,
      -1,
      sizeof(Playlist),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Playlist, _internal_metadata_),
      -1);
  RequestPlaylists_descriptor_ = file->message_type(4);
  static const int RequestPlaylists_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPlaylists, include_closed_),
  };
  RequestPlaylists_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestPlaylists_descriptor_,
      RequestPlaylists::default_instance_,
      RequestPlaylists_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPlaylists, _has_bits_[0]),
      -1,
      -1,
      sizeof(RequestPlaylists),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPlaylists, _internal_metadata_),
      -1);
  RequestPlaylistSongs_descriptor_ = file->message_type(5);
  static const int RequestPlaylistSongs_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPlaylistSongs, id_),
  };
  RequestPlaylistSongs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestPlaylistSongs_descriptor_,
      RequestPlaylistSongs::default_instance_,
      RequestPlaylistSongs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPlaylistSongs, _has_bits_[0]),
      -1,
      -1,
      sizeof(RequestPlaylistSongs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPlaylistSongs, _internal_metadata_),
      -1);
  RequestChangeSong_descriptor_ = file->message_type(6);
  static const int RequestChangeSong_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestChangeSong, playlist_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestChangeSong, song_index_),
  };
  RequestChangeSong_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestChangeSong_descriptor_,
      RequestChangeSong::default_instance_,
      RequestChangeSong_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestChangeSong, _has_bits_[0]),
      -1,
      -1,
      sizeof(RequestChangeSong),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestChangeSong, _internal_metadata_),
      -1);
  RequestSetVolume_descriptor_ = file->message_type(7);
  static const int RequestSetVolume_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSetVolume, volume_),
  };
  RequestSetVolume_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestSetVolume_descriptor_,
      RequestSetVolume::default_instance_,
      RequestSetVolume_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSetVolume, _has_bits_[0]),
      -1,
      -1,
      sizeof(RequestSetVolume),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSetVolume, _internal_metadata_),
      -1);
  Repeat_descriptor_ = file->message_type(8);
  static const int Repeat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Repeat, repeat_mode_),
  };
  Repeat_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Repeat_descriptor_,
      Repeat::default_instance_,
      Repeat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Repeat, _has_bits_[0]),
      -1,
      -1,
      sizeof(Repeat),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Repeat, _internal_metadata_),
      -1);
  Shuffle_descriptor_ = file->message_type(9);
  static const int Shuffle_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shuffle, shuffle_mode_),
  };
  Shuffle_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Shuffle_descriptor_,
      Shuffle::default_instance_,
      Shuffle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shuffle, _has_bits_[0]),
      -1,
      -1,
      sizeof(Shuffle),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shuffle, _internal_metadata_),
      -1);
  ResponseClementineInfo_descriptor_ = file->message_type(10);
  static const int ResponseClementineInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseClementineInfo, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseClementineInfo, state_),
  };
  ResponseClementineInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseClementineInfo_descriptor_,
      ResponseClementineInfo::default_instance_,
      ResponseClementineInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseClementineInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(ResponseClementineInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseClementineInfo, _internal_metadata_),
      -1);
  ResponseCurrentMetadata_descriptor_ = file->message_type(11);
  static const int ResponseCurrentMetadata_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCurrentMetadata, song_metadata_),
  };
  ResponseCurrentMetadata_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseCurrentMetadata_descriptor_,
      ResponseCurrentMetadata::default_instance_,
      ResponseCurrentMetadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCurrentMetadata, _has_bits_[0]),
      -1,
      -1,
      sizeof(ResponseCurrentMetadata),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCurrentMetadata, _internal_metadata_),
      -1);
  ResponsePlaylists_descriptor_ = file->message_type(12);
  static const int ResponsePlaylists_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponsePlaylists, playlist_),
  };
  ResponsePlaylists_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponsePlaylists_descriptor_,
      ResponsePlaylists::default_instance_,
      ResponsePlaylists_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponsePlaylists, _has_bits_[0]),
      -1,
      -1,
      sizeof(ResponsePlaylists),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponsePlaylists, _internal_metadata_),
      -1);
  ResponsePlaylistSongs_descriptor_ = file->message_type(13);
  static const int ResponsePlaylistSongs_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponsePlaylistSongs, requested_playlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponsePlaylistSongs, songs_),
  };
  ResponsePlaylistSongs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponsePlaylistSongs_descriptor_,
      ResponsePlaylistSongs::default_instance_,
      ResponsePlaylistSongs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponsePlaylistSongs, _has_bits_[0]),
      -1,
      -1,
      sizeof(ResponsePlaylistSongs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponsePlaylistSongs, _internal_metadata_),
      -1);
  ResponseEngineStateChanged_descriptor_ = file->message_type(14);
  static const int ResponseEngineStateChanged_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseEngineStateChanged, state_),
  };
  ResponseEngineStateChanged_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseEngineStateChanged_descriptor_,
      ResponseEngineStateChanged::default_instance_,
      ResponseEngineStateChanged_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseEngineStateChanged, _has_bits_[0]),
      -1,
      -1,
      sizeof(ResponseEngineStateChanged),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseEngineStateChanged, _internal_metadata_),
      -1);
  ResponseUpdateTrackPosition_descriptor_ = file->message_type(15);
  static const int ResponseUpdateTrackPosition_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseUpdateTrackPosition, position_),
  };
  ResponseUpdateTrackPosition_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseUpdateTrackPosition_descriptor_,
      ResponseUpdateTrackPosition::default_instance_,
      ResponseUpdateTrackPosition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseUpdateTrackPosition, _has_bits_[0]),
      -1,
      -1,
      sizeof(ResponseUpdateTrackPosition),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseUpdateTrackPosition, _internal_metadata_),
      -1);
  RequestConnect_descriptor_ = file->message_type(16);
  static const int RequestConnect_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestConnect, auth_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestConnect, send_playlist_songs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestConnect, downloader_),
  };
  RequestConnect_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestConnect_descriptor_,
      RequestConnect::default_instance_,
      RequestConnect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestConnect, _has_bits_[0]),
      -1,
      -1,
      sizeof(RequestConnect),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestConnect, _internal_metadata_),
      -1);
  ResponseDisconnect_descriptor_ = file->message_type(17);
  static const int ResponseDisconnect_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseDisconnect, reason_disconnect_),
  };
  ResponseDisconnect_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseDisconnect_descriptor_,
      ResponseDisconnect::default_instance_,
      ResponseDisconnect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseDisconnect, _has_bits_[0]),
      -1,
      -1,
      sizeof(ResponseDisconnect),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseDisconnect, _internal_metadata_),
      -1);
  ResponseActiveChanged_descriptor_ = file->message_type(18);
  static const int ResponseActiveChanged_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseActiveChanged, id_),
  };
  ResponseActiveChanged_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseActiveChanged_descriptor_,
      ResponseActiveChanged::default_instance_,
      ResponseActiveChanged_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseActiveChanged, _has_bits_[0]),
      -1,
      -1,
      sizeof(ResponseActiveChanged),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseActiveChanged, _internal_metadata_),
      -1);
  RequestSetTrackPosition_descriptor_ = file->message_type(19);
  static const int RequestSetTrackPosition_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSetTrackPosition, position_),
  };
  RequestSetTrackPosition_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestSetTrackPosition_descriptor_,
      RequestSetTrackPosition::default_instance_,
      RequestSetTrackPosition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSetTrackPosition, _has_bits_[0]),
      -1,
      -1,
      sizeof(RequestSetTrackPosition),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSetTrackPosition, _internal_metadata_),
      -1);
  RequestInsertUrls_descriptor_ = file->message_type(20);
  static const int RequestInsertUrls_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestInsertUrls, playlist_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestInsertUrls, urls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestInsertUrls, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestInsertUrls, play_now_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestInsertUrls, enqueue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestInsertUrls, songs_),
  };
  RequestInsertUrls_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestInsertUrls_descriptor_,
      RequestInsertUrls::default_instance_,
      RequestInsertUrls_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestInsertUrls, _has_bits_[0]),
      -1,
      -1,
      sizeof(RequestInsertUrls),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestInsertUrls, _internal_metadata_),
      -1);
  RequestRemoveSongs_descriptor_ = file->message_type(21);
  static const int RequestRemoveSongs_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRemoveSongs, playlist_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRemoveSongs, songs_),
  };
  RequestRemoveSongs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestRemoveSongs_descriptor_,
      RequestRemoveSongs::default_instance_,
      RequestRemoveSongs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRemoveSongs, _has_bits_[0]),
      -1,
      -1,
      sizeof(RequestRemoveSongs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRemoveSongs, _internal_metadata_),
      -1);
  RequestOpenPlaylist_descriptor_ = file->message_type(22);
  static const int RequestOpenPlaylist_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOpenPlaylist, playlist_id_),
  };
  RequestOpenPlaylist_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestOpenPlaylist_descriptor_,
      RequestOpenPlaylist::default_instance_,
      RequestOpenPlaylist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOpenPlaylist, _has_bits_[0]),
      -1,
      -1,
      sizeof(RequestOpenPlaylist),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOpenPlaylist, _internal_metadata_),
      -1);
  RequestClosePlaylist_descriptor_ = file->message_type(23);
  static const int RequestClosePlaylist_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestClosePlaylist, playlist_id_),
  };
  RequestClosePlaylist_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestClosePlaylist_descriptor_,
      RequestClosePlaylist::default_instance_,
      RequestClosePlaylist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestClosePlaylist, _has_bits_[0]),
      -1,
      -1,
      sizeof(RequestClosePlaylist),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestClosePlaylist, _internal_metadata_),
      -1);
  ResponseLyrics_descriptor_ = file->message_type(24);
  static const int ResponseLyrics_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseLyrics, lyrics_),
  };
  ResponseLyrics_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseLyrics_descriptor_,
      ResponseLyrics::default_instance_,
      ResponseLyrics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseLyrics, _has_bits_[0]),
      -1,
      -1,
      sizeof(ResponseLyrics),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseLyrics, _internal_metadata_),
      -1);
  Lyric_descriptor_ = file->message_type(25);
  static const int Lyric_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lyric, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lyric, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lyric, content_),
  };
  Lyric_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Lyric_descriptor_,
      Lyric::default_instance_,
      Lyric_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lyric, _has_bits_[0]),
      -1,
      -1,
      sizeof(Lyric),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lyric, _internal_metadata_),
      -1);
  RequestDownloadSongs_descriptor_ = file->message_type(26);
  static const int RequestDownloadSongs_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDownloadSongs, download_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDownloadSongs, playlist_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDownloadSongs, urls_),
  };
  RequestDownloadSongs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestDownloadSongs_descriptor_,
      RequestDownloadSongs::default_instance_,
      RequestDownloadSongs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDownloadSongs, _has_bits_[0]),
      -1,
      -1,
      sizeof(RequestDownloadSongs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDownloadSongs, _internal_metadata_),
      -1);
  ResponseSongFileChunk_descriptor_ = file->message_type(27);
  static const int ResponseSongFileChunk_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSongFileChunk, chunk_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSongFileChunk, chunk_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSongFileChunk, file_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSongFileChunk, file_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSongFileChunk, song_metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSongFileChunk, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSongFileChunk, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSongFileChunk, file_hash_),
  };
  ResponseSongFileChunk_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseSongFileChunk_descriptor_,
      ResponseSongFileChunk::default_instance_,
      ResponseSongFileChunk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSongFileChunk, _has_bits_[0]),
      -1,
      -1,
      sizeof(ResponseSongFileChunk),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSongFileChunk, _internal_metadata_),
      -1);
  ResponseLibraryChunk_descriptor_ = file->message_type(28);
  static const int ResponseLibraryChunk_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseLibraryChunk, chunk_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseLibraryChunk, chunk_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseLibraryChunk, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseLibraryChunk, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseLibraryChunk, file_hash_),
  };
  ResponseLibraryChunk_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseLibraryChunk_descriptor_,
      ResponseLibraryChunk::default_instance_,
      ResponseLibraryChunk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseLibraryChunk, _has_bits_[0]),
      -1,
      -1,
      sizeof(ResponseLibraryChunk),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseLibraryChunk, _internal_metadata_),
      -1);
  ResponseSongOffer_descriptor_ = file->message_type(29);
  static const int ResponseSongOffer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSongOffer, accepted_),
  };
  ResponseSongOffer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseSongOffer_descriptor_,
      ResponseSongOffer::default_instance_,
      ResponseSongOffer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSongOffer, _has_bits_[0]),
      -1,
      -1,
      sizeof(ResponseSongOffer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSongOffer, _internal_metadata_),
      -1);
  RequestRateSong_descriptor_ = file->message_type(30);
  static const int RequestRateSong_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRateSong, rating_),
  };
  RequestRateSong_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestRateSong_descriptor_,
      RequestRateSong::default_instance_,
      RequestRateSong_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRateSong, _has_bits_[0]),
      -1,
      -1,
      sizeof(RequestRateSong),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRateSong, _internal_metadata_),
      -1);
  ResponseDownloadTotalSize_descriptor_ = file->message_type(31);
  static const int ResponseDownloadTotalSize_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseDownloadTotalSize, total_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseDownloadTotalSize, file_count_),
  };
  ResponseDownloadTotalSize_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseDownloadTotalSize_descriptor_,
      ResponseDownloadTotalSize::default_instance_,
      ResponseDownloadTotalSize_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseDownloadTotalSize, _has_bits_[0]),
      -1,
      -1,
      sizeof(ResponseDownloadTotalSize),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseDownloadTotalSize, _internal_metadata_),
      -1);
  RequestGlobalSearch_descriptor_ = file->message_type(32);
  static const int RequestGlobalSearch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGlobalSearch, query_),
  };
  RequestGlobalSearch_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestGlobalSearch_descriptor_,
      RequestGlobalSearch::default_instance_,
      RequestGlobalSearch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGlobalSearch, _has_bits_[0]),
      -1,
      -1,
      sizeof(RequestGlobalSearch),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGlobalSearch, _internal_metadata_),
      -1);
  ResponseGlobalSearch_descriptor_ = file->message_type(33);
  static const int ResponseGlobalSearch_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseGlobalSearch, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseGlobalSearch, query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseGlobalSearch, search_provider_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseGlobalSearch, song_metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseGlobalSearch, search_provider_icon_),
  };
  ResponseGlobalSearch_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseGlobalSearch_descriptor_,
      ResponseGlobalSearch::default_instance_,
      ResponseGlobalSearch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseGlobalSearch, _has_bits_[0]),
      -1,
      -1,
      sizeof(ResponseGlobalSearch),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseGlobalSearch, _internal_metadata_),
      -1);
  ResponseTranscoderStatus_descriptor_ = file->message_type(34);
  static const int ResponseTranscoderStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTranscoderStatus, processed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTranscoderStatus, total_),
  };
  ResponseTranscoderStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseTranscoderStatus_descriptor_,
      ResponseTranscoderStatus::default_instance_,
      ResponseTranscoderStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTranscoderStatus, _has_bits_[0]),
      -1,
      -1,
      sizeof(ResponseTranscoderStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTranscoderStatus, _internal_metadata_),
      -1);
  ResponseGlobalSearchStatus_descriptor_ = file->message_type(35);
  static const int ResponseGlobalSearchStatus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseGlobalSearchStatus, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseGlobalSearchStatus, query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseGlobalSearchStatus, status_),
  };
  ResponseGlobalSearchStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseGlobalSearchStatus_descriptor_,
      ResponseGlobalSearchStatus::default_instance_,
      ResponseGlobalSearchStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseGlobalSearchStatus, _has_bits_[0]),
      -1,
      -1,
      sizeof(ResponseGlobalSearchStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseGlobalSearchStatus, _internal_metadata_),
      -1);
  Message_descriptor_ = file->message_type(36);
  static const int Message_offsets_[33] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, request_connect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, request_playlists_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, request_playlist_songs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, request_change_song_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, request_set_volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, request_set_track_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, request_insert_urls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, request_remove_songs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, request_open_playlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, request_close_playlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, request_download_songs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, request_rate_song_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, request_global_search_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, repeat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, shuffle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, response_clementine_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, response_current_metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, response_playlists_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, response_playlist_songs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, response_engine_state_changed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, response_update_track_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, response_disconnect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, response_active_changed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, response_lyrics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, response_song_file_chunk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, response_song_offer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, response_library_chunk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, response_download_total_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, response_global_search_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, response_transcoder_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, response_global_search_status_),
  };
  Message_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Message_descriptor_,
      Message::default_instance_,
      Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _has_bits_[0]),
      -1,
      -1,
      sizeof(Message),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _internal_metadata_),
      -1);
  MsgType_descriptor_ = file->enum_type(0);
  EngineState_descriptor_ = file->enum_type(1);
  RepeatMode_descriptor_ = file->enum_type(2);
  ShuffleMode_descriptor_ = file->enum_type(3);
  ReasonDisconnect_descriptor_ = file->enum_type(4);
  DownloadItem_descriptor_ = file->enum_type(5);
  GlobalSearchStatus_descriptor_ = file->enum_type(6);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_remotecontrolmessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestFiles_descriptor_, &RequestFiles::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Files_descriptor_, &Files::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SongMetadata_descriptor_, &SongMetadata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Playlist_descriptor_, &Playlist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestPlaylists_descriptor_, &RequestPlaylists::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestPlaylistSongs_descriptor_, &RequestPlaylistSongs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestChangeSong_descriptor_, &RequestChangeSong::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestSetVolume_descriptor_, &RequestSetVolume::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Repeat_descriptor_, &Repeat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Shuffle_descriptor_, &Shuffle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseClementineInfo_descriptor_, &ResponseClementineInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseCurrentMetadata_descriptor_, &ResponseCurrentMetadata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponsePlaylists_descriptor_, &ResponsePlaylists::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponsePlaylistSongs_descriptor_, &ResponsePlaylistSongs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseEngineStateChanged_descriptor_, &ResponseEngineStateChanged::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseUpdateTrackPosition_descriptor_, &ResponseUpdateTrackPosition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestConnect_descriptor_, &RequestConnect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseDisconnect_descriptor_, &ResponseDisconnect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseActiveChanged_descriptor_, &ResponseActiveChanged::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestSetTrackPosition_descriptor_, &RequestSetTrackPosition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestInsertUrls_descriptor_, &RequestInsertUrls::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestRemoveSongs_descriptor_, &RequestRemoveSongs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestOpenPlaylist_descriptor_, &RequestOpenPlaylist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestClosePlaylist_descriptor_, &RequestClosePlaylist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseLyrics_descriptor_, &ResponseLyrics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Lyric_descriptor_, &Lyric::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestDownloadSongs_descriptor_, &RequestDownloadSongs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseSongFileChunk_descriptor_, &ResponseSongFileChunk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseLibraryChunk_descriptor_, &ResponseLibraryChunk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseSongOffer_descriptor_, &ResponseSongOffer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestRateSong_descriptor_, &RequestRateSong::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseDownloadTotalSize_descriptor_, &ResponseDownloadTotalSize::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestGlobalSearch_descriptor_, &RequestGlobalSearch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseGlobalSearch_descriptor_, &ResponseGlobalSearch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseTranscoderStatus_descriptor_, &ResponseTranscoderStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseGlobalSearchStatus_descriptor_, &ResponseGlobalSearchStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Message_descriptor_, &Message::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_remotecontrolmessages_2eproto() {
  delete RequestFiles::default_instance_;
  delete RequestFiles_reflection_;
  delete Files::default_instance_;
  delete Files_reflection_;
  delete SongMetadata::default_instance_;
  delete SongMetadata_reflection_;
  delete Playlist::default_instance_;
  delete Playlist_reflection_;
  delete RequestPlaylists::default_instance_;
  delete RequestPlaylists_reflection_;
  delete RequestPlaylistSongs::default_instance_;
  delete RequestPlaylistSongs_reflection_;
  delete RequestChangeSong::default_instance_;
  delete RequestChangeSong_reflection_;
  delete RequestSetVolume::default_instance_;
  delete RequestSetVolume_reflection_;
  delete Repeat::default_instance_;
  delete Repeat_reflection_;
  delete Shuffle::default_instance_;
  delete Shuffle_reflection_;
  delete ResponseClementineInfo::default_instance_;
  delete ResponseClementineInfo_reflection_;
  delete ResponseCurrentMetadata::default_instance_;
  delete ResponseCurrentMetadata_reflection_;
  delete ResponsePlaylists::default_instance_;
  delete ResponsePlaylists_reflection_;
  delete ResponsePlaylistSongs::default_instance_;
  delete ResponsePlaylistSongs_reflection_;
  delete ResponseEngineStateChanged::default_instance_;
  delete ResponseEngineStateChanged_reflection_;
  delete ResponseUpdateTrackPosition::default_instance_;
  delete ResponseUpdateTrackPosition_reflection_;
  delete RequestConnect::default_instance_;
  delete RequestConnect_reflection_;
  delete ResponseDisconnect::default_instance_;
  delete ResponseDisconnect_reflection_;
  delete ResponseActiveChanged::default_instance_;
  delete ResponseActiveChanged_reflection_;
  delete RequestSetTrackPosition::default_instance_;
  delete RequestSetTrackPosition_reflection_;
  delete RequestInsertUrls::default_instance_;
  delete RequestInsertUrls_reflection_;
  delete RequestRemoveSongs::default_instance_;
  delete RequestRemoveSongs_reflection_;
  delete RequestOpenPlaylist::default_instance_;
  delete RequestOpenPlaylist_reflection_;
  delete RequestClosePlaylist::default_instance_;
  delete RequestClosePlaylist_reflection_;
  delete ResponseLyrics::default_instance_;
  delete ResponseLyrics_reflection_;
  delete Lyric::default_instance_;
  delete Lyric_reflection_;
  delete RequestDownloadSongs::default_instance_;
  delete RequestDownloadSongs_reflection_;
  delete ResponseSongFileChunk::default_instance_;
  delete ResponseSongFileChunk_reflection_;
  delete ResponseLibraryChunk::default_instance_;
  delete ResponseLibraryChunk_reflection_;
  delete ResponseSongOffer::default_instance_;
  delete ResponseSongOffer_reflection_;
  delete RequestRateSong::default_instance_;
  delete RequestRateSong_reflection_;
  delete ResponseDownloadTotalSize::default_instance_;
  delete ResponseDownloadTotalSize_reflection_;
  delete RequestGlobalSearch::default_instance_;
  delete RequestGlobalSearch_reflection_;
  delete ResponseGlobalSearch::default_instance_;
  delete ResponseGlobalSearch_reflection_;
  delete ResponseTranscoderStatus::default_instance_;
  delete ResponseTranscoderStatus_reflection_;
  delete ResponseGlobalSearchStatus::default_instance_;
  delete ResponseGlobalSearchStatus_reflection_;
  delete Message::default_instance_;
  delete Message_reflection_;
}

void protobuf_AddDesc_remotecontrolmessages_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_remotecontrolmessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033remotecontrolmessages.proto\022\tpb.remote"
    "\"$\n\014RequestFiles\022\024\n\014relativePath\030\001 \001(\t\"+"
    "\n\005Files\022\024\n\014relativePath\030\001 \001(\t\022\014\n\004file\030\002 "
    "\003(\t\"\373\004\n\014SongMetadata\022\n\n\002id\030\001 \001(\005\022\r\n\005inde"
    "x\030\002 \001(\005\022\r\n\005title\030\003 \001(\t\022\r\n\005album\030\004 \001(\t\022\016\n"
    "\006artist\030\005 \001(\t\022\023\n\013albumartist\030\006 \001(\t\022\r\n\005tr"
    "ack\030\007 \001(\005\022\014\n\004disc\030\010 \001(\005\022\023\n\013pretty_year\030\t"
    " \001(\t\022\r\n\005genre\030\n \001(\t\022\021\n\tplaycount\030\013 \001(\005\022\025"
    "\n\rpretty_length\030\014 \001(\t\022\013\n\003art\030\r \001(\014\022\016\n\006le"
    "ngth\030\016 \001(\005\022\020\n\010is_local\030\017 \001(\010\022\020\n\010filename"
    "\030\020 \001(\t\022\021\n\tfile_size\030\021 \001(\005\022\016\n\006rating\030\022 \001("
    "\002\022\013\n\003url\030\023 \001(\t\022\025\n\rart_automatic\030\024 \001(\t\022\022\n"
    "\nart_manual\030\025 \001(\t\022*\n\004type\030\026 \001(\0162\034.pb.rem"
    "ote.SongMetadata.Type\"\331\001\n\004Type\022\013\n\007UNKNOW"
    "N\020\000\022\007\n\003ASF\020\001\022\010\n\004FLAC\020\002\022\007\n\003MP4\020\003\022\007\n\003MPC\020\004"
    "\022\010\n\004MPEG\020\005\022\013\n\007OGGFLAC\020\006\022\014\n\010OGGSPEEX\020\007\022\r\n"
    "\tOGGVORBIS\020\010\022\010\n\004AIFF\020\t\022\007\n\003WAV\020\n\022\r\n\tTRUEA"
    "UDIO\020\013\022\010\n\004CDDA\020\014\022\013\n\007OGGOPUS\020\r\022\013\n\007WAVPACK"
    "\020\016\022\007\n\003SPC\020\017\022\007\n\003VGM\020\020\022\007\n\003APE\020\021\022\n\n\006STREAM\020"
    "c\"X\n\010Playlist\022\n\n\002id\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022"
    "\022\n\nitem_count\030\003 \001(\005\022\016\n\006active\030\004 \001(\010\022\016\n\006c"
    "losed\030\005 \001(\010\"*\n\020RequestPlaylists\022\026\n\016inclu"
    "de_closed\030\001 \001(\010\"\"\n\024RequestPlaylistSongs\022"
    "\n\n\002id\030\001 \001(\005\"<\n\021RequestChangeSong\022\023\n\013play"
    "list_id\030\001 \001(\005\022\022\n\nsong_index\030\002 \001(\005\"\"\n\020Req"
    "uestSetVolume\022\016\n\006volume\030\001 \001(\005\"4\n\006Repeat\022"
    "*\n\013repeat_mode\030\001 \001(\0162\025.pb.remote.RepeatM"
    "ode\"7\n\007Shuffle\022,\n\014shuffle_mode\030\001 \001(\0162\026.p"
    "b.remote.ShuffleMode\"P\n\026ResponseClementi"
    "neInfo\022\017\n\007version\030\001 \001(\t\022%\n\005state\030\002 \001(\0162\026"
    ".pb.remote.EngineState\"I\n\027ResponseCurren"
    "tMetadata\022.\n\rsong_metadata\030\001 \001(\0132\027.pb.re"
    "mote.SongMetadata\":\n\021ResponsePlaylists\022%"
    "\n\010playlist\030\001 \003(\0132\023.pb.remote.Playlist\"p\n"
    "\025ResponsePlaylistSongs\022/\n\022requested_play"
    "list\030\001 \001(\0132\023.pb.remote.Playlist\022&\n\005songs"
    "\030\002 \003(\0132\027.pb.remote.SongMetadata\"C\n\032Respo"
    "nseEngineStateChanged\022%\n\005state\030\001 \001(\0162\026.p"
    "b.remote.EngineState\"/\n\033ResponseUpdateTr"
    "ackPosition\022\020\n\010position\030\001 \001(\005\"T\n\016Request"
    "Connect\022\021\n\tauth_code\030\001 \001(\005\022\033\n\023send_playl"
    "ist_songs\030\002 \001(\010\022\022\n\ndownloader\030\003 \001(\010\"L\n\022R"
    "esponseDisconnect\0226\n\021reason_disconnect\030\001"
    " \001(\0162\033.pb.remote.ReasonDisconnect\"#\n\025Res"
    "ponseActiveChanged\022\n\n\002id\030\001 \001(\005\"+\n\027Reques"
    "tSetTrackPosition\022\020\n\010position\030\001 \001(\005\"\245\001\n\021"
    "RequestInsertUrls\022\023\n\013playlist_id\030\001 \001(\005\022\014"
    "\n\004urls\030\002 \003(\t\022\024\n\010position\030\003 \001(\005:\002-1\022\027\n\010pl"
    "ay_now\030\004 \001(\010:\005false\022\026\n\007enqueue\030\005 \001(\010:\005fa"
    "lse\022&\n\005songs\030\006 \003(\0132\027.pb.remote.SongMetad"
    "ata\"8\n\022RequestRemoveSongs\022\023\n\013playlist_id"
    "\030\001 \001(\005\022\r\n\005songs\030\002 \003(\005\"*\n\023RequestOpenPlay"
    "list\022\023\n\013playlist_id\030\001 \001(\005\"+\n\024RequestClos"
    "ePlaylist\022\023\n\013playlist_id\030\001 \001(\005\"2\n\016Respon"
    "seLyrics\022 \n\006lyrics\030\001 \003(\0132\020.pb.remote.Lyr"
    "ic\"3\n\005Lyric\022\n\n\002id\030\001 \001(\t\022\r\n\005title\030\002 \001(\t\022\017"
    "\n\007content\030\003 \001(\t\"i\n\024RequestDownloadSongs\022"
    ".\n\rdownload_item\030\001 \001(\0162\027.pb.remote.Downl"
    "oadItem\022\023\n\013playlist_id\030\002 \001(\005\022\014\n\004urls\030\003 \003"
    "(\t\"\312\001\n\025ResponseSongFileChunk\022\024\n\014chunk_nu"
    "mber\030\001 \001(\005\022\023\n\013chunk_count\030\002 \001(\005\022\023\n\013file_"
    "number\030\003 \001(\005\022\022\n\nfile_count\030\004 \001(\005\022.\n\rsong"
    "_metadata\030\006 \001(\0132\027.pb.remote.SongMetadata"
    "\022\014\n\004data\030\007 \001(\014\022\014\n\004size\030\010 \001(\005\022\021\n\tfile_has"
    "h\030\t \001(\014\"p\n\024ResponseLibraryChunk\022\024\n\014chunk"
    "_number\030\001 \001(\005\022\023\n\013chunk_count\030\002 \001(\005\022\014\n\004da"
    "ta\030\003 \001(\014\022\014\n\004size\030\004 \001(\005\022\021\n\tfile_hash\030\005 \001("
    "\014\"%\n\021ResponseSongOffer\022\020\n\010accepted\030\001 \001(\010"
    "\"!\n\017RequestRateSong\022\016\n\006rating\030\001 \001(\002\"C\n\031R"
    "esponseDownloadTotalSize\022\022\n\ntotal_size\030\001"
    " \001(\005\022\022\n\nfile_count\030\002 \001(\005\"$\n\023RequestGloba"
    "lSearch\022\r\n\005query\030\001 \001(\t\"\230\001\n\024ResponseGloba"
    "lSearch\022\n\n\002id\030\001 \001(\005\022\r\n\005query\030\002 \001(\t\022\027\n\017se"
    "arch_provider\030\003 \001(\t\022.\n\rsong_metadata\030\004 \003"
    "(\0132\027.pb.remote.SongMetadata\022\034\n\024search_pr"
    "ovider_icon\030\005 \001(\014\"<\n\030ResponseTranscoderS"
    "tatus\022\021\n\tprocessed\030\001 \001(\005\022\r\n\005total\030\002 \001(\005\""
    "f\n\032ResponseGlobalSearchStatus\022\n\n\002id\030\001 \001("
    "\005\022\r\n\005query\030\002 \001(\t\022-\n\006status\030\003 \001(\0162\035.pb.re"
    "mote.GlobalSearchStatus\"\347\017\n\007Message\022\023\n\007v"
    "ersion\030\001 \001(\005:\00221\022)\n\004type\030\002 \001(\0162\022.pb.remo"
    "te.MsgType:\007UNKNOWN\0222\n\017request_connect\030\025"
    " \001(\0132\031.pb.remote.RequestConnect\0226\n\021reque"
    "st_playlists\030\033 \001(\0132\033.pb.remote.RequestPl"
    "aylists\022\?\n\026request_playlist_songs\030\n \001(\0132"
    "\037.pb.remote.RequestPlaylistSongs\0229\n\023requ"
    "est_change_song\030\013 \001(\0132\034.pb.remote.Reques"
    "tChangeSong\0227\n\022request_set_volume\030\014 \001(\0132"
    "\033.pb.remote.RequestSetVolume\022F\n\032request_"
    "set_track_position\030\027 \001(\0132\".pb.remote.Req"
    "uestSetTrackPosition\0229\n\023request_insert_u"
    "rls\030\031 \001(\0132\034.pb.remote.RequestInsertUrls\022"
    ";\n\024request_remove_songs\030\032 \001(\0132\035.pb.remot"
    "e.RequestRemoveSongs\022=\n\025request_open_pla"
    "ylist\030\034 \001(\0132\036.pb.remote.RequestOpenPlayl"
    "ist\022\?\n\026request_close_playlist\030\035 \001(\0132\037.pb"
    ".remote.RequestClosePlaylist\022\?\n\026request_"
    "download_songs\030\037 \001(\0132\037.pb.remote.Request"
    "DownloadSongs\0225\n\021request_rate_song\030# \001(\013"
    "2\032.pb.remote.RequestRateSong\022=\n\025request_"
    "global_search\030% \001(\0132\036.pb.remote.RequestG"
    "lobalSearch\022!\n\006repeat\030\r \001(\0132\021.pb.remote."
    "Repeat\022#\n\007shuffle\030\016 \001(\0132\022.pb.remote.Shuf"
    "fle\022C\n\030response_clementine_info\030\017 \001(\0132!."
    "pb.remote.ResponseClementineInfo\022E\n\031resp"
    "onse_current_metadata\030\020 \001(\0132\".pb.remote."
    "ResponseCurrentMetadata\0228\n\022response_play"
    "lists\030\021 \001(\0132\034.pb.remote.ResponsePlaylist"
    "s\022A\n\027response_playlist_songs\030\022 \001(\0132 .pb."
    "remote.ResponsePlaylistSongs\022L\n\035response"
    "_engine_state_changed\030\023 \001(\0132%.pb.remote."
    "ResponseEngineStateChanged\022N\n\036response_u"
    "pdate_track_position\030\024 \001(\0132&.pb.remote.R"
    "esponseUpdateTrackPosition\022:\n\023response_d"
    "isconnect\030\026 \001(\0132\035.pb.remote.ResponseDisc"
    "onnect\022A\n\027response_active_changed\030\030 \001(\0132"
    " .pb.remote.ResponseActiveChanged\0222\n\017res"
    "ponse_lyrics\030\036 \001(\0132\031.pb.remote.ResponseL"
    "yrics\022B\n\030response_song_file_chunk\030  \001(\0132"
    " .pb.remote.ResponseSongFileChunk\0229\n\023res"
    "ponse_song_offer\030! \001(\0132\034.pb.remote.Respo"
    "nseSongOffer\022\?\n\026response_library_chunk\030\""
    " \001(\0132\037.pb.remote.ResponseLibraryChunk\022J\n"
    "\034response_download_total_size\030$ \001(\0132$.pb"
    ".remote.ResponseDownloadTotalSize\022\?\n\026res"
    "ponse_global_search\030& \001(\0132\037.pb.remote.Re"
    "sponseGlobalSearch\022G\n\032response_transcode"
    "r_status\030\' \001(\0132#.pb.remote.ResponseTrans"
    "coderStatus\022L\n\035response_global_search_st"
    "atus\030( \001(\0132%.pb.remote.ResponseGlobalSea"
    "rchStatus*\232\007\n\007MsgType\022\013\n\007UNKNOWN\020\000\022\013\n\007CO"
    "NNECT\020\001\022\025\n\021REQUEST_PLAYLISTS\020\003\022\032\n\026REQUES"
    "T_PLAYLIST_SONGS\020\004\022\017\n\013CHANGE_SONG\020\005\022\016\n\nS"
    "ET_VOLUME\020\006\022\026\n\022SET_TRACK_POSITION\020\007\022\017\n\013I"
    "NSERT_URLS\020\010\022\020\n\014REMOVE_SONGS\020\t\022\021\n\rOPEN_P"
    "LAYLIST\020\n\022\022\n\016CLOSE_PLAYLIST\020\013\022\016\n\nGET_LYR"
    "ICS\020\016\022\022\n\016DOWNLOAD_SONGS\020\017\022\027\n\023SONG_OFFER_"
    "RESPONSE\020\020\022\010\n\004LOVE\020\014\022\007\n\003BAN\020\r\022\016\n\nSTOP_AF"
    "TER\020\021\022\017\n\013GET_LIBRARY\020\022\022\r\n\tRATE_SONG\020\023\022\021\n"
    "\rGLOBAL_SEARCH\020d\022\016\n\tGET_FILES\020\310\001\022\021\n\014APPE"
    "ND_FILES\020\311\001\022\016\n\nDISCONNECT\020\002\022\010\n\004PLAY\020\024\022\r\n"
    "\tPLAYPAUSE\020\025\022\t\n\005PAUSE\020\026\022\010\n\004STOP\020\027\022\010\n\004NEX"
    "T\020\030\022\014\n\010PREVIOUS\020\031\022\024\n\020SHUFFLE_PLAYLIST\020\032\022"
    "\n\n\006REPEAT\020\033\022\013\n\007SHUFFLE\020\034\022\010\n\004INFO\020(\022\024\n\020CU"
    "RRENT_METAINFO\020)\022\r\n\tPLAYLISTS\020*\022\022\n\016PLAYL"
    "IST_SONGS\020+\022\030\n\024ENGINE_STATE_CHANGED\020,\022\016\n"
    "\nKEEP_ALIVE\020-\022\031\n\025UPDATE_TRACK_POSITION\020."
    "\022\033\n\027ACTIVE_PLAYLIST_CHANGED\020/\022\034\n\030FIRST_D"
    "ATA_SENT_COMPLETE\0200\022\n\n\006LYRICS\0201\022\023\n\017SONG_"
    "FILE_CHUNK\0202\022\030\n\024DOWNLOAD_QUEUE_EMPTY\0203\022\021"
    "\n\rLIBRARY_CHUNK\0204\022\027\n\023DOWNLOAD_TOTAL_SIZE"
    "\0205\022\030\n\024GLOBAL_SEARCH_RESULT\0206\022\025\n\021TRANSCOD"
    "ING_FILES\0207\022\030\n\024GLOBAL_SEARCH_STATUS\0208\022\017\n"
    "\nFILES_LIST\020\312\001*;\n\013EngineState\022\t\n\005Empty\020\000"
    "\022\010\n\004Idle\020\001\022\013\n\007Playing\020\002\022\n\n\006Paused\020\003*|\n\nR"
    "epeatMode\022\016\n\nRepeat_Off\020\000\022\020\n\014Repeat_Trac"
    "k\020\001\022\020\n\014Repeat_Album\020\002\022\023\n\017Repeat_Playlist"
    "\020\003\022\023\n\017Repeat_OneByOne\020\004\022\020\n\014Repeat_Intro\020"
    "\005*\\\n\013ShuffleMode\022\017\n\013Shuffle_Off\020\000\022\017\n\013Shu"
    "ffle_All\020\001\022\027\n\023Shuffle_InsideAlbum\020\002\022\022\n\016S"
    "huffle_Albums\020\003*k\n\020ReasonDisconnect\022\023\n\017S"
    "erver_Shutdown\020\001\022\023\n\017Wrong_Auth_Code\020\002\022\025\n"
    "\021Not_Authenticated\020\003\022\026\n\022Download_Forbidd"
    "en\020\004*G\n\014DownloadItem\022\017\n\013CurrentItem\020\001\022\r\n"
    "\tItemAlbum\020\002\022\r\n\tAPlaylist\020\003\022\010\n\004Urls\020\004*G\n"
    "\022GlobalSearchStatus\022\027\n\023GlobalSearchStart"
    "ed\020\001\022\030\n\024GlobalSearchFinished\020\002", 6670);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "remotecontrolmessages.proto", &protobuf_RegisterTypes);
  RequestFiles::default_instance_ = new RequestFiles();
  Files::default_instance_ = new Files();
  SongMetadata::default_instance_ = new SongMetadata();
  Playlist::default_instance_ = new Playlist();
  RequestPlaylists::default_instance_ = new RequestPlaylists();
  RequestPlaylistSongs::default_instance_ = new RequestPlaylistSongs();
  RequestChangeSong::default_instance_ = new RequestChangeSong();
  RequestSetVolume::default_instance_ = new RequestSetVolume();
  Repeat::default_instance_ = new Repeat();
  Shuffle::default_instance_ = new Shuffle();
  ResponseClementineInfo::default_instance_ = new ResponseClementineInfo();
  ResponseCurrentMetadata::default_instance_ = new ResponseCurrentMetadata();
  ResponsePlaylists::default_instance_ = new ResponsePlaylists();
  ResponsePlaylistSongs::default_instance_ = new ResponsePlaylistSongs();
  ResponseEngineStateChanged::default_instance_ = new ResponseEngineStateChanged();
  ResponseUpdateTrackPosition::default_instance_ = new ResponseUpdateTrackPosition();
  RequestConnect::default_instance_ = new RequestConnect();
  ResponseDisconnect::default_instance_ = new ResponseDisconnect();
  ResponseActiveChanged::default_instance_ = new ResponseActiveChanged();
  RequestSetTrackPosition::default_instance_ = new RequestSetTrackPosition();
  RequestInsertUrls::default_instance_ = new RequestInsertUrls();
  RequestRemoveSongs::default_instance_ = new RequestRemoveSongs();
  RequestOpenPlaylist::default_instance_ = new RequestOpenPlaylist();
  RequestClosePlaylist::default_instance_ = new RequestClosePlaylist();
  ResponseLyrics::default_instance_ = new ResponseLyrics();
  Lyric::default_instance_ = new Lyric();
  RequestDownloadSongs::default_instance_ = new RequestDownloadSongs();
  ResponseSongFileChunk::default_instance_ = new ResponseSongFileChunk();
  ResponseLibraryChunk::default_instance_ = new ResponseLibraryChunk();
  ResponseSongOffer::default_instance_ = new ResponseSongOffer();
  RequestRateSong::default_instance_ = new RequestRateSong();
  ResponseDownloadTotalSize::default_instance_ = new ResponseDownloadTotalSize();
  RequestGlobalSearch::default_instance_ = new RequestGlobalSearch();
  ResponseGlobalSearch::default_instance_ = new ResponseGlobalSearch();
  ResponseTranscoderStatus::default_instance_ = new ResponseTranscoderStatus();
  ResponseGlobalSearchStatus::default_instance_ = new ResponseGlobalSearchStatus();
  Message::default_instance_ = new Message();
  RequestFiles::default_instance_->InitAsDefaultInstance();
  Files::default_instance_->InitAsDefaultInstance();
  SongMetadata::default_instance_->InitAsDefaultInstance();
  Playlist::default_instance_->InitAsDefaultInstance();
  RequestPlaylists::default_instance_->InitAsDefaultInstance();
  RequestPlaylistSongs::default_instance_->InitAsDefaultInstance();
  RequestChangeSong::default_instance_->InitAsDefaultInstance();
  RequestSetVolume::default_instance_->InitAsDefaultInstance();
  Repeat::default_instance_->InitAsDefaultInstance();
  Shuffle::default_instance_->InitAsDefaultInstance();
  ResponseClementineInfo::default_instance_->InitAsDefaultInstance();
  ResponseCurrentMetadata::default_instance_->InitAsDefaultInstance();
  ResponsePlaylists::default_instance_->InitAsDefaultInstance();
  ResponsePlaylistSongs::default_instance_->InitAsDefaultInstance();
  ResponseEngineStateChanged::default_instance_->InitAsDefaultInstance();
  ResponseUpdateTrackPosition::default_instance_->InitAsDefaultInstance();
  RequestConnect::default_instance_->InitAsDefaultInstance();
  ResponseDisconnect::default_instance_->InitAsDefaultInstance();
  ResponseActiveChanged::default_instance_->InitAsDefaultInstance();
  RequestSetTrackPosition::default_instance_->InitAsDefaultInstance();
  RequestInsertUrls::default_instance_->InitAsDefaultInstance();
  RequestRemoveSongs::default_instance_->InitAsDefaultInstance();
  RequestOpenPlaylist::default_instance_->InitAsDefaultInstance();
  RequestClosePlaylist::default_instance_->InitAsDefaultInstance();
  ResponseLyrics::default_instance_->InitAsDefaultInstance();
  Lyric::default_instance_->InitAsDefaultInstance();
  RequestDownloadSongs::default_instance_->InitAsDefaultInstance();
  ResponseSongFileChunk::default_instance_->InitAsDefaultInstance();
  ResponseLibraryChunk::default_instance_->InitAsDefaultInstance();
  ResponseSongOffer::default_instance_->InitAsDefaultInstance();
  RequestRateSong::default_instance_->InitAsDefaultInstance();
  ResponseDownloadTotalSize::default_instance_->InitAsDefaultInstance();
  RequestGlobalSearch::default_instance_->InitAsDefaultInstance();
  ResponseGlobalSearch::default_instance_->InitAsDefaultInstance();
  ResponseTranscoderStatus::default_instance_->InitAsDefaultInstance();
  ResponseGlobalSearchStatus::default_instance_->InitAsDefaultInstance();
  Message::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_remotecontrolmessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_remotecontrolmessages_2eproto {
  StaticDescriptorInitializer_remotecontrolmessages_2eproto() {
    protobuf_AddDesc_remotecontrolmessages_2eproto();
  }
} static_descriptor_initializer_remotecontrolmessages_2eproto_;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgType_descriptor_;
}
bool MsgType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 100:
    case 200:
    case 201:
    case 202:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EngineState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EngineState_descriptor_;
}
bool EngineState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RepeatMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RepeatMode_descriptor_;
}
bool RepeatMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ShuffleMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShuffleMode_descriptor_;
}
bool ShuffleMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ReasonDisconnect_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReasonDisconnect_descriptor_;
}
bool ReasonDisconnect_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DownloadItem_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DownloadItem_descriptor_;
}
bool DownloadItem_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GlobalSearchStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlobalSearchStatus_descriptor_;
}
bool GlobalSearchStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestFiles::kRelativePathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestFiles::RequestFiles()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.RequestFiles)
}

void RequestFiles::InitAsDefaultInstance() {
}

RequestFiles::RequestFiles(const RequestFiles& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.remote.RequestFiles)
}

void RequestFiles::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  relativepath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestFiles::~RequestFiles() {
  // @@protoc_insertion_point(destructor:pb.remote.RequestFiles)
  SharedDtor();
}

void RequestFiles::SharedDtor() {
  relativepath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RequestFiles::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestFiles::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestFiles_descriptor_;
}

const RequestFiles& RequestFiles::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remotecontrolmessages_2eproto();
  return *default_instance_;
}

RequestFiles* RequestFiles::default_instance_ = NULL;

RequestFiles* RequestFiles::New(::google::protobuf::Arena* arena) const {
  RequestFiles* n = new RequestFiles;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestFiles::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.RequestFiles)
  if (has_relativepath()) {
    relativepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RequestFiles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.RequestFiles)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string relativePath = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_relativepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->relativepath().data(), this->relativepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.remote.RequestFiles.relativePath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.RequestFiles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.RequestFiles)
  return false;
#undef DO_
}

void RequestFiles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.RequestFiles)
  // optional string relativePath = 1;
  if (has_relativepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->relativepath().data(), this->relativepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.RequestFiles.relativePath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->relativepath(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.RequestFiles)
}

::google::protobuf::uint8* RequestFiles::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.RequestFiles)
  // optional string relativePath = 1;
  if (has_relativepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->relativepath().data(), this->relativepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.RequestFiles.relativePath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->relativepath(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.RequestFiles)
  return target;
}

int RequestFiles::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.RequestFiles)
  int total_size = 0;

  // optional string relativePath = 1;
  if (has_relativepath()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->relativepath());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestFiles::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.RequestFiles)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestFiles* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestFiles>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.RequestFiles)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.RequestFiles)
    MergeFrom(*source);
  }
}

void RequestFiles::MergeFrom(const RequestFiles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.RequestFiles)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_relativepath()) {
      set_has_relativepath();
      relativepath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.relativepath_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RequestFiles::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.RequestFiles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestFiles::CopyFrom(const RequestFiles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.RequestFiles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestFiles::IsInitialized() const {

  return true;
}

void RequestFiles::Swap(RequestFiles* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestFiles::InternalSwap(RequestFiles* other) {
  relativepath_.Swap(&other->relativepath_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestFiles::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestFiles_descriptor_;
  metadata.reflection = RequestFiles_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestFiles

// optional string relativePath = 1;
bool RequestFiles::has_relativepath() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RequestFiles::set_has_relativepath() {
  _has_bits_[0] |= 0x00000001u;
}
void RequestFiles::clear_has_relativepath() {
  _has_bits_[0] &= ~0x00000001u;
}
void RequestFiles::clear_relativepath() {
  relativepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_relativepath();
}
 const ::std::string& RequestFiles::relativepath() const {
  // @@protoc_insertion_point(field_get:pb.remote.RequestFiles.relativePath)
  return relativepath_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestFiles::set_relativepath(const ::std::string& value) {
  set_has_relativepath();
  relativepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.remote.RequestFiles.relativePath)
}
 void RequestFiles::set_relativepath(const char* value) {
  set_has_relativepath();
  relativepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.remote.RequestFiles.relativePath)
}
 void RequestFiles::set_relativepath(const char* value, size_t size) {
  set_has_relativepath();
  relativepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.remote.RequestFiles.relativePath)
}
 ::std::string* RequestFiles::mutable_relativepath() {
  set_has_relativepath();
  // @@protoc_insertion_point(field_mutable:pb.remote.RequestFiles.relativePath)
  return relativepath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RequestFiles::release_relativepath() {
  // @@protoc_insertion_point(field_release:pb.remote.RequestFiles.relativePath)
  clear_has_relativepath();
  return relativepath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestFiles::set_allocated_relativepath(::std::string* relativepath) {
  if (relativepath != NULL) {
    set_has_relativepath();
  } else {
    clear_has_relativepath();
  }
  relativepath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), relativepath);
  // @@protoc_insertion_point(field_set_allocated:pb.remote.RequestFiles.relativePath)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Files::kRelativePathFieldNumber;
const int Files::kFileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Files::Files()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.Files)
}

void Files::InitAsDefaultInstance() {
}

Files::Files(const Files& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.remote.Files)
}

void Files::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  relativepath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Files::~Files() {
  // @@protoc_insertion_point(destructor:pb.remote.Files)
  SharedDtor();
}

void Files::SharedDtor() {
  relativepath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Files::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Files::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Files_descriptor_;
}

const Files& Files::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remotecontrolmessages_2eproto();
  return *default_instance_;
}

Files* Files::default_instance_ = NULL;

Files* Files::New(::google::protobuf::Arena* arena) const {
  Files* n = new Files;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Files::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.Files)
  if (has_relativepath()) {
    relativepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  file_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Files::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.Files)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string relativePath = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_relativepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->relativepath().data(), this->relativepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.remote.Files.relativePath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_file;
        break;
      }

      // repeated string file = 2;
      case 2: {
        if (tag == 18) {
         parse_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file(this->file_size() - 1).data(),
            this->file(this->file_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.remote.Files.file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_file;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.Files)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.Files)
  return false;
#undef DO_
}

void Files::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.Files)
  // optional string relativePath = 1;
  if (has_relativepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->relativepath().data(), this->relativepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.Files.relativePath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->relativepath(), output);
  }

  // repeated string file = 2;
  for (int i = 0; i < this->file_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file(i).data(), this->file(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.Files.file");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->file(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.Files)
}

::google::protobuf::uint8* Files::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.Files)
  // optional string relativePath = 1;
  if (has_relativepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->relativepath().data(), this->relativepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.Files.relativePath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->relativepath(), target);
  }

  // repeated string file = 2;
  for (int i = 0; i < this->file_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file(i).data(), this->file(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.Files.file");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->file(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.Files)
  return target;
}

int Files::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.Files)
  int total_size = 0;

  // optional string relativePath = 1;
  if (has_relativepath()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->relativepath());
  }

  // repeated string file = 2;
  total_size += 1 * this->file_size();
  for (int i = 0; i < this->file_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->file(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Files::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.Files)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Files* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Files>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.Files)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.Files)
    MergeFrom(*source);
  }
}

void Files::MergeFrom(const Files& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.Files)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  file_.MergeFrom(from.file_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_relativepath()) {
      set_has_relativepath();
      relativepath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.relativepath_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Files::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.Files)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Files::CopyFrom(const Files& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.Files)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Files::IsInitialized() const {

  return true;
}

void Files::Swap(Files* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Files::InternalSwap(Files* other) {
  relativepath_.Swap(&other->relativepath_);
  file_.UnsafeArenaSwap(&other->file_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Files::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Files_descriptor_;
  metadata.reflection = Files_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Files

// optional string relativePath = 1;
bool Files::has_relativepath() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Files::set_has_relativepath() {
  _has_bits_[0] |= 0x00000001u;
}
void Files::clear_has_relativepath() {
  _has_bits_[0] &= ~0x00000001u;
}
void Files::clear_relativepath() {
  relativepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_relativepath();
}
 const ::std::string& Files::relativepath() const {
  // @@protoc_insertion_point(field_get:pb.remote.Files.relativePath)
  return relativepath_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Files::set_relativepath(const ::std::string& value) {
  set_has_relativepath();
  relativepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.remote.Files.relativePath)
}
 void Files::set_relativepath(const char* value) {
  set_has_relativepath();
  relativepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.remote.Files.relativePath)
}
 void Files::set_relativepath(const char* value, size_t size) {
  set_has_relativepath();
  relativepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.remote.Files.relativePath)
}
 ::std::string* Files::mutable_relativepath() {
  set_has_relativepath();
  // @@protoc_insertion_point(field_mutable:pb.remote.Files.relativePath)
  return relativepath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Files::release_relativepath() {
  // @@protoc_insertion_point(field_release:pb.remote.Files.relativePath)
  clear_has_relativepath();
  return relativepath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Files::set_allocated_relativepath(::std::string* relativepath) {
  if (relativepath != NULL) {
    set_has_relativepath();
  } else {
    clear_has_relativepath();
  }
  relativepath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), relativepath);
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Files.relativePath)
}

// repeated string file = 2;
int Files::file_size() const {
  return file_.size();
}
void Files::clear_file() {
  file_.Clear();
}
 const ::std::string& Files::file(int index) const {
  // @@protoc_insertion_point(field_get:pb.remote.Files.file)
  return file_.Get(index);
}
 ::std::string* Files::mutable_file(int index) {
  // @@protoc_insertion_point(field_mutable:pb.remote.Files.file)
  return file_.Mutable(index);
}
 void Files::set_file(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.remote.Files.file)
  file_.Mutable(index)->assign(value);
}
 void Files::set_file(int index, const char* value) {
  file_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.remote.Files.file)
}
 void Files::set_file(int index, const char* value, size_t size) {
  file_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.remote.Files.file)
}
 ::std::string* Files::add_file() {
  // @@protoc_insertion_point(field_add_mutable:pb.remote.Files.file)
  return file_.Add();
}
 void Files::add_file(const ::std::string& value) {
  file_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.remote.Files.file)
}
 void Files::add_file(const char* value) {
  file_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.remote.Files.file)
}
 void Files::add_file(const char* value, size_t size) {
  file_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.remote.Files.file)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Files::file() const {
  // @@protoc_insertion_point(field_list:pb.remote.Files.file)
  return file_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Files::mutable_file() {
  // @@protoc_insertion_point(field_mutable_list:pb.remote.Files.file)
  return &file_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* SongMetadata_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SongMetadata_Type_descriptor_;
}
bool SongMetadata_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 99:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SongMetadata_Type SongMetadata::UNKNOWN;
const SongMetadata_Type SongMetadata::ASF;
const SongMetadata_Type SongMetadata::FLAC;
const SongMetadata_Type SongMetadata::MP4;
const SongMetadata_Type SongMetadata::MPC;
const SongMetadata_Type SongMetadata::MPEG;
const SongMetadata_Type SongMetadata::OGGFLAC;
const SongMetadata_Type SongMetadata::OGGSPEEX;
const SongMetadata_Type SongMetadata::OGGVORBIS;
const SongMetadata_Type SongMetadata::AIFF;
const SongMetadata_Type SongMetadata::WAV;
const SongMetadata_Type SongMetadata::TRUEAUDIO;
const SongMetadata_Type SongMetadata::CDDA;
const SongMetadata_Type SongMetadata::OGGOPUS;
const SongMetadata_Type SongMetadata::WAVPACK;
const SongMetadata_Type SongMetadata::SPC;
const SongMetadata_Type SongMetadata::VGM;
const SongMetadata_Type SongMetadata::APE;
const SongMetadata_Type SongMetadata::STREAM;
const SongMetadata_Type SongMetadata::Type_MIN;
const SongMetadata_Type SongMetadata::Type_MAX;
const int SongMetadata::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SongMetadata::kIdFieldNumber;
const int SongMetadata::kIndexFieldNumber;
const int SongMetadata::kTitleFieldNumber;
const int SongMetadata::kAlbumFieldNumber;
const int SongMetadata::kArtistFieldNumber;
const int SongMetadata::kAlbumartistFieldNumber;
const int SongMetadata::kTrackFieldNumber;
const int SongMetadata::kDiscFieldNumber;
const int SongMetadata::kPrettyYearFieldNumber;
const int SongMetadata::kGenreFieldNumber;
const int SongMetadata::kPlaycountFieldNumber;
const int SongMetadata::kPrettyLengthFieldNumber;
const int SongMetadata::kArtFieldNumber;
const int SongMetadata::kLengthFieldNumber;
const int SongMetadata::kIsLocalFieldNumber;
const int SongMetadata::kFilenameFieldNumber;
const int SongMetadata::kFileSizeFieldNumber;
const int SongMetadata::kRatingFieldNumber;
const int SongMetadata::kUrlFieldNumber;
const int SongMetadata::kArtAutomaticFieldNumber;
const int SongMetadata::kArtManualFieldNumber;
const int SongMetadata::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SongMetadata::SongMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.SongMetadata)
}

void SongMetadata::InitAsDefaultInstance() {
}

SongMetadata::SongMetadata(const SongMetadata& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.remote.SongMetadata)
}

void SongMetadata::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  index_ = 0;
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  album_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  artist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  albumartist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  track_ = 0;
  disc_ = 0;
  pretty_year_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  genre_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playcount_ = 0;
  pretty_length_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  art_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  length_ = 0;
  is_local_ = false;
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_size_ = 0;
  rating_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  art_automatic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  art_manual_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SongMetadata::~SongMetadata() {
  // @@protoc_insertion_point(destructor:pb.remote.SongMetadata)
  SharedDtor();
}

void SongMetadata::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  album_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  artist_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  albumartist_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pretty_year_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  genre_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pretty_length_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  art_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  art_automatic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  art_manual_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SongMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SongMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SongMetadata_descriptor_;
}

const SongMetadata& SongMetadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remotecontrolmessages_2eproto();
  return *default_instance_;
}

SongMetadata* SongMetadata::default_instance_ = NULL;

SongMetadata* SongMetadata::New(::google::protobuf::Arena* arena) const {
  SongMetadata* n = new SongMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SongMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.SongMetadata)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SongMetadata, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SongMetadata*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(id_, index_);
    ZR_(track_, disc_);
    if (has_title()) {
      title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_album()) {
      album_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_artist()) {
      artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_albumartist()) {
      albumartist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(playcount_, length_);
    if (has_pretty_year()) {
      pretty_year_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_genre()) {
      genre_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_pretty_length()) {
      pretty_length_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_art()) {
      art_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    is_local_ = false;
    if (has_filename()) {
      filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[16 / 32] & 4128768u) {
    ZR_(rating_, type_);
    file_size_ = 0;
    if (has_url()) {
      url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_art_automatic()) {
      art_automatic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_art_manual()) {
      art_manual_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SongMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.SongMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // optional int32 index = 2;
      case 2: {
        if (tag == 16) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_title;
        break;
      }

      // optional string title = 3;
      case 3: {
        if (tag == 26) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.remote.SongMetadata.title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_album;
        break;
      }

      // optional string album = 4;
      case 4: {
        if (tag == 34) {
         parse_album:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_album()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->album().data(), this->album().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.remote.SongMetadata.album");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_artist;
        break;
      }

      // optional string artist = 5;
      case 5: {
        if (tag == 42) {
         parse_artist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_artist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->artist().data(), this->artist().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.remote.SongMetadata.artist");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_albumartist;
        break;
      }

      // optional string albumartist = 6;
      case 6: {
        if (tag == 50) {
         parse_albumartist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_albumartist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->albumartist().data(), this->albumartist().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.remote.SongMetadata.albumartist");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_track;
        break;
      }

      // optional int32 track = 7;
      case 7: {
        if (tag == 56) {
         parse_track:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &track_)));
          set_has_track();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_disc;
        break;
      }

      // optional int32 disc = 8;
      case 8: {
        if (tag == 64) {
         parse_disc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &disc_)));
          set_has_disc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_pretty_year;
        break;
      }

      // optional string pretty_year = 9;
      case 9: {
        if (tag == 74) {
         parse_pretty_year:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pretty_year()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pretty_year().data(), this->pretty_year().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.remote.SongMetadata.pretty_year");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_genre;
        break;
      }

      // optional string genre = 10;
      case 10: {
        if (tag == 82) {
         parse_genre:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_genre()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->genre().data(), this->genre().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.remote.SongMetadata.genre");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_playcount;
        break;
      }

      // optional int32 playcount = 11;
      case 11: {
        if (tag == 88) {
         parse_playcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playcount_)));
          set_has_playcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_pretty_length;
        break;
      }

      // optional string pretty_length = 12;
      case 12: {
        if (tag == 98) {
         parse_pretty_length:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pretty_length()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pretty_length().data(), this->pretty_length().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.remote.SongMetadata.pretty_length");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_art;
        break;
      }

      // optional bytes art = 13;
      case 13: {
        if (tag == 106) {
         parse_art:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_art()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_length;
        break;
      }

      // optional int32 length = 14;
      case 14: {
        if (tag == 112) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_is_local;
        break;
      }

      // optional bool is_local = 15;
      case 15: {
        if (tag == 120) {
         parse_is_local:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_local_)));
          set_has_is_local();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_filename;
        break;
      }

      // optional string filename = 16;
      case 16: {
        if (tag == 130) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.remote.SongMetadata.filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_file_size;
        break;
      }

      // optional int32 file_size = 17;
      case 17: {
        if (tag == 136) {
         parse_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &file_size_)));
          set_has_file_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(149)) goto parse_rating;
        break;
      }

      // optional float rating = 18;
      case 18: {
        if (tag == 149) {
         parse_rating:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rating_)));
          set_has_rating();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_url;
        break;
      }

      // optional string url = 19;
      case 19: {
        if (tag == 154) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.remote.SongMetadata.url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_art_automatic;
        break;
      }

      // optional string art_automatic = 20;
      case 20: {
        if (tag == 162) {
         parse_art_automatic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_art_automatic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->art_automatic().data(), this->art_automatic().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.remote.SongMetadata.art_automatic");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_art_manual;
        break;
      }

      // optional string art_manual = 21;
      case 21: {
        if (tag == 170) {
         parse_art_manual:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_art_manual()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->art_manual().data(), this->art_manual().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.remote.SongMetadata.art_manual");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_type;
        break;
      }

      // optional .pb.remote.SongMetadata.Type type = 22;
      case 22: {
        if (tag == 176) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::remote::SongMetadata_Type_IsValid(value)) {
            set_type(static_cast< ::pb::remote::SongMetadata_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(22, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.SongMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.SongMetadata)
  return false;
#undef DO_
}

void SongMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.SongMetadata)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.SongMetadata.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->title(), output);
  }

  // optional string album = 4;
  if (has_album()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->album().data(), this->album().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.SongMetadata.album");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->album(), output);
  }

  // optional string artist = 5;
  if (has_artist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->artist().data(), this->artist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.SongMetadata.artist");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->artist(), output);
  }

  // optional string albumartist = 6;
  if (has_albumartist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->albumartist().data(), this->albumartist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.SongMetadata.albumartist");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->albumartist(), output);
  }

  // optional int32 track = 7;
  if (has_track()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->track(), output);
  }

  // optional int32 disc = 8;
  if (has_disc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->disc(), output);
  }

  // optional string pretty_year = 9;
  if (has_pretty_year()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pretty_year().data(), this->pretty_year().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.SongMetadata.pretty_year");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->pretty_year(), output);
  }

  // optional string genre = 10;
  if (has_genre()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->genre().data(), this->genre().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.SongMetadata.genre");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->genre(), output);
  }

  // optional int32 playcount = 11;
  if (has_playcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->playcount(), output);
  }

  // optional string pretty_length = 12;
  if (has_pretty_length()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pretty_length().data(), this->pretty_length().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.SongMetadata.pretty_length");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->pretty_length(), output);
  }

  // optional bytes art = 13;
  if (has_art()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->art(), output);
  }

  // optional int32 length = 14;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->length(), output);
  }

  // optional bool is_local = 15;
  if (has_is_local()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->is_local(), output);
  }

  // optional string filename = 16;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.SongMetadata.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->filename(), output);
  }

  // optional int32 file_size = 17;
  if (has_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->file_size(), output);
  }

  // optional float rating = 18;
  if (has_rating()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->rating(), output);
  }

  // optional string url = 19;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.SongMetadata.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->url(), output);
  }

  // optional string art_automatic = 20;
  if (has_art_automatic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->art_automatic().data(), this->art_automatic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.SongMetadata.art_automatic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->art_automatic(), output);
  }

  // optional string art_manual = 21;
  if (has_art_manual()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->art_manual().data(), this->art_manual().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.SongMetadata.art_manual");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->art_manual(), output);
  }

  // optional .pb.remote.SongMetadata.Type type = 22;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.SongMetadata)
}

::google::protobuf::uint8* SongMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.SongMetadata)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.SongMetadata.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }

  // optional string album = 4;
  if (has_album()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->album().data(), this->album().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.SongMetadata.album");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->album(), target);
  }

  // optional string artist = 5;
  if (has_artist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->artist().data(), this->artist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.SongMetadata.artist");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->artist(), target);
  }

  // optional string albumartist = 6;
  if (has_albumartist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->albumartist().data(), this->albumartist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.SongMetadata.albumartist");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->albumartist(), target);
  }

  // optional int32 track = 7;
  if (has_track()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->track(), target);
  }

  // optional int32 disc = 8;
  if (has_disc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->disc(), target);
  }

  // optional string pretty_year = 9;
  if (has_pretty_year()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pretty_year().data(), this->pretty_year().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.SongMetadata.pretty_year");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->pretty_year(), target);
  }

  // optional string genre = 10;
  if (has_genre()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->genre().data(), this->genre().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.SongMetadata.genre");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->genre(), target);
  }

  // optional int32 playcount = 11;
  if (has_playcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->playcount(), target);
  }

  // optional string pretty_length = 12;
  if (has_pretty_length()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pretty_length().data(), this->pretty_length().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.SongMetadata.pretty_length");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->pretty_length(), target);
  }

  // optional bytes art = 13;
  if (has_art()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->art(), target);
  }

  // optional int32 length = 14;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->length(), target);
  }

  // optional bool is_local = 15;
  if (has_is_local()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->is_local(), target);
  }

  // optional string filename = 16;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.SongMetadata.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->filename(), target);
  }

  // optional int32 file_size = 17;
  if (has_file_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->file_size(), target);
  }

  // optional float rating = 18;
  if (has_rating()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->rating(), target);
  }

  // optional string url = 19;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.SongMetadata.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->url(), target);
  }

  // optional string art_automatic = 20;
  if (has_art_automatic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->art_automatic().data(), this->art_automatic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.SongMetadata.art_automatic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->art_automatic(), target);
  }

  // optional string art_manual = 21;
  if (has_art_manual()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->art_manual().data(), this->art_manual().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.SongMetadata.art_manual");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->art_manual(), target);
  }

  // optional .pb.remote.SongMetadata.Type type = 22;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.SongMetadata)
  return target;
}

int SongMetadata::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.SongMetadata)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional string title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string album = 4;
    if (has_album()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->album());
    }

    // optional string artist = 5;
    if (has_artist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->artist());
    }

    // optional string albumartist = 6;
    if (has_albumartist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->albumartist());
    }

    // optional int32 track = 7;
    if (has_track()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->track());
    }

    // optional int32 disc = 8;
    if (has_disc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->disc());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional string pretty_year = 9;
    if (has_pretty_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pretty_year());
    }

    // optional string genre = 10;
    if (has_genre()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->genre());
    }

    // optional int32 playcount = 11;
    if (has_playcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playcount());
    }

    // optional string pretty_length = 12;
    if (has_pretty_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pretty_length());
    }

    // optional bytes art = 13;
    if (has_art()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->art());
    }

    // optional int32 length = 14;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->length());
    }

    // optional bool is_local = 15;
    if (has_is_local()) {
      total_size += 1 + 1;
    }

    // optional string filename = 16;
    if (has_filename()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

  }
  if (_has_bits_[16 / 32] & 4128768u) {
    // optional int32 file_size = 17;
    if (has_file_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->file_size());
    }

    // optional float rating = 18;
    if (has_rating()) {
      total_size += 2 + 4;
    }

    // optional string url = 19;
    if (has_url()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string art_automatic = 20;
    if (has_art_automatic()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->art_automatic());
    }

    // optional string art_manual = 21;
    if (has_art_manual()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->art_manual());
    }

    // optional .pb.remote.SongMetadata.Type type = 22;
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SongMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.SongMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SongMetadata* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SongMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.SongMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.SongMetadata)
    MergeFrom(*source);
  }
}

void SongMetadata::MergeFrom(const SongMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.SongMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_title()) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (from.has_album()) {
      set_has_album();
      album_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.album_);
    }
    if (from.has_artist()) {
      set_has_artist();
      artist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.artist_);
    }
    if (from.has_albumartist()) {
      set_has_albumartist();
      albumartist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.albumartist_);
    }
    if (from.has_track()) {
      set_track(from.track());
    }
    if (from.has_disc()) {
      set_disc(from.disc());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pretty_year()) {
      set_has_pretty_year();
      pretty_year_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pretty_year_);
    }
    if (from.has_genre()) {
      set_has_genre();
      genre_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.genre_);
    }
    if (from.has_playcount()) {
      set_playcount(from.playcount());
    }
    if (from.has_pretty_length()) {
      set_has_pretty_length();
      pretty_length_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pretty_length_);
    }
    if (from.has_art()) {
      set_has_art();
      art_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.art_);
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_is_local()) {
      set_is_local(from.is_local());
    }
    if (from.has_filename()) {
      set_has_filename();
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_file_size()) {
      set_file_size(from.file_size());
    }
    if (from.has_rating()) {
      set_rating(from.rating());
    }
    if (from.has_url()) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (from.has_art_automatic()) {
      set_has_art_automatic();
      art_automatic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.art_automatic_);
    }
    if (from.has_art_manual()) {
      set_has_art_manual();
      art_manual_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.art_manual_);
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SongMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.SongMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SongMetadata::CopyFrom(const SongMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.SongMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SongMetadata::IsInitialized() const {

  return true;
}

void SongMetadata::Swap(SongMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SongMetadata::InternalSwap(SongMetadata* other) {
  std::swap(id_, other->id_);
  std::swap(index_, other->index_);
  title_.Swap(&other->title_);
  album_.Swap(&other->album_);
  artist_.Swap(&other->artist_);
  albumartist_.Swap(&other->albumartist_);
  std::swap(track_, other->track_);
  std::swap(disc_, other->disc_);
  pretty_year_.Swap(&other->pretty_year_);
  genre_.Swap(&other->genre_);
  std::swap(playcount_, other->playcount_);
  pretty_length_.Swap(&other->pretty_length_);
  art_.Swap(&other->art_);
  std::swap(length_, other->length_);
  std::swap(is_local_, other->is_local_);
  filename_.Swap(&other->filename_);
  std::swap(file_size_, other->file_size_);
  std::swap(rating_, other->rating_);
  url_.Swap(&other->url_);
  art_automatic_.Swap(&other->art_automatic_);
  art_manual_.Swap(&other->art_manual_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SongMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SongMetadata_descriptor_;
  metadata.reflection = SongMetadata_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SongMetadata

// optional int32 id = 1;
bool SongMetadata::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SongMetadata::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SongMetadata::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SongMetadata::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 SongMetadata::id() const {
  // @@protoc_insertion_point(field_get:pb.remote.SongMetadata.id)
  return id_;
}
 void SongMetadata::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.SongMetadata.id)
}

// optional int32 index = 2;
bool SongMetadata::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SongMetadata::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
void SongMetadata::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void SongMetadata::clear_index() {
  index_ = 0;
  clear_has_index();
}
 ::google::protobuf::int32 SongMetadata::index() const {
  // @@protoc_insertion_point(field_get:pb.remote.SongMetadata.index)
  return index_;
}
 void SongMetadata::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.SongMetadata.index)
}

// optional string title = 3;
bool SongMetadata::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SongMetadata::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
void SongMetadata::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
void SongMetadata::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
 const ::std::string& SongMetadata::title() const {
  // @@protoc_insertion_point(field_get:pb.remote.SongMetadata.title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SongMetadata::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.remote.SongMetadata.title)
}
 void SongMetadata::set_title(const char* value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.remote.SongMetadata.title)
}
 void SongMetadata::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.remote.SongMetadata.title)
}
 ::std::string* SongMetadata::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:pb.remote.SongMetadata.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SongMetadata::release_title() {
  // @@protoc_insertion_point(field_release:pb.remote.SongMetadata.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SongMetadata::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:pb.remote.SongMetadata.title)
}

// optional string album = 4;
bool SongMetadata::has_album() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SongMetadata::set_has_album() {
  _has_bits_[0] |= 0x00000008u;
}
void SongMetadata::clear_has_album() {
  _has_bits_[0] &= ~0x00000008u;
}
void SongMetadata::clear_album() {
  album_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_album();
}
 const ::std::string& SongMetadata::album() const {
  // @@protoc_insertion_point(field_get:pb.remote.SongMetadata.album)
  return album_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SongMetadata::set_album(const ::std::string& value) {
  set_has_album();
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.remote.SongMetadata.album)
}
 void SongMetadata::set_album(const char* value) {
  set_has_album();
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.remote.SongMetadata.album)
}
 void SongMetadata::set_album(const char* value, size_t size) {
  set_has_album();
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.remote.SongMetadata.album)
}
 ::std::string* SongMetadata::mutable_album() {
  set_has_album();
  // @@protoc_insertion_point(field_mutable:pb.remote.SongMetadata.album)
  return album_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SongMetadata::release_album() {
  // @@protoc_insertion_point(field_release:pb.remote.SongMetadata.album)
  clear_has_album();
  return album_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SongMetadata::set_allocated_album(::std::string* album) {
  if (album != NULL) {
    set_has_album();
  } else {
    clear_has_album();
  }
  album_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), album);
  // @@protoc_insertion_point(field_set_allocated:pb.remote.SongMetadata.album)
}

// optional string artist = 5;
bool SongMetadata::has_artist() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SongMetadata::set_has_artist() {
  _has_bits_[0] |= 0x00000010u;
}
void SongMetadata::clear_has_artist() {
  _has_bits_[0] &= ~0x00000010u;
}
void SongMetadata::clear_artist() {
  artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_artist();
}
 const ::std::string& SongMetadata::artist() const {
  // @@protoc_insertion_point(field_get:pb.remote.SongMetadata.artist)
  return artist_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SongMetadata::set_artist(const ::std::string& value) {
  set_has_artist();
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.remote.SongMetadata.artist)
}
 void SongMetadata::set_artist(const char* value) {
  set_has_artist();
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.remote.SongMetadata.artist)
}
 void SongMetadata::set_artist(const char* value, size_t size) {
  set_has_artist();
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.remote.SongMetadata.artist)
}
 ::std::string* SongMetadata::mutable_artist() {
  set_has_artist();
  // @@protoc_insertion_point(field_mutable:pb.remote.SongMetadata.artist)
  return artist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SongMetadata::release_artist() {
  // @@protoc_insertion_point(field_release:pb.remote.SongMetadata.artist)
  clear_has_artist();
  return artist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SongMetadata::set_allocated_artist(::std::string* artist) {
  if (artist != NULL) {
    set_has_artist();
  } else {
    clear_has_artist();
  }
  artist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), artist);
  // @@protoc_insertion_point(field_set_allocated:pb.remote.SongMetadata.artist)
}

// optional string albumartist = 6;
bool SongMetadata::has_albumartist() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SongMetadata::set_has_albumartist() {
  _has_bits_[0] |= 0x00000020u;
}
void SongMetadata::clear_has_albumartist() {
  _has_bits_[0] &= ~0x00000020u;
}
void SongMetadata::clear_albumartist() {
  albumartist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_albumartist();
}
 const ::std::string& SongMetadata::albumartist() const {
  // @@protoc_insertion_point(field_get:pb.remote.SongMetadata.albumartist)
  return albumartist_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SongMetadata::set_albumartist(const ::std::string& value) {
  set_has_albumartist();
  albumartist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.remote.SongMetadata.albumartist)
}
 void SongMetadata::set_albumartist(const char* value) {
  set_has_albumartist();
  albumartist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.remote.SongMetadata.albumartist)
}
 void SongMetadata::set_albumartist(const char* value, size_t size) {
  set_has_albumartist();
  albumartist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.remote.SongMetadata.albumartist)
}
 ::std::string* SongMetadata::mutable_albumartist() {
  set_has_albumartist();
  // @@protoc_insertion_point(field_mutable:pb.remote.SongMetadata.albumartist)
  return albumartist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SongMetadata::release_albumartist() {
  // @@protoc_insertion_point(field_release:pb.remote.SongMetadata.albumartist)
  clear_has_albumartist();
  return albumartist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SongMetadata::set_allocated_albumartist(::std::string* albumartist) {
  if (albumartist != NULL) {
    set_has_albumartist();
  } else {
    clear_has_albumartist();
  }
  albumartist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), albumartist);
  // @@protoc_insertion_point(field_set_allocated:pb.remote.SongMetadata.albumartist)
}

// optional int32 track = 7;
bool SongMetadata::has_track() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SongMetadata::set_has_track() {
  _has_bits_[0] |= 0x00000040u;
}
void SongMetadata::clear_has_track() {
  _has_bits_[0] &= ~0x00000040u;
}
void SongMetadata::clear_track() {
  track_ = 0;
  clear_has_track();
}
 ::google::protobuf::int32 SongMetadata::track() const {
  // @@protoc_insertion_point(field_get:pb.remote.SongMetadata.track)
  return track_;
}
 void SongMetadata::set_track(::google::protobuf::int32 value) {
  set_has_track();
  track_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.SongMetadata.track)
}

// optional int32 disc = 8;
bool SongMetadata::has_disc() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SongMetadata::set_has_disc() {
  _has_bits_[0] |= 0x00000080u;
}
void SongMetadata::clear_has_disc() {
  _has_bits_[0] &= ~0x00000080u;
}
void SongMetadata::clear_disc() {
  disc_ = 0;
  clear_has_disc();
}
 ::google::protobuf::int32 SongMetadata::disc() const {
  // @@protoc_insertion_point(field_get:pb.remote.SongMetadata.disc)
  return disc_;
}
 void SongMetadata::set_disc(::google::protobuf::int32 value) {
  set_has_disc();
  disc_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.SongMetadata.disc)
}

// optional string pretty_year = 9;
bool SongMetadata::has_pretty_year() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SongMetadata::set_has_pretty_year() {
  _has_bits_[0] |= 0x00000100u;
}
void SongMetadata::clear_has_pretty_year() {
  _has_bits_[0] &= ~0x00000100u;
}
void SongMetadata::clear_pretty_year() {
  pretty_year_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pretty_year();
}
 const ::std::string& SongMetadata::pretty_year() const {
  // @@protoc_insertion_point(field_get:pb.remote.SongMetadata.pretty_year)
  return pretty_year_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SongMetadata::set_pretty_year(const ::std::string& value) {
  set_has_pretty_year();
  pretty_year_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.remote.SongMetadata.pretty_year)
}
 void SongMetadata::set_pretty_year(const char* value) {
  set_has_pretty_year();
  pretty_year_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.remote.SongMetadata.pretty_year)
}
 void SongMetadata::set_pretty_year(const char* value, size_t size) {
  set_has_pretty_year();
  pretty_year_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.remote.SongMetadata.pretty_year)
}
 ::std::string* SongMetadata::mutable_pretty_year() {
  set_has_pretty_year();
  // @@protoc_insertion_point(field_mutable:pb.remote.SongMetadata.pretty_year)
  return pretty_year_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SongMetadata::release_pretty_year() {
  // @@protoc_insertion_point(field_release:pb.remote.SongMetadata.pretty_year)
  clear_has_pretty_year();
  return pretty_year_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SongMetadata::set_allocated_pretty_year(::std::string* pretty_year) {
  if (pretty_year != NULL) {
    set_has_pretty_year();
  } else {
    clear_has_pretty_year();
  }
  pretty_year_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pretty_year);
  // @@protoc_insertion_point(field_set_allocated:pb.remote.SongMetadata.pretty_year)
}

// optional string genre = 10;
bool SongMetadata::has_genre() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SongMetadata::set_has_genre() {
  _has_bits_[0] |= 0x00000200u;
}
void SongMetadata::clear_has_genre() {
  _has_bits_[0] &= ~0x00000200u;
}
void SongMetadata::clear_genre() {
  genre_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_genre();
}
 const ::std::string& SongMetadata::genre() const {
  // @@protoc_insertion_point(field_get:pb.remote.SongMetadata.genre)
  return genre_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SongMetadata::set_genre(const ::std::string& value) {
  set_has_genre();
  genre_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.remote.SongMetadata.genre)
}
 void SongMetadata::set_genre(const char* value) {
  set_has_genre();
  genre_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.remote.SongMetadata.genre)
}
 void SongMetadata::set_genre(const char* value, size_t size) {
  set_has_genre();
  genre_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.remote.SongMetadata.genre)
}
 ::std::string* SongMetadata::mutable_genre() {
  set_has_genre();
  // @@protoc_insertion_point(field_mutable:pb.remote.SongMetadata.genre)
  return genre_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SongMetadata::release_genre() {
  // @@protoc_insertion_point(field_release:pb.remote.SongMetadata.genre)
  clear_has_genre();
  return genre_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SongMetadata::set_allocated_genre(::std::string* genre) {
  if (genre != NULL) {
    set_has_genre();
  } else {
    clear_has_genre();
  }
  genre_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), genre);
  // @@protoc_insertion_point(field_set_allocated:pb.remote.SongMetadata.genre)
}

// optional int32 playcount = 11;
bool SongMetadata::has_playcount() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SongMetadata::set_has_playcount() {
  _has_bits_[0] |= 0x00000400u;
}
void SongMetadata::clear_has_playcount() {
  _has_bits_[0] &= ~0x00000400u;
}
void SongMetadata::clear_playcount() {
  playcount_ = 0;
  clear_has_playcount();
}
 ::google::protobuf::int32 SongMetadata::playcount() const {
  // @@protoc_insertion_point(field_get:pb.remote.SongMetadata.playcount)
  return playcount_;
}
 void SongMetadata::set_playcount(::google::protobuf::int32 value) {
  set_has_playcount();
  playcount_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.SongMetadata.playcount)
}

// optional string pretty_length = 12;
bool SongMetadata::has_pretty_length() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SongMetadata::set_has_pretty_length() {
  _has_bits_[0] |= 0x00000800u;
}
void SongMetadata::clear_has_pretty_length() {
  _has_bits_[0] &= ~0x00000800u;
}
void SongMetadata::clear_pretty_length() {
  pretty_length_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pretty_length();
}
 const ::std::string& SongMetadata::pretty_length() const {
  // @@protoc_insertion_point(field_get:pb.remote.SongMetadata.pretty_length)
  return pretty_length_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SongMetadata::set_pretty_length(const ::std::string& value) {
  set_has_pretty_length();
  pretty_length_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.remote.SongMetadata.pretty_length)
}
 void SongMetadata::set_pretty_length(const char* value) {
  set_has_pretty_length();
  pretty_length_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.remote.SongMetadata.pretty_length)
}
 void SongMetadata::set_pretty_length(const char* value, size_t size) {
  set_has_pretty_length();
  pretty_length_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.remote.SongMetadata.pretty_length)
}
 ::std::string* SongMetadata::mutable_pretty_length() {
  set_has_pretty_length();
  // @@protoc_insertion_point(field_mutable:pb.remote.SongMetadata.pretty_length)
  return pretty_length_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SongMetadata::release_pretty_length() {
  // @@protoc_insertion_point(field_release:pb.remote.SongMetadata.pretty_length)
  clear_has_pretty_length();
  return pretty_length_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SongMetadata::set_allocated_pretty_length(::std::string* pretty_length) {
  if (pretty_length != NULL) {
    set_has_pretty_length();
  } else {
    clear_has_pretty_length();
  }
  pretty_length_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pretty_length);
  // @@protoc_insertion_point(field_set_allocated:pb.remote.SongMetadata.pretty_length)
}

// optional bytes art = 13;
bool SongMetadata::has_art() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void SongMetadata::set_has_art() {
  _has_bits_[0] |= 0x00001000u;
}
void SongMetadata::clear_has_art() {
  _has_bits_[0] &= ~0x00001000u;
}
void SongMetadata::clear_art() {
  art_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_art();
}
 const ::std::string& SongMetadata::art() const {
  // @@protoc_insertion_point(field_get:pb.remote.SongMetadata.art)
  return art_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SongMetadata::set_art(const ::std::string& value) {
  set_has_art();
  art_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.remote.SongMetadata.art)
}
 void SongMetadata::set_art(const char* value) {
  set_has_art();
  art_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.remote.SongMetadata.art)
}
 void SongMetadata::set_art(const void* value, size_t size) {
  set_has_art();
  art_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.remote.SongMetadata.art)
}
 ::std::string* SongMetadata::mutable_art() {
  set_has_art();
  // @@protoc_insertion_point(field_mutable:pb.remote.SongMetadata.art)
  return art_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SongMetadata::release_art() {
  // @@protoc_insertion_point(field_release:pb.remote.SongMetadata.art)
  clear_has_art();
  return art_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SongMetadata::set_allocated_art(::std::string* art) {
  if (art != NULL) {
    set_has_art();
  } else {
    clear_has_art();
  }
  art_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), art);
  // @@protoc_insertion_point(field_set_allocated:pb.remote.SongMetadata.art)
}

// optional int32 length = 14;
bool SongMetadata::has_length() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void SongMetadata::set_has_length() {
  _has_bits_[0] |= 0x00002000u;
}
void SongMetadata::clear_has_length() {
  _has_bits_[0] &= ~0x00002000u;
}
void SongMetadata::clear_length() {
  length_ = 0;
  clear_has_length();
}
 ::google::protobuf::int32 SongMetadata::length() const {
  // @@protoc_insertion_point(field_get:pb.remote.SongMetadata.length)
  return length_;
}
 void SongMetadata::set_length(::google::protobuf::int32 value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.SongMetadata.length)
}

// optional bool is_local = 15;
bool SongMetadata::has_is_local() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void SongMetadata::set_has_is_local() {
  _has_bits_[0] |= 0x00004000u;
}
void SongMetadata::clear_has_is_local() {
  _has_bits_[0] &= ~0x00004000u;
}
void SongMetadata::clear_is_local() {
  is_local_ = false;
  clear_has_is_local();
}
 bool SongMetadata::is_local() const {
  // @@protoc_insertion_point(field_get:pb.remote.SongMetadata.is_local)
  return is_local_;
}
 void SongMetadata::set_is_local(bool value) {
  set_has_is_local();
  is_local_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.SongMetadata.is_local)
}

// optional string filename = 16;
bool SongMetadata::has_filename() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void SongMetadata::set_has_filename() {
  _has_bits_[0] |= 0x00008000u;
}
void SongMetadata::clear_has_filename() {
  _has_bits_[0] &= ~0x00008000u;
}
void SongMetadata::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
 const ::std::string& SongMetadata::filename() const {
  // @@protoc_insertion_point(field_get:pb.remote.SongMetadata.filename)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SongMetadata::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.remote.SongMetadata.filename)
}
 void SongMetadata::set_filename(const char* value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.remote.SongMetadata.filename)
}
 void SongMetadata::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.remote.SongMetadata.filename)
}
 ::std::string* SongMetadata::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:pb.remote.SongMetadata.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SongMetadata::release_filename() {
  // @@protoc_insertion_point(field_release:pb.remote.SongMetadata.filename)
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SongMetadata::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:pb.remote.SongMetadata.filename)
}

// optional int32 file_size = 17;
bool SongMetadata::has_file_size() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void SongMetadata::set_has_file_size() {
  _has_bits_[0] |= 0x00010000u;
}
void SongMetadata::clear_has_file_size() {
  _has_bits_[0] &= ~0x00010000u;
}
void SongMetadata::clear_file_size() {
  file_size_ = 0;
  clear_has_file_size();
}
 ::google::protobuf::int32 SongMetadata::file_size() const {
  // @@protoc_insertion_point(field_get:pb.remote.SongMetadata.file_size)
  return file_size_;
}
 void SongMetadata::set_file_size(::google::protobuf::int32 value) {
  set_has_file_size();
  file_size_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.SongMetadata.file_size)
}

// optional float rating = 18;
bool SongMetadata::has_rating() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void SongMetadata::set_has_rating() {
  _has_bits_[0] |= 0x00020000u;
}
void SongMetadata::clear_has_rating() {
  _has_bits_[0] &= ~0x00020000u;
}
void SongMetadata::clear_rating() {
  rating_ = 0;
  clear_has_rating();
}
 float SongMetadata::rating() const {
  // @@protoc_insertion_point(field_get:pb.remote.SongMetadata.rating)
  return rating_;
}
 void SongMetadata::set_rating(float value) {
  set_has_rating();
  rating_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.SongMetadata.rating)
}

// optional string url = 19;
bool SongMetadata::has_url() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void SongMetadata::set_has_url() {
  _has_bits_[0] |= 0x00040000u;
}
void SongMetadata::clear_has_url() {
  _has_bits_[0] &= ~0x00040000u;
}
void SongMetadata::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
 const ::std::string& SongMetadata::url() const {
  // @@protoc_insertion_point(field_get:pb.remote.SongMetadata.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SongMetadata::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.remote.SongMetadata.url)
}
 void SongMetadata::set_url(const char* value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.remote.SongMetadata.url)
}
 void SongMetadata::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.remote.SongMetadata.url)
}
 ::std::string* SongMetadata::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:pb.remote.SongMetadata.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SongMetadata::release_url() {
  // @@protoc_insertion_point(field_release:pb.remote.SongMetadata.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SongMetadata::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:pb.remote.SongMetadata.url)
}

// optional string art_automatic = 20;
bool SongMetadata::has_art_automatic() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void SongMetadata::set_has_art_automatic() {
  _has_bits_[0] |= 0x00080000u;
}
void SongMetadata::clear_has_art_automatic() {
  _has_bits_[0] &= ~0x00080000u;
}
void SongMetadata::clear_art_automatic() {
  art_automatic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_art_automatic();
}
 const ::std::string& SongMetadata::art_automatic() const {
  // @@protoc_insertion_point(field_get:pb.remote.SongMetadata.art_automatic)
  return art_automatic_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SongMetadata::set_art_automatic(const ::std::string& value) {
  set_has_art_automatic();
  art_automatic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.remote.SongMetadata.art_automatic)
}
 void SongMetadata::set_art_automatic(const char* value) {
  set_has_art_automatic();
  art_automatic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.remote.SongMetadata.art_automatic)
}
 void SongMetadata::set_art_automatic(const char* value, size_t size) {
  set_has_art_automatic();
  art_automatic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.remote.SongMetadata.art_automatic)
}
 ::std::string* SongMetadata::mutable_art_automatic() {
  set_has_art_automatic();
  // @@protoc_insertion_point(field_mutable:pb.remote.SongMetadata.art_automatic)
  return art_automatic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SongMetadata::release_art_automatic() {
  // @@protoc_insertion_point(field_release:pb.remote.SongMetadata.art_automatic)
  clear_has_art_automatic();
  return art_automatic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SongMetadata::set_allocated_art_automatic(::std::string* art_automatic) {
  if (art_automatic != NULL) {
    set_has_art_automatic();
  } else {
    clear_has_art_automatic();
  }
  art_automatic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), art_automatic);
  // @@protoc_insertion_point(field_set_allocated:pb.remote.SongMetadata.art_automatic)
}

// optional string art_manual = 21;
bool SongMetadata::has_art_manual() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void SongMetadata::set_has_art_manual() {
  _has_bits_[0] |= 0x00100000u;
}
void SongMetadata::clear_has_art_manual() {
  _has_bits_[0] &= ~0x00100000u;
}
void SongMetadata::clear_art_manual() {
  art_manual_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_art_manual();
}
 const ::std::string& SongMetadata::art_manual() const {
  // @@protoc_insertion_point(field_get:pb.remote.SongMetadata.art_manual)
  return art_manual_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SongMetadata::set_art_manual(const ::std::string& value) {
  set_has_art_manual();
  art_manual_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.remote.SongMetadata.art_manual)
}
 void SongMetadata::set_art_manual(const char* value) {
  set_has_art_manual();
  art_manual_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.remote.SongMetadata.art_manual)
}
 void SongMetadata::set_art_manual(const char* value, size_t size) {
  set_has_art_manual();
  art_manual_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.remote.SongMetadata.art_manual)
}
 ::std::string* SongMetadata::mutable_art_manual() {
  set_has_art_manual();
  // @@protoc_insertion_point(field_mutable:pb.remote.SongMetadata.art_manual)
  return art_manual_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SongMetadata::release_art_manual() {
  // @@protoc_insertion_point(field_release:pb.remote.SongMetadata.art_manual)
  clear_has_art_manual();
  return art_manual_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SongMetadata::set_allocated_art_manual(::std::string* art_manual) {
  if (art_manual != NULL) {
    set_has_art_manual();
  } else {
    clear_has_art_manual();
  }
  art_manual_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), art_manual);
  // @@protoc_insertion_point(field_set_allocated:pb.remote.SongMetadata.art_manual)
}

// optional .pb.remote.SongMetadata.Type type = 22;
bool SongMetadata::has_type() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void SongMetadata::set_has_type() {
  _has_bits_[0] |= 0x00200000u;
}
void SongMetadata::clear_has_type() {
  _has_bits_[0] &= ~0x00200000u;
}
void SongMetadata::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::pb::remote::SongMetadata_Type SongMetadata::type() const {
  // @@protoc_insertion_point(field_get:pb.remote.SongMetadata.type)
  return static_cast< ::pb::remote::SongMetadata_Type >(type_);
}
 void SongMetadata::set_type(::pb::remote::SongMetadata_Type value) {
  assert(::pb::remote::SongMetadata_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.SongMetadata.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Playlist::kIdFieldNumber;
const int Playlist::kNameFieldNumber;
const int Playlist::kItemCountFieldNumber;
const int Playlist::kActiveFieldNumber;
const int Playlist::kClosedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Playlist::Playlist()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.Playlist)
}

void Playlist::InitAsDefaultInstance() {
}

Playlist::Playlist(const Playlist& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.remote.Playlist)
}

void Playlist::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_count_ = 0;
  active_ = false;
  closed_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Playlist::~Playlist() {
  // @@protoc_insertion_point(destructor:pb.remote.Playlist)
  SharedDtor();
}

void Playlist::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Playlist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Playlist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Playlist_descriptor_;
}

const Playlist& Playlist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remotecontrolmessages_2eproto();
  return *default_instance_;
}

Playlist* Playlist::default_instance_ = NULL;

Playlist* Playlist::New(::google::protobuf::Arena* arena) const {
  Playlist* n = new Playlist;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Playlist::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.Playlist)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Playlist, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Playlist*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(id_, closed_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Playlist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.Playlist)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.remote.Playlist.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_item_count;
        break;
      }

      // optional int32 item_count = 3;
      case 3: {
        if (tag == 24) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_active;
        break;
      }

      // optional bool active = 4;
      case 4: {
        if (tag == 32) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_closed;
        break;
      }

      // optional bool closed = 5;
      case 5: {
        if (tag == 40) {
         parse_closed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &closed_)));
          set_has_closed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.Playlist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.Playlist)
  return false;
#undef DO_
}

void Playlist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.Playlist)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.Playlist.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional int32 item_count = 3;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->item_count(), output);
  }

  // optional bool active = 4;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->active(), output);
  }

  // optional bool closed = 5;
  if (has_closed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->closed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.Playlist)
}

::google::protobuf::uint8* Playlist::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.Playlist)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.Playlist.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 item_count = 3;
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->item_count(), target);
  }

  // optional bool active = 4;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->active(), target);
  }

  // optional bool closed = 5;
  if (has_closed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->closed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.Playlist)
  return target;
}

int Playlist::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.Playlist)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 item_count = 3;
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_count());
    }

    // optional bool active = 4;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional bool closed = 5;
    if (has_closed()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Playlist::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.Playlist)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Playlist* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Playlist>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.Playlist)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.Playlist)
    MergeFrom(*source);
  }
}

void Playlist::MergeFrom(const Playlist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.Playlist)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_closed()) {
      set_closed(from.closed());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Playlist::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.Playlist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Playlist::CopyFrom(const Playlist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.Playlist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Playlist::IsInitialized() const {

  return true;
}

void Playlist::Swap(Playlist* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Playlist::InternalSwap(Playlist* other) {
  std::swap(id_, other->id_);
  name_.Swap(&other->name_);
  std::swap(item_count_, other->item_count_);
  std::swap(active_, other->active_);
  std::swap(closed_, other->closed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Playlist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Playlist_descriptor_;
  metadata.reflection = Playlist_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Playlist

// optional int32 id = 1;
bool Playlist::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Playlist::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Playlist::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Playlist::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 Playlist::id() const {
  // @@protoc_insertion_point(field_get:pb.remote.Playlist.id)
  return id_;
}
 void Playlist::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.Playlist.id)
}

// optional string name = 2;
bool Playlist::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Playlist::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void Playlist::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void Playlist::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& Playlist::name() const {
  // @@protoc_insertion_point(field_get:pb.remote.Playlist.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Playlist::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.remote.Playlist.name)
}
 void Playlist::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.remote.Playlist.name)
}
 void Playlist::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.remote.Playlist.name)
}
 ::std::string* Playlist::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pb.remote.Playlist.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Playlist::release_name() {
  // @@protoc_insertion_point(field_release:pb.remote.Playlist.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Playlist::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Playlist.name)
}

// optional int32 item_count = 3;
bool Playlist::has_item_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Playlist::set_has_item_count() {
  _has_bits_[0] |= 0x00000004u;
}
void Playlist::clear_has_item_count() {
  _has_bits_[0] &= ~0x00000004u;
}
void Playlist::clear_item_count() {
  item_count_ = 0;
  clear_has_item_count();
}
 ::google::protobuf::int32 Playlist::item_count() const {
  // @@protoc_insertion_point(field_get:pb.remote.Playlist.item_count)
  return item_count_;
}
 void Playlist::set_item_count(::google::protobuf::int32 value) {
  set_has_item_count();
  item_count_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.Playlist.item_count)
}

// optional bool active = 4;
bool Playlist::has_active() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Playlist::set_has_active() {
  _has_bits_[0] |= 0x00000008u;
}
void Playlist::clear_has_active() {
  _has_bits_[0] &= ~0x00000008u;
}
void Playlist::clear_active() {
  active_ = false;
  clear_has_active();
}
 bool Playlist::active() const {
  // @@protoc_insertion_point(field_get:pb.remote.Playlist.active)
  return active_;
}
 void Playlist::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.Playlist.active)
}

// optional bool closed = 5;
bool Playlist::has_closed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Playlist::set_has_closed() {
  _has_bits_[0] |= 0x00000010u;
}
void Playlist::clear_has_closed() {
  _has_bits_[0] &= ~0x00000010u;
}
void Playlist::clear_closed() {
  closed_ = false;
  clear_has_closed();
}
 bool Playlist::closed() const {
  // @@protoc_insertion_point(field_get:pb.remote.Playlist.closed)
  return closed_;
}
 void Playlist::set_closed(bool value) {
  set_has_closed();
  closed_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.Playlist.closed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestPlaylists::kIncludeClosedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestPlaylists::RequestPlaylists()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.RequestPlaylists)
}

void RequestPlaylists::InitAsDefaultInstance() {
}

RequestPlaylists::RequestPlaylists(const RequestPlaylists& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.remote.RequestPlaylists)
}

void RequestPlaylists::SharedCtor() {
  _cached_size_ = 0;
  include_closed_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestPlaylists::~RequestPlaylists() {
  // @@protoc_insertion_point(destructor:pb.remote.RequestPlaylists)
  SharedDtor();
}

void RequestPlaylists::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestPlaylists::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestPlaylists::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestPlaylists_descriptor_;
}

const RequestPlaylists& RequestPlaylists::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remotecontrolmessages_2eproto();
  return *default_instance_;
}

RequestPlaylists* RequestPlaylists::default_instance_ = NULL;

RequestPlaylists* RequestPlaylists::New(::google::protobuf::Arena* arena) const {
  RequestPlaylists* n = new RequestPlaylists;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestPlaylists::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.RequestPlaylists)
  include_closed_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RequestPlaylists::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.RequestPlaylists)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool include_closed = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_closed_)));
          set_has_include_closed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.RequestPlaylists)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.RequestPlaylists)
  return false;
#undef DO_
}

void RequestPlaylists::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.RequestPlaylists)
  // optional bool include_closed = 1;
  if (has_include_closed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->include_closed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.RequestPlaylists)
}

::google::protobuf::uint8* RequestPlaylists::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.RequestPlaylists)
  // optional bool include_closed = 1;
  if (has_include_closed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->include_closed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.RequestPlaylists)
  return target;
}

int RequestPlaylists::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.RequestPlaylists)
  int total_size = 0;

  // optional bool include_closed = 1;
  if (has_include_closed()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestPlaylists::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.RequestPlaylists)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestPlaylists* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestPlaylists>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.RequestPlaylists)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.RequestPlaylists)
    MergeFrom(*source);
  }
}

void RequestPlaylists::MergeFrom(const RequestPlaylists& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.RequestPlaylists)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_include_closed()) {
      set_include_closed(from.include_closed());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RequestPlaylists::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.RequestPlaylists)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestPlaylists::CopyFrom(const RequestPlaylists& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.RequestPlaylists)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestPlaylists::IsInitialized() const {

  return true;
}

void RequestPlaylists::Swap(RequestPlaylists* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestPlaylists::InternalSwap(RequestPlaylists* other) {
  std::swap(include_closed_, other->include_closed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestPlaylists::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestPlaylists_descriptor_;
  metadata.reflection = RequestPlaylists_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestPlaylists

// optional bool include_closed = 1;
bool RequestPlaylists::has_include_closed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RequestPlaylists::set_has_include_closed() {
  _has_bits_[0] |= 0x00000001u;
}
void RequestPlaylists::clear_has_include_closed() {
  _has_bits_[0] &= ~0x00000001u;
}
void RequestPlaylists::clear_include_closed() {
  include_closed_ = false;
  clear_has_include_closed();
}
 bool RequestPlaylists::include_closed() const {
  // @@protoc_insertion_point(field_get:pb.remote.RequestPlaylists.include_closed)
  return include_closed_;
}
 void RequestPlaylists::set_include_closed(bool value) {
  set_has_include_closed();
  include_closed_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.RequestPlaylists.include_closed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestPlaylistSongs::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestPlaylistSongs::RequestPlaylistSongs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.RequestPlaylistSongs)
}

void RequestPlaylistSongs::InitAsDefaultInstance() {
}

RequestPlaylistSongs::RequestPlaylistSongs(const RequestPlaylistSongs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.remote.RequestPlaylistSongs)
}

void RequestPlaylistSongs::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestPlaylistSongs::~RequestPlaylistSongs() {
  // @@protoc_insertion_point(destructor:pb.remote.RequestPlaylistSongs)
  SharedDtor();
}

void RequestPlaylistSongs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestPlaylistSongs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestPlaylistSongs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestPlaylistSongs_descriptor_;
}

const RequestPlaylistSongs& RequestPlaylistSongs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remotecontrolmessages_2eproto();
  return *default_instance_;
}

RequestPlaylistSongs* RequestPlaylistSongs::default_instance_ = NULL;

RequestPlaylistSongs* RequestPlaylistSongs::New(::google::protobuf::Arena* arena) const {
  RequestPlaylistSongs* n = new RequestPlaylistSongs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestPlaylistSongs::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.RequestPlaylistSongs)
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RequestPlaylistSongs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.RequestPlaylistSongs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.RequestPlaylistSongs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.RequestPlaylistSongs)
  return false;
#undef DO_
}

void RequestPlaylistSongs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.RequestPlaylistSongs)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.RequestPlaylistSongs)
}

::google::protobuf::uint8* RequestPlaylistSongs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.RequestPlaylistSongs)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.RequestPlaylistSongs)
  return target;
}

int RequestPlaylistSongs::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.RequestPlaylistSongs)
  int total_size = 0;

  // optional int32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestPlaylistSongs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.RequestPlaylistSongs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestPlaylistSongs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestPlaylistSongs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.RequestPlaylistSongs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.RequestPlaylistSongs)
    MergeFrom(*source);
  }
}

void RequestPlaylistSongs::MergeFrom(const RequestPlaylistSongs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.RequestPlaylistSongs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RequestPlaylistSongs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.RequestPlaylistSongs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestPlaylistSongs::CopyFrom(const RequestPlaylistSongs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.RequestPlaylistSongs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestPlaylistSongs::IsInitialized() const {

  return true;
}

void RequestPlaylistSongs::Swap(RequestPlaylistSongs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestPlaylistSongs::InternalSwap(RequestPlaylistSongs* other) {
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestPlaylistSongs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestPlaylistSongs_descriptor_;
  metadata.reflection = RequestPlaylistSongs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestPlaylistSongs

// optional int32 id = 1;
bool RequestPlaylistSongs::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RequestPlaylistSongs::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RequestPlaylistSongs::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RequestPlaylistSongs::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 RequestPlaylistSongs::id() const {
  // @@protoc_insertion_point(field_get:pb.remote.RequestPlaylistSongs.id)
  return id_;
}
 void RequestPlaylistSongs::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.RequestPlaylistSongs.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestChangeSong::kPlaylistIdFieldNumber;
const int RequestChangeSong::kSongIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestChangeSong::RequestChangeSong()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.RequestChangeSong)
}

void RequestChangeSong::InitAsDefaultInstance() {
}

RequestChangeSong::RequestChangeSong(const RequestChangeSong& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.remote.RequestChangeSong)
}

void RequestChangeSong::SharedCtor() {
  _cached_size_ = 0;
  playlist_id_ = 0;
  song_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestChangeSong::~RequestChangeSong() {
  // @@protoc_insertion_point(destructor:pb.remote.RequestChangeSong)
  SharedDtor();
}

void RequestChangeSong::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestChangeSong::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestChangeSong::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestChangeSong_descriptor_;
}

const RequestChangeSong& RequestChangeSong::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remotecontrolmessages_2eproto();
  return *default_instance_;
}

RequestChangeSong* RequestChangeSong::default_instance_ = NULL;

RequestChangeSong* RequestChangeSong::New(::google::protobuf::Arena* arena) const {
  RequestChangeSong* n = new RequestChangeSong;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestChangeSong::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.RequestChangeSong)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RequestChangeSong, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RequestChangeSong*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(playlist_id_, song_index_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RequestChangeSong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.RequestChangeSong)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 playlist_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playlist_id_)));
          set_has_playlist_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_song_index;
        break;
      }

      // optional int32 song_index = 2;
      case 2: {
        if (tag == 16) {
         parse_song_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &song_index_)));
          set_has_song_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.RequestChangeSong)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.RequestChangeSong)
  return false;
#undef DO_
}

void RequestChangeSong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.RequestChangeSong)
  // optional int32 playlist_id = 1;
  if (has_playlist_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playlist_id(), output);
  }

  // optional int32 song_index = 2;
  if (has_song_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->song_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.RequestChangeSong)
}

::google::protobuf::uint8* RequestChangeSong::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.RequestChangeSong)
  // optional int32 playlist_id = 1;
  if (has_playlist_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playlist_id(), target);
  }

  // optional int32 song_index = 2;
  if (has_song_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->song_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.RequestChangeSong)
  return target;
}

int RequestChangeSong::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.RequestChangeSong)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 playlist_id = 1;
    if (has_playlist_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playlist_id());
    }

    // optional int32 song_index = 2;
    if (has_song_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->song_index());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestChangeSong::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.RequestChangeSong)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestChangeSong* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestChangeSong>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.RequestChangeSong)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.RequestChangeSong)
    MergeFrom(*source);
  }
}

void RequestChangeSong::MergeFrom(const RequestChangeSong& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.RequestChangeSong)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playlist_id()) {
      set_playlist_id(from.playlist_id());
    }
    if (from.has_song_index()) {
      set_song_index(from.song_index());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RequestChangeSong::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.RequestChangeSong)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestChangeSong::CopyFrom(const RequestChangeSong& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.RequestChangeSong)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestChangeSong::IsInitialized() const {

  return true;
}

void RequestChangeSong::Swap(RequestChangeSong* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestChangeSong::InternalSwap(RequestChangeSong* other) {
  std::swap(playlist_id_, other->playlist_id_);
  std::swap(song_index_, other->song_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestChangeSong::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestChangeSong_descriptor_;
  metadata.reflection = RequestChangeSong_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestChangeSong

// optional int32 playlist_id = 1;
bool RequestChangeSong::has_playlist_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RequestChangeSong::set_has_playlist_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RequestChangeSong::clear_has_playlist_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RequestChangeSong::clear_playlist_id() {
  playlist_id_ = 0;
  clear_has_playlist_id();
}
 ::google::protobuf::int32 RequestChangeSong::playlist_id() const {
  // @@protoc_insertion_point(field_get:pb.remote.RequestChangeSong.playlist_id)
  return playlist_id_;
}
 void RequestChangeSong::set_playlist_id(::google::protobuf::int32 value) {
  set_has_playlist_id();
  playlist_id_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.RequestChangeSong.playlist_id)
}

// optional int32 song_index = 2;
bool RequestChangeSong::has_song_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RequestChangeSong::set_has_song_index() {
  _has_bits_[0] |= 0x00000002u;
}
void RequestChangeSong::clear_has_song_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void RequestChangeSong::clear_song_index() {
  song_index_ = 0;
  clear_has_song_index();
}
 ::google::protobuf::int32 RequestChangeSong::song_index() const {
  // @@protoc_insertion_point(field_get:pb.remote.RequestChangeSong.song_index)
  return song_index_;
}
 void RequestChangeSong::set_song_index(::google::protobuf::int32 value) {
  set_has_song_index();
  song_index_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.RequestChangeSong.song_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestSetVolume::kVolumeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestSetVolume::RequestSetVolume()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.RequestSetVolume)
}

void RequestSetVolume::InitAsDefaultInstance() {
}

RequestSetVolume::RequestSetVolume(const RequestSetVolume& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.remote.RequestSetVolume)
}

void RequestSetVolume::SharedCtor() {
  _cached_size_ = 0;
  volume_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestSetVolume::~RequestSetVolume() {
  // @@protoc_insertion_point(destructor:pb.remote.RequestSetVolume)
  SharedDtor();
}

void RequestSetVolume::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestSetVolume::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestSetVolume::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestSetVolume_descriptor_;
}

const RequestSetVolume& RequestSetVolume::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remotecontrolmessages_2eproto();
  return *default_instance_;
}

RequestSetVolume* RequestSetVolume::default_instance_ = NULL;

RequestSetVolume* RequestSetVolume::New(::google::protobuf::Arena* arena) const {
  RequestSetVolume* n = new RequestSetVolume;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestSetVolume::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.RequestSetVolume)
  volume_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RequestSetVolume::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.RequestSetVolume)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 volume = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.RequestSetVolume)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.RequestSetVolume)
  return false;
#undef DO_
}

void RequestSetVolume::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.RequestSetVolume)
  // optional int32 volume = 1;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->volume(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.RequestSetVolume)
}

::google::protobuf::uint8* RequestSetVolume::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.RequestSetVolume)
  // optional int32 volume = 1;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->volume(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.RequestSetVolume)
  return target;
}

int RequestSetVolume::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.RequestSetVolume)
  int total_size = 0;

  // optional int32 volume = 1;
  if (has_volume()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volume());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestSetVolume::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.RequestSetVolume)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestSetVolume* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestSetVolume>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.RequestSetVolume)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.RequestSetVolume)
    MergeFrom(*source);
  }
}

void RequestSetVolume::MergeFrom(const RequestSetVolume& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.RequestSetVolume)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_volume()) {
      set_volume(from.volume());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RequestSetVolume::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.RequestSetVolume)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestSetVolume::CopyFrom(const RequestSetVolume& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.RequestSetVolume)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSetVolume::IsInitialized() const {

  return true;
}

void RequestSetVolume::Swap(RequestSetVolume* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestSetVolume::InternalSwap(RequestSetVolume* other) {
  std::swap(volume_, other->volume_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestSetVolume::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestSetVolume_descriptor_;
  metadata.reflection = RequestSetVolume_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestSetVolume

// optional int32 volume = 1;
bool RequestSetVolume::has_volume() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RequestSetVolume::set_has_volume() {
  _has_bits_[0] |= 0x00000001u;
}
void RequestSetVolume::clear_has_volume() {
  _has_bits_[0] &= ~0x00000001u;
}
void RequestSetVolume::clear_volume() {
  volume_ = 0;
  clear_has_volume();
}
 ::google::protobuf::int32 RequestSetVolume::volume() const {
  // @@protoc_insertion_point(field_get:pb.remote.RequestSetVolume.volume)
  return volume_;
}
 void RequestSetVolume::set_volume(::google::protobuf::int32 value) {
  set_has_volume();
  volume_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.RequestSetVolume.volume)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Repeat::kRepeatModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Repeat::Repeat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.Repeat)
}

void Repeat::InitAsDefaultInstance() {
}

Repeat::Repeat(const Repeat& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.remote.Repeat)
}

void Repeat::SharedCtor() {
  _cached_size_ = 0;
  repeat_mode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Repeat::~Repeat() {
  // @@protoc_insertion_point(destructor:pb.remote.Repeat)
  SharedDtor();
}

void Repeat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Repeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Repeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Repeat_descriptor_;
}

const Repeat& Repeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remotecontrolmessages_2eproto();
  return *default_instance_;
}

Repeat* Repeat::default_instance_ = NULL;

Repeat* Repeat::New(::google::protobuf::Arena* arena) const {
  Repeat* n = new Repeat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Repeat::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.Repeat)
  repeat_mode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Repeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.Repeat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.remote.RepeatMode repeat_mode = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::remote::RepeatMode_IsValid(value)) {
            set_repeat_mode(static_cast< ::pb::remote::RepeatMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.Repeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.Repeat)
  return false;
#undef DO_
}

void Repeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.Repeat)
  // optional .pb.remote.RepeatMode repeat_mode = 1;
  if (has_repeat_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->repeat_mode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.Repeat)
}

::google::protobuf::uint8* Repeat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.Repeat)
  // optional .pb.remote.RepeatMode repeat_mode = 1;
  if (has_repeat_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->repeat_mode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.Repeat)
  return target;
}

int Repeat::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.Repeat)
  int total_size = 0;

  // optional .pb.remote.RepeatMode repeat_mode = 1;
  if (has_repeat_mode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->repeat_mode());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Repeat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.Repeat)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Repeat* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Repeat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.Repeat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.Repeat)
    MergeFrom(*source);
  }
}

void Repeat::MergeFrom(const Repeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.Repeat)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_repeat_mode()) {
      set_repeat_mode(from.repeat_mode());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Repeat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.Repeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Repeat::CopyFrom(const Repeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.Repeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Repeat::IsInitialized() const {

  return true;
}

void Repeat::Swap(Repeat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Repeat::InternalSwap(Repeat* other) {
  std::swap(repeat_mode_, other->repeat_mode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Repeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Repeat_descriptor_;
  metadata.reflection = Repeat_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Repeat

// optional .pb.remote.RepeatMode repeat_mode = 1;
bool Repeat::has_repeat_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Repeat::set_has_repeat_mode() {
  _has_bits_[0] |= 0x00000001u;
}
void Repeat::clear_has_repeat_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
void Repeat::clear_repeat_mode() {
  repeat_mode_ = 0;
  clear_has_repeat_mode();
}
 ::pb::remote::RepeatMode Repeat::repeat_mode() const {
  // @@protoc_insertion_point(field_get:pb.remote.Repeat.repeat_mode)
  return static_cast< ::pb::remote::RepeatMode >(repeat_mode_);
}
 void Repeat::set_repeat_mode(::pb::remote::RepeatMode value) {
  assert(::pb::remote::RepeatMode_IsValid(value));
  set_has_repeat_mode();
  repeat_mode_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.Repeat.repeat_mode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Shuffle::kShuffleModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Shuffle::Shuffle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.Shuffle)
}

void Shuffle::InitAsDefaultInstance() {
}

Shuffle::Shuffle(const Shuffle& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.remote.Shuffle)
}

void Shuffle::SharedCtor() {
  _cached_size_ = 0;
  shuffle_mode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Shuffle::~Shuffle() {
  // @@protoc_insertion_point(destructor:pb.remote.Shuffle)
  SharedDtor();
}

void Shuffle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Shuffle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Shuffle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shuffle_descriptor_;
}

const Shuffle& Shuffle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remotecontrolmessages_2eproto();
  return *default_instance_;
}

Shuffle* Shuffle::default_instance_ = NULL;

Shuffle* Shuffle::New(::google::protobuf::Arena* arena) const {
  Shuffle* n = new Shuffle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Shuffle::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.Shuffle)
  shuffle_mode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Shuffle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.Shuffle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.remote.ShuffleMode shuffle_mode = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::remote::ShuffleMode_IsValid(value)) {
            set_shuffle_mode(static_cast< ::pb::remote::ShuffleMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.Shuffle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.Shuffle)
  return false;
#undef DO_
}

void Shuffle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.Shuffle)
  // optional .pb.remote.ShuffleMode shuffle_mode = 1;
  if (has_shuffle_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->shuffle_mode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.Shuffle)
}

::google::protobuf::uint8* Shuffle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.Shuffle)
  // optional .pb.remote.ShuffleMode shuffle_mode = 1;
  if (has_shuffle_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->shuffle_mode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.Shuffle)
  return target;
}

int Shuffle::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.Shuffle)
  int total_size = 0;

  // optional .pb.remote.ShuffleMode shuffle_mode = 1;
  if (has_shuffle_mode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->shuffle_mode());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Shuffle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.Shuffle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Shuffle* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Shuffle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.Shuffle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.Shuffle)
    MergeFrom(*source);
  }
}

void Shuffle::MergeFrom(const Shuffle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.Shuffle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shuffle_mode()) {
      set_shuffle_mode(from.shuffle_mode());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Shuffle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.Shuffle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shuffle::CopyFrom(const Shuffle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.Shuffle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shuffle::IsInitialized() const {

  return true;
}

void Shuffle::Swap(Shuffle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Shuffle::InternalSwap(Shuffle* other) {
  std::swap(shuffle_mode_, other->shuffle_mode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Shuffle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Shuffle_descriptor_;
  metadata.reflection = Shuffle_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Shuffle

// optional .pb.remote.ShuffleMode shuffle_mode = 1;
bool Shuffle::has_shuffle_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Shuffle::set_has_shuffle_mode() {
  _has_bits_[0] |= 0x00000001u;
}
void Shuffle::clear_has_shuffle_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
void Shuffle::clear_shuffle_mode() {
  shuffle_mode_ = 0;
  clear_has_shuffle_mode();
}
 ::pb::remote::ShuffleMode Shuffle::shuffle_mode() const {
  // @@protoc_insertion_point(field_get:pb.remote.Shuffle.shuffle_mode)
  return static_cast< ::pb::remote::ShuffleMode >(shuffle_mode_);
}
 void Shuffle::set_shuffle_mode(::pb::remote::ShuffleMode value) {
  assert(::pb::remote::ShuffleMode_IsValid(value));
  set_has_shuffle_mode();
  shuffle_mode_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.Shuffle.shuffle_mode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseClementineInfo::kVersionFieldNumber;
const int ResponseClementineInfo::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseClementineInfo::ResponseClementineInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.ResponseClementineInfo)
}

void ResponseClementineInfo::InitAsDefaultInstance() {
}

ResponseClementineInfo::ResponseClementineInfo(const ResponseClementineInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.remote.ResponseClementineInfo)
}

void ResponseClementineInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseClementineInfo::~ResponseClementineInfo() {
  // @@protoc_insertion_point(destructor:pb.remote.ResponseClementineInfo)
  SharedDtor();
}

void ResponseClementineInfo::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ResponseClementineInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseClementineInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseClementineInfo_descriptor_;
}

const ResponseClementineInfo& ResponseClementineInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remotecontrolmessages_2eproto();
  return *default_instance_;
}

ResponseClementineInfo* ResponseClementineInfo::default_instance_ = NULL;

ResponseClementineInfo* ResponseClementineInfo::New(::google::protobuf::Arena* arena) const {
  ResponseClementineInfo* n = new ResponseClementineInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseClementineInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.ResponseClementineInfo)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_version()) {
      version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ResponseClementineInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.ResponseClementineInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.remote.ResponseClementineInfo.version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional .pb.remote.EngineState state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::remote::EngineState_IsValid(value)) {
            set_state(static_cast< ::pb::remote::EngineState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.ResponseClementineInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.ResponseClementineInfo)
  return false;
#undef DO_
}

void ResponseClementineInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.ResponseClementineInfo)
  // optional string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.ResponseClementineInfo.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version(), output);
  }

  // optional .pb.remote.EngineState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.ResponseClementineInfo)
}

::google::protobuf::uint8* ResponseClementineInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.ResponseClementineInfo)
  // optional string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.ResponseClementineInfo.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  // optional .pb.remote.EngineState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.ResponseClementineInfo)
  return target;
}

int ResponseClementineInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.ResponseClementineInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional .pb.remote.EngineState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseClementineInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.ResponseClementineInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponseClementineInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseClementineInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.ResponseClementineInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.ResponseClementineInfo)
    MergeFrom(*source);
  }
}

void ResponseClementineInfo::MergeFrom(const ResponseClementineInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.ResponseClementineInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_has_version();
      version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ResponseClementineInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.ResponseClementineInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseClementineInfo::CopyFrom(const ResponseClementineInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.ResponseClementineInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseClementineInfo::IsInitialized() const {

  return true;
}

void ResponseClementineInfo::Swap(ResponseClementineInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseClementineInfo::InternalSwap(ResponseClementineInfo* other) {
  version_.Swap(&other->version_);
  std::swap(state_, other->state_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseClementineInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseClementineInfo_descriptor_;
  metadata.reflection = ResponseClementineInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseClementineInfo

// optional string version = 1;
bool ResponseClementineInfo::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ResponseClementineInfo::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void ResponseClementineInfo::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void ResponseClementineInfo::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version();
}
 const ::std::string& ResponseClementineInfo::version() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseClementineInfo.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseClementineInfo::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.remote.ResponseClementineInfo.version)
}
 void ResponseClementineInfo::set_version(const char* value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.remote.ResponseClementineInfo.version)
}
 void ResponseClementineInfo::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.remote.ResponseClementineInfo.version)
}
 ::std::string* ResponseClementineInfo::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:pb.remote.ResponseClementineInfo.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResponseClementineInfo::release_version() {
  // @@protoc_insertion_point(field_release:pb.remote.ResponseClementineInfo.version)
  clear_has_version();
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseClementineInfo::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:pb.remote.ResponseClementineInfo.version)
}

// optional .pb.remote.EngineState state = 2;
bool ResponseClementineInfo::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ResponseClementineInfo::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
void ResponseClementineInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
void ResponseClementineInfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
 ::pb::remote::EngineState ResponseClementineInfo::state() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseClementineInfo.state)
  return static_cast< ::pb::remote::EngineState >(state_);
}
 void ResponseClementineInfo::set_state(::pb::remote::EngineState value) {
  assert(::pb::remote::EngineState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.ResponseClementineInfo.state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseCurrentMetadata::kSongMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseCurrentMetadata::ResponseCurrentMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.ResponseCurrentMetadata)
}

void ResponseCurrentMetadata::InitAsDefaultInstance() {
  song_metadata_ = const_cast< ::pb::remote::SongMetadata*>(&::pb::remote::SongMetadata::default_instance());
}

ResponseCurrentMetadata::ResponseCurrentMetadata(const ResponseCurrentMetadata& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.remote.ResponseCurrentMetadata)
}

void ResponseCurrentMetadata::SharedCtor() {
  _cached_size_ = 0;
  song_metadata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseCurrentMetadata::~ResponseCurrentMetadata() {
  // @@protoc_insertion_point(destructor:pb.remote.ResponseCurrentMetadata)
  SharedDtor();
}

void ResponseCurrentMetadata::SharedDtor() {
  if (this != default_instance_) {
    delete song_metadata_;
  }
}

void ResponseCurrentMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseCurrentMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseCurrentMetadata_descriptor_;
}

const ResponseCurrentMetadata& ResponseCurrentMetadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remotecontrolmessages_2eproto();
  return *default_instance_;
}

ResponseCurrentMetadata* ResponseCurrentMetadata::default_instance_ = NULL;

ResponseCurrentMetadata* ResponseCurrentMetadata::New(::google::protobuf::Arena* arena) const {
  ResponseCurrentMetadata* n = new ResponseCurrentMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseCurrentMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.ResponseCurrentMetadata)
  if (has_song_metadata()) {
    if (song_metadata_ != NULL) song_metadata_->::pb::remote::SongMetadata::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ResponseCurrentMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.ResponseCurrentMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.remote.SongMetadata song_metadata = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_song_metadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.ResponseCurrentMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.ResponseCurrentMetadata)
  return false;
#undef DO_
}

void ResponseCurrentMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.ResponseCurrentMetadata)
  // optional .pb.remote.SongMetadata song_metadata = 1;
  if (has_song_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->song_metadata_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.ResponseCurrentMetadata)
}

::google::protobuf::uint8* ResponseCurrentMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.ResponseCurrentMetadata)
  // optional .pb.remote.SongMetadata song_metadata = 1;
  if (has_song_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->song_metadata_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.ResponseCurrentMetadata)
  return target;
}

int ResponseCurrentMetadata::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.ResponseCurrentMetadata)
  int total_size = 0;

  // optional .pb.remote.SongMetadata song_metadata = 1;
  if (has_song_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->song_metadata_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseCurrentMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.ResponseCurrentMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponseCurrentMetadata* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseCurrentMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.ResponseCurrentMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.ResponseCurrentMetadata)
    MergeFrom(*source);
  }
}

void ResponseCurrentMetadata::MergeFrom(const ResponseCurrentMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.ResponseCurrentMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_song_metadata()) {
      mutable_song_metadata()->::pb::remote::SongMetadata::MergeFrom(from.song_metadata());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ResponseCurrentMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.ResponseCurrentMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseCurrentMetadata::CopyFrom(const ResponseCurrentMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.ResponseCurrentMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseCurrentMetadata::IsInitialized() const {

  return true;
}

void ResponseCurrentMetadata::Swap(ResponseCurrentMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseCurrentMetadata::InternalSwap(ResponseCurrentMetadata* other) {
  std::swap(song_metadata_, other->song_metadata_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseCurrentMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseCurrentMetadata_descriptor_;
  metadata.reflection = ResponseCurrentMetadata_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseCurrentMetadata

// optional .pb.remote.SongMetadata song_metadata = 1;
bool ResponseCurrentMetadata::has_song_metadata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ResponseCurrentMetadata::set_has_song_metadata() {
  _has_bits_[0] |= 0x00000001u;
}
void ResponseCurrentMetadata::clear_has_song_metadata() {
  _has_bits_[0] &= ~0x00000001u;
}
void ResponseCurrentMetadata::clear_song_metadata() {
  if (song_metadata_ != NULL) song_metadata_->::pb::remote::SongMetadata::Clear();
  clear_has_song_metadata();
}
const ::pb::remote::SongMetadata& ResponseCurrentMetadata::song_metadata() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseCurrentMetadata.song_metadata)
  return song_metadata_ != NULL ? *song_metadata_ : *default_instance_->song_metadata_;
}
::pb::remote::SongMetadata* ResponseCurrentMetadata::mutable_song_metadata() {
  set_has_song_metadata();
  if (song_metadata_ == NULL) {
    song_metadata_ = new ::pb::remote::SongMetadata;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.ResponseCurrentMetadata.song_metadata)
  return song_metadata_;
}
::pb::remote::SongMetadata* ResponseCurrentMetadata::release_song_metadata() {
  // @@protoc_insertion_point(field_release:pb.remote.ResponseCurrentMetadata.song_metadata)
  clear_has_song_metadata();
  ::pb::remote::SongMetadata* temp = song_metadata_;
  song_metadata_ = NULL;
  return temp;
}
void ResponseCurrentMetadata::set_allocated_song_metadata(::pb::remote::SongMetadata* song_metadata) {
  delete song_metadata_;
  song_metadata_ = song_metadata;
  if (song_metadata) {
    set_has_song_metadata();
  } else {
    clear_has_song_metadata();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.ResponseCurrentMetadata.song_metadata)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponsePlaylists::kPlaylistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponsePlaylists::ResponsePlaylists()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.ResponsePlaylists)
}

void ResponsePlaylists::InitAsDefaultInstance() {
}

ResponsePlaylists::ResponsePlaylists(const ResponsePlaylists& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.remote.ResponsePlaylists)
}

void ResponsePlaylists::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponsePlaylists::~ResponsePlaylists() {
  // @@protoc_insertion_point(destructor:pb.remote.ResponsePlaylists)
  SharedDtor();
}

void ResponsePlaylists::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponsePlaylists::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponsePlaylists::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponsePlaylists_descriptor_;
}

const ResponsePlaylists& ResponsePlaylists::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remotecontrolmessages_2eproto();
  return *default_instance_;
}

ResponsePlaylists* ResponsePlaylists::default_instance_ = NULL;

ResponsePlaylists* ResponsePlaylists::New(::google::protobuf::Arena* arena) const {
  ResponsePlaylists* n = new ResponsePlaylists;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponsePlaylists::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.ResponsePlaylists)
  playlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ResponsePlaylists::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.ResponsePlaylists)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.remote.Playlist playlist = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_playlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_playlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_playlist;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.ResponsePlaylists)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.ResponsePlaylists)
  return false;
#undef DO_
}

void ResponsePlaylists::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.ResponsePlaylists)
  // repeated .pb.remote.Playlist playlist = 1;
  for (unsigned int i = 0, n = this->playlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->playlist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.ResponsePlaylists)
}

::google::protobuf::uint8* ResponsePlaylists::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.ResponsePlaylists)
  // repeated .pb.remote.Playlist playlist = 1;
  for (unsigned int i = 0, n = this->playlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->playlist(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.ResponsePlaylists)
  return target;
}

int ResponsePlaylists::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.ResponsePlaylists)
  int total_size = 0;

  // repeated .pb.remote.Playlist playlist = 1;
  total_size += 1 * this->playlist_size();
  for (int i = 0; i < this->playlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playlist(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponsePlaylists::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.ResponsePlaylists)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponsePlaylists* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponsePlaylists>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.ResponsePlaylists)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.ResponsePlaylists)
    MergeFrom(*source);
  }
}

void ResponsePlaylists::MergeFrom(const ResponsePlaylists& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.ResponsePlaylists)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  playlist_.MergeFrom(from.playlist_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ResponsePlaylists::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.ResponsePlaylists)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponsePlaylists::CopyFrom(const ResponsePlaylists& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.ResponsePlaylists)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponsePlaylists::IsInitialized() const {

  return true;
}

void ResponsePlaylists::Swap(ResponsePlaylists* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponsePlaylists::InternalSwap(ResponsePlaylists* other) {
  playlist_.UnsafeArenaSwap(&other->playlist_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponsePlaylists::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponsePlaylists_descriptor_;
  metadata.reflection = ResponsePlaylists_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponsePlaylists

// repeated .pb.remote.Playlist playlist = 1;
int ResponsePlaylists::playlist_size() const {
  return playlist_.size();
}
void ResponsePlaylists::clear_playlist() {
  playlist_.Clear();
}
const ::pb::remote::Playlist& ResponsePlaylists::playlist(int index) const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponsePlaylists.playlist)
  return playlist_.Get(index);
}
::pb::remote::Playlist* ResponsePlaylists::mutable_playlist(int index) {
  // @@protoc_insertion_point(field_mutable:pb.remote.ResponsePlaylists.playlist)
  return playlist_.Mutable(index);
}
::pb::remote::Playlist* ResponsePlaylists::add_playlist() {
  // @@protoc_insertion_point(field_add:pb.remote.ResponsePlaylists.playlist)
  return playlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb::remote::Playlist >*
ResponsePlaylists::mutable_playlist() {
  // @@protoc_insertion_point(field_mutable_list:pb.remote.ResponsePlaylists.playlist)
  return &playlist_;
}
const ::google::protobuf::RepeatedPtrField< ::pb::remote::Playlist >&
ResponsePlaylists::playlist() const {
  // @@protoc_insertion_point(field_list:pb.remote.ResponsePlaylists.playlist)
  return playlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponsePlaylistSongs::kRequestedPlaylistFieldNumber;
const int ResponsePlaylistSongs::kSongsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponsePlaylistSongs::ResponsePlaylistSongs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.ResponsePlaylistSongs)
}

void ResponsePlaylistSongs::InitAsDefaultInstance() {
  requested_playlist_ = const_cast< ::pb::remote::Playlist*>(&::pb::remote::Playlist::default_instance());
}

ResponsePlaylistSongs::ResponsePlaylistSongs(const ResponsePlaylistSongs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.remote.ResponsePlaylistSongs)
}

void ResponsePlaylistSongs::SharedCtor() {
  _cached_size_ = 0;
  requested_playlist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponsePlaylistSongs::~ResponsePlaylistSongs() {
  // @@protoc_insertion_point(destructor:pb.remote.ResponsePlaylistSongs)
  SharedDtor();
}

void ResponsePlaylistSongs::SharedDtor() {
  if (this != default_instance_) {
    delete requested_playlist_;
  }
}

void ResponsePlaylistSongs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponsePlaylistSongs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponsePlaylistSongs_descriptor_;
}

const ResponsePlaylistSongs& ResponsePlaylistSongs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remotecontrolmessages_2eproto();
  return *default_instance_;
}

ResponsePlaylistSongs* ResponsePlaylistSongs::default_instance_ = NULL;

ResponsePlaylistSongs* ResponsePlaylistSongs::New(::google::protobuf::Arena* arena) const {
  ResponsePlaylistSongs* n = new ResponsePlaylistSongs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponsePlaylistSongs::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.ResponsePlaylistSongs)
  if (has_requested_playlist()) {
    if (requested_playlist_ != NULL) requested_playlist_->::pb::remote::Playlist::Clear();
  }
  songs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ResponsePlaylistSongs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.ResponsePlaylistSongs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.remote.Playlist requested_playlist = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_requested_playlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_songs;
        break;
      }

      // repeated .pb.remote.SongMetadata songs = 2;
      case 2: {
        if (tag == 18) {
         parse_songs:
          DO_(input->IncrementRecursionDepth());
         parse_loop_songs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_songs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_songs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.ResponsePlaylistSongs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.ResponsePlaylistSongs)
  return false;
#undef DO_
}

void ResponsePlaylistSongs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.ResponsePlaylistSongs)
  // optional .pb.remote.Playlist requested_playlist = 1;
  if (has_requested_playlist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->requested_playlist_, output);
  }

  // repeated .pb.remote.SongMetadata songs = 2;
  for (unsigned int i = 0, n = this->songs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->songs(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.ResponsePlaylistSongs)
}

::google::protobuf::uint8* ResponsePlaylistSongs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.ResponsePlaylistSongs)
  // optional .pb.remote.Playlist requested_playlist = 1;
  if (has_requested_playlist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->requested_playlist_, false, target);
  }

  // repeated .pb.remote.SongMetadata songs = 2;
  for (unsigned int i = 0, n = this->songs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->songs(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.ResponsePlaylistSongs)
  return target;
}

int ResponsePlaylistSongs::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.ResponsePlaylistSongs)
  int total_size = 0;

  // optional .pb.remote.Playlist requested_playlist = 1;
  if (has_requested_playlist()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->requested_playlist_);
  }

  // repeated .pb.remote.SongMetadata songs = 2;
  total_size += 1 * this->songs_size();
  for (int i = 0; i < this->songs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->songs(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponsePlaylistSongs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.ResponsePlaylistSongs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponsePlaylistSongs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponsePlaylistSongs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.ResponsePlaylistSongs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.ResponsePlaylistSongs)
    MergeFrom(*source);
  }
}

void ResponsePlaylistSongs::MergeFrom(const ResponsePlaylistSongs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.ResponsePlaylistSongs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  songs_.MergeFrom(from.songs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requested_playlist()) {
      mutable_requested_playlist()->::pb::remote::Playlist::MergeFrom(from.requested_playlist());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ResponsePlaylistSongs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.ResponsePlaylistSongs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponsePlaylistSongs::CopyFrom(const ResponsePlaylistSongs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.ResponsePlaylistSongs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponsePlaylistSongs::IsInitialized() const {

  return true;
}

void ResponsePlaylistSongs::Swap(ResponsePlaylistSongs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponsePlaylistSongs::InternalSwap(ResponsePlaylistSongs* other) {
  std::swap(requested_playlist_, other->requested_playlist_);
  songs_.UnsafeArenaSwap(&other->songs_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponsePlaylistSongs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponsePlaylistSongs_descriptor_;
  metadata.reflection = ResponsePlaylistSongs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponsePlaylistSongs

// optional .pb.remote.Playlist requested_playlist = 1;
bool ResponsePlaylistSongs::has_requested_playlist() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ResponsePlaylistSongs::set_has_requested_playlist() {
  _has_bits_[0] |= 0x00000001u;
}
void ResponsePlaylistSongs::clear_has_requested_playlist() {
  _has_bits_[0] &= ~0x00000001u;
}
void ResponsePlaylistSongs::clear_requested_playlist() {
  if (requested_playlist_ != NULL) requested_playlist_->::pb::remote::Playlist::Clear();
  clear_has_requested_playlist();
}
const ::pb::remote::Playlist& ResponsePlaylistSongs::requested_playlist() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponsePlaylistSongs.requested_playlist)
  return requested_playlist_ != NULL ? *requested_playlist_ : *default_instance_->requested_playlist_;
}
::pb::remote::Playlist* ResponsePlaylistSongs::mutable_requested_playlist() {
  set_has_requested_playlist();
  if (requested_playlist_ == NULL) {
    requested_playlist_ = new ::pb::remote::Playlist;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.ResponsePlaylistSongs.requested_playlist)
  return requested_playlist_;
}
::pb::remote::Playlist* ResponsePlaylistSongs::release_requested_playlist() {
  // @@protoc_insertion_point(field_release:pb.remote.ResponsePlaylistSongs.requested_playlist)
  clear_has_requested_playlist();
  ::pb::remote::Playlist* temp = requested_playlist_;
  requested_playlist_ = NULL;
  return temp;
}
void ResponsePlaylistSongs::set_allocated_requested_playlist(::pb::remote::Playlist* requested_playlist) {
  delete requested_playlist_;
  requested_playlist_ = requested_playlist;
  if (requested_playlist) {
    set_has_requested_playlist();
  } else {
    clear_has_requested_playlist();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.ResponsePlaylistSongs.requested_playlist)
}

// repeated .pb.remote.SongMetadata songs = 2;
int ResponsePlaylistSongs::songs_size() const {
  return songs_.size();
}
void ResponsePlaylistSongs::clear_songs() {
  songs_.Clear();
}
const ::pb::remote::SongMetadata& ResponsePlaylistSongs::songs(int index) const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponsePlaylistSongs.songs)
  return songs_.Get(index);
}
::pb::remote::SongMetadata* ResponsePlaylistSongs::mutable_songs(int index) {
  // @@protoc_insertion_point(field_mutable:pb.remote.ResponsePlaylistSongs.songs)
  return songs_.Mutable(index);
}
::pb::remote::SongMetadata* ResponsePlaylistSongs::add_songs() {
  // @@protoc_insertion_point(field_add:pb.remote.ResponsePlaylistSongs.songs)
  return songs_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb::remote::SongMetadata >*
ResponsePlaylistSongs::mutable_songs() {
  // @@protoc_insertion_point(field_mutable_list:pb.remote.ResponsePlaylistSongs.songs)
  return &songs_;
}
const ::google::protobuf::RepeatedPtrField< ::pb::remote::SongMetadata >&
ResponsePlaylistSongs::songs() const {
  // @@protoc_insertion_point(field_list:pb.remote.ResponsePlaylistSongs.songs)
  return songs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseEngineStateChanged::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseEngineStateChanged::ResponseEngineStateChanged()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.ResponseEngineStateChanged)
}

void ResponseEngineStateChanged::InitAsDefaultInstance() {
}

ResponseEngineStateChanged::ResponseEngineStateChanged(const ResponseEngineStateChanged& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.remote.ResponseEngineStateChanged)
}

void ResponseEngineStateChanged::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseEngineStateChanged::~ResponseEngineStateChanged() {
  // @@protoc_insertion_point(destructor:pb.remote.ResponseEngineStateChanged)
  SharedDtor();
}

void ResponseEngineStateChanged::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseEngineStateChanged::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseEngineStateChanged::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseEngineStateChanged_descriptor_;
}

const ResponseEngineStateChanged& ResponseEngineStateChanged::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remotecontrolmessages_2eproto();
  return *default_instance_;
}

ResponseEngineStateChanged* ResponseEngineStateChanged::default_instance_ = NULL;

ResponseEngineStateChanged* ResponseEngineStateChanged::New(::google::protobuf::Arena* arena) const {
  ResponseEngineStateChanged* n = new ResponseEngineStateChanged;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseEngineStateChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.ResponseEngineStateChanged)
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ResponseEngineStateChanged::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.ResponseEngineStateChanged)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.remote.EngineState state = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::remote::EngineState_IsValid(value)) {
            set_state(static_cast< ::pb::remote::EngineState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.ResponseEngineStateChanged)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.ResponseEngineStateChanged)
  return false;
#undef DO_
}

void ResponseEngineStateChanged::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.ResponseEngineStateChanged)
  // optional .pb.remote.EngineState state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.ResponseEngineStateChanged)
}

::google::protobuf::uint8* ResponseEngineStateChanged::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.ResponseEngineStateChanged)
  // optional .pb.remote.EngineState state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.ResponseEngineStateChanged)
  return target;
}

int ResponseEngineStateChanged::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.ResponseEngineStateChanged)
  int total_size = 0;

  // optional .pb.remote.EngineState state = 1;
  if (has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseEngineStateChanged::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.ResponseEngineStateChanged)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponseEngineStateChanged* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseEngineStateChanged>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.ResponseEngineStateChanged)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.ResponseEngineStateChanged)
    MergeFrom(*source);
  }
}

void ResponseEngineStateChanged::MergeFrom(const ResponseEngineStateChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.ResponseEngineStateChanged)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ResponseEngineStateChanged::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.ResponseEngineStateChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseEngineStateChanged::CopyFrom(const ResponseEngineStateChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.ResponseEngineStateChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseEngineStateChanged::IsInitialized() const {

  return true;
}

void ResponseEngineStateChanged::Swap(ResponseEngineStateChanged* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseEngineStateChanged::InternalSwap(ResponseEngineStateChanged* other) {
  std::swap(state_, other->state_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseEngineStateChanged::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseEngineStateChanged_descriptor_;
  metadata.reflection = ResponseEngineStateChanged_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseEngineStateChanged

// optional .pb.remote.EngineState state = 1;
bool ResponseEngineStateChanged::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ResponseEngineStateChanged::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
void ResponseEngineStateChanged::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
void ResponseEngineStateChanged::clear_state() {
  state_ = 0;
  clear_has_state();
}
 ::pb::remote::EngineState ResponseEngineStateChanged::state() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseEngineStateChanged.state)
  return static_cast< ::pb::remote::EngineState >(state_);
}
 void ResponseEngineStateChanged::set_state(::pb::remote::EngineState value) {
  assert(::pb::remote::EngineState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.ResponseEngineStateChanged.state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseUpdateTrackPosition::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseUpdateTrackPosition::ResponseUpdateTrackPosition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.ResponseUpdateTrackPosition)
}

void ResponseUpdateTrackPosition::InitAsDefaultInstance() {
}

ResponseUpdateTrackPosition::ResponseUpdateTrackPosition(const ResponseUpdateTrackPosition& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.remote.ResponseUpdateTrackPosition)
}

void ResponseUpdateTrackPosition::SharedCtor() {
  _cached_size_ = 0;
  position_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseUpdateTrackPosition::~ResponseUpdateTrackPosition() {
  // @@protoc_insertion_point(destructor:pb.remote.ResponseUpdateTrackPosition)
  SharedDtor();
}

void ResponseUpdateTrackPosition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseUpdateTrackPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseUpdateTrackPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseUpdateTrackPosition_descriptor_;
}

const ResponseUpdateTrackPosition& ResponseUpdateTrackPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remotecontrolmessages_2eproto();
  return *default_instance_;
}

ResponseUpdateTrackPosition* ResponseUpdateTrackPosition::default_instance_ = NULL;

ResponseUpdateTrackPosition* ResponseUpdateTrackPosition::New(::google::protobuf::Arena* arena) const {
  ResponseUpdateTrackPosition* n = new ResponseUpdateTrackPosition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseUpdateTrackPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.ResponseUpdateTrackPosition)
  position_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ResponseUpdateTrackPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.ResponseUpdateTrackPosition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 position = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.ResponseUpdateTrackPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.ResponseUpdateTrackPosition)
  return false;
#undef DO_
}

void ResponseUpdateTrackPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.ResponseUpdateTrackPosition)
  // optional int32 position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->position(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.ResponseUpdateTrackPosition)
}

::google::protobuf::uint8* ResponseUpdateTrackPosition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.ResponseUpdateTrackPosition)
  // optional int32 position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->position(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.ResponseUpdateTrackPosition)
  return target;
}

int ResponseUpdateTrackPosition::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.ResponseUpdateTrackPosition)
  int total_size = 0;

  // optional int32 position = 1;
  if (has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->position());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseUpdateTrackPosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.ResponseUpdateTrackPosition)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponseUpdateTrackPosition* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseUpdateTrackPosition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.ResponseUpdateTrackPosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.ResponseUpdateTrackPosition)
    MergeFrom(*source);
  }
}

void ResponseUpdateTrackPosition::MergeFrom(const ResponseUpdateTrackPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.ResponseUpdateTrackPosition)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      set_position(from.position());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ResponseUpdateTrackPosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.ResponseUpdateTrackPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseUpdateTrackPosition::CopyFrom(const ResponseUpdateTrackPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.ResponseUpdateTrackPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseUpdateTrackPosition::IsInitialized() const {

  return true;
}

void ResponseUpdateTrackPosition::Swap(ResponseUpdateTrackPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseUpdateTrackPosition::InternalSwap(ResponseUpdateTrackPosition* other) {
  std::swap(position_, other->position_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseUpdateTrackPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseUpdateTrackPosition_descriptor_;
  metadata.reflection = ResponseUpdateTrackPosition_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseUpdateTrackPosition

// optional int32 position = 1;
bool ResponseUpdateTrackPosition::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ResponseUpdateTrackPosition::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
void ResponseUpdateTrackPosition::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
void ResponseUpdateTrackPosition::clear_position() {
  position_ = 0;
  clear_has_position();
}
 ::google::protobuf::int32 ResponseUpdateTrackPosition::position() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseUpdateTrackPosition.position)
  return position_;
}
 void ResponseUpdateTrackPosition::set_position(::google::protobuf::int32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.ResponseUpdateTrackPosition.position)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestConnect::kAuthCodeFieldNumber;
const int RequestConnect::kSendPlaylistSongsFieldNumber;
const int RequestConnect::kDownloaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestConnect::RequestConnect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.RequestConnect)
}

void RequestConnect::InitAsDefaultInstance() {
}

RequestConnect::RequestConnect(const RequestConnect& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.remote.RequestConnect)
}

void RequestConnect::SharedCtor() {
  _cached_size_ = 0;
  auth_code_ = 0;
  send_playlist_songs_ = false;
  downloader_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestConnect::~RequestConnect() {
  // @@protoc_insertion_point(destructor:pb.remote.RequestConnect)
  SharedDtor();
}

void RequestConnect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestConnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestConnect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestConnect_descriptor_;
}

const RequestConnect& RequestConnect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remotecontrolmessages_2eproto();
  return *default_instance_;
}

RequestConnect* RequestConnect::default_instance_ = NULL;

RequestConnect* RequestConnect::New(::google::protobuf::Arena* arena) const {
  RequestConnect* n = new RequestConnect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestConnect::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.RequestConnect)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RequestConnect, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RequestConnect*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(auth_code_, downloader_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RequestConnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.RequestConnect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 auth_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auth_code_)));
          set_has_auth_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_send_playlist_songs;
        break;
      }

      // optional bool send_playlist_songs = 2;
      case 2: {
        if (tag == 16) {
         parse_send_playlist_songs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &send_playlist_songs_)));
          set_has_send_playlist_songs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_downloader;
        break;
      }

      // optional bool downloader = 3;
      case 3: {
        if (tag == 24) {
         parse_downloader:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &downloader_)));
          set_has_downloader();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.RequestConnect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.RequestConnect)
  return false;
#undef DO_
}

void RequestConnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.RequestConnect)
  // optional int32 auth_code = 1;
  if (has_auth_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->auth_code(), output);
  }

  // optional bool send_playlist_songs = 2;
  if (has_send_playlist_songs()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->send_playlist_songs(), output);
  }

  // optional bool downloader = 3;
  if (has_downloader()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->downloader(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.RequestConnect)
}

::google::protobuf::uint8* RequestConnect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.RequestConnect)
  // optional int32 auth_code = 1;
  if (has_auth_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->auth_code(), target);
  }

  // optional bool send_playlist_songs = 2;
  if (has_send_playlist_songs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->send_playlist_songs(), target);
  }

  // optional bool downloader = 3;
  if (has_downloader()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->downloader(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.RequestConnect)
  return target;
}

int RequestConnect::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.RequestConnect)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 auth_code = 1;
    if (has_auth_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->auth_code());
    }

    // optional bool send_playlist_songs = 2;
    if (has_send_playlist_songs()) {
      total_size += 1 + 1;
    }

    // optional bool downloader = 3;
    if (has_downloader()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestConnect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.RequestConnect)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestConnect* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestConnect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.RequestConnect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.RequestConnect)
    MergeFrom(*source);
  }
}

void RequestConnect::MergeFrom(const RequestConnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.RequestConnect)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_auth_code()) {
      set_auth_code(from.auth_code());
    }
    if (from.has_send_playlist_songs()) {
      set_send_playlist_songs(from.send_playlist_songs());
    }
    if (from.has_downloader()) {
      set_downloader(from.downloader());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RequestConnect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.RequestConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestConnect::CopyFrom(const RequestConnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.RequestConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestConnect::IsInitialized() const {

  return true;
}

void RequestConnect::Swap(RequestConnect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestConnect::InternalSwap(RequestConnect* other) {
  std::swap(auth_code_, other->auth_code_);
  std::swap(send_playlist_songs_, other->send_playlist_songs_);
  std::swap(downloader_, other->downloader_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestConnect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestConnect_descriptor_;
  metadata.reflection = RequestConnect_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestConnect

// optional int32 auth_code = 1;
bool RequestConnect::has_auth_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RequestConnect::set_has_auth_code() {
  _has_bits_[0] |= 0x00000001u;
}
void RequestConnect::clear_has_auth_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void RequestConnect::clear_auth_code() {
  auth_code_ = 0;
  clear_has_auth_code();
}
 ::google::protobuf::int32 RequestConnect::auth_code() const {
  // @@protoc_insertion_point(field_get:pb.remote.RequestConnect.auth_code)
  return auth_code_;
}
 void RequestConnect::set_auth_code(::google::protobuf::int32 value) {
  set_has_auth_code();
  auth_code_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.RequestConnect.auth_code)
}

// optional bool send_playlist_songs = 2;
bool RequestConnect::has_send_playlist_songs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RequestConnect::set_has_send_playlist_songs() {
  _has_bits_[0] |= 0x00000002u;
}
void RequestConnect::clear_has_send_playlist_songs() {
  _has_bits_[0] &= ~0x00000002u;
}
void RequestConnect::clear_send_playlist_songs() {
  send_playlist_songs_ = false;
  clear_has_send_playlist_songs();
}
 bool RequestConnect::send_playlist_songs() const {
  // @@protoc_insertion_point(field_get:pb.remote.RequestConnect.send_playlist_songs)
  return send_playlist_songs_;
}
 void RequestConnect::set_send_playlist_songs(bool value) {
  set_has_send_playlist_songs();
  send_playlist_songs_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.RequestConnect.send_playlist_songs)
}

// optional bool downloader = 3;
bool RequestConnect::has_downloader() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RequestConnect::set_has_downloader() {
  _has_bits_[0] |= 0x00000004u;
}
void RequestConnect::clear_has_downloader() {
  _has_bits_[0] &= ~0x00000004u;
}
void RequestConnect::clear_downloader() {
  downloader_ = false;
  clear_has_downloader();
}
 bool RequestConnect::downloader() const {
  // @@protoc_insertion_point(field_get:pb.remote.RequestConnect.downloader)
  return downloader_;
}
 void RequestConnect::set_downloader(bool value) {
  set_has_downloader();
  downloader_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.RequestConnect.downloader)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseDisconnect::kReasonDisconnectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseDisconnect::ResponseDisconnect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.ResponseDisconnect)
}

void ResponseDisconnect::InitAsDefaultInstance() {
}

ResponseDisconnect::ResponseDisconnect(const ResponseDisconnect& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.remote.ResponseDisconnect)
}

void ResponseDisconnect::SharedCtor() {
  _cached_size_ = 0;
  reason_disconnect_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseDisconnect::~ResponseDisconnect() {
  // @@protoc_insertion_point(destructor:pb.remote.ResponseDisconnect)
  SharedDtor();
}

void ResponseDisconnect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseDisconnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseDisconnect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseDisconnect_descriptor_;
}

const ResponseDisconnect& ResponseDisconnect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remotecontrolmessages_2eproto();
  return *default_instance_;
}

ResponseDisconnect* ResponseDisconnect::default_instance_ = NULL;

ResponseDisconnect* ResponseDisconnect::New(::google::protobuf::Arena* arena) const {
  ResponseDisconnect* n = new ResponseDisconnect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseDisconnect::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.ResponseDisconnect)
  reason_disconnect_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ResponseDisconnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.ResponseDisconnect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.remote.ReasonDisconnect reason_disconnect = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::remote::ReasonDisconnect_IsValid(value)) {
            set_reason_disconnect(static_cast< ::pb::remote::ReasonDisconnect >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.ResponseDisconnect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.ResponseDisconnect)
  return false;
#undef DO_
}

void ResponseDisconnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.ResponseDisconnect)
  // optional .pb.remote.ReasonDisconnect reason_disconnect = 1;
  if (has_reason_disconnect()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->reason_disconnect(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.ResponseDisconnect)
}

::google::protobuf::uint8* ResponseDisconnect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.ResponseDisconnect)
  // optional .pb.remote.ReasonDisconnect reason_disconnect = 1;
  if (has_reason_disconnect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->reason_disconnect(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.ResponseDisconnect)
  return target;
}

int ResponseDisconnect::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.ResponseDisconnect)
  int total_size = 0;

  // optional .pb.remote.ReasonDisconnect reason_disconnect = 1;
  if (has_reason_disconnect()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason_disconnect());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseDisconnect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.ResponseDisconnect)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponseDisconnect* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseDisconnect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.ResponseDisconnect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.ResponseDisconnect)
    MergeFrom(*source);
  }
}

void ResponseDisconnect::MergeFrom(const ResponseDisconnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.ResponseDisconnect)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reason_disconnect()) {
      set_reason_disconnect(from.reason_disconnect());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ResponseDisconnect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.ResponseDisconnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseDisconnect::CopyFrom(const ResponseDisconnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.ResponseDisconnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseDisconnect::IsInitialized() const {

  return true;
}

void ResponseDisconnect::Swap(ResponseDisconnect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseDisconnect::InternalSwap(ResponseDisconnect* other) {
  std::swap(reason_disconnect_, other->reason_disconnect_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseDisconnect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseDisconnect_descriptor_;
  metadata.reflection = ResponseDisconnect_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseDisconnect

// optional .pb.remote.ReasonDisconnect reason_disconnect = 1;
bool ResponseDisconnect::has_reason_disconnect() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ResponseDisconnect::set_has_reason_disconnect() {
  _has_bits_[0] |= 0x00000001u;
}
void ResponseDisconnect::clear_has_reason_disconnect() {
  _has_bits_[0] &= ~0x00000001u;
}
void ResponseDisconnect::clear_reason_disconnect() {
  reason_disconnect_ = 1;
  clear_has_reason_disconnect();
}
 ::pb::remote::ReasonDisconnect ResponseDisconnect::reason_disconnect() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseDisconnect.reason_disconnect)
  return static_cast< ::pb::remote::ReasonDisconnect >(reason_disconnect_);
}
 void ResponseDisconnect::set_reason_disconnect(::pb::remote::ReasonDisconnect value) {
  assert(::pb::remote::ReasonDisconnect_IsValid(value));
  set_has_reason_disconnect();
  reason_disconnect_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.ResponseDisconnect.reason_disconnect)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseActiveChanged::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseActiveChanged::ResponseActiveChanged()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.ResponseActiveChanged)
}

void ResponseActiveChanged::InitAsDefaultInstance() {
}

ResponseActiveChanged::ResponseActiveChanged(const ResponseActiveChanged& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.remote.ResponseActiveChanged)
}

void ResponseActiveChanged::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseActiveChanged::~ResponseActiveChanged() {
  // @@protoc_insertion_point(destructor:pb.remote.ResponseActiveChanged)
  SharedDtor();
}

void ResponseActiveChanged::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseActiveChanged::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseActiveChanged::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseActiveChanged_descriptor_;
}

const ResponseActiveChanged& ResponseActiveChanged::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remotecontrolmessages_2eproto();
  return *default_instance_;
}

ResponseActiveChanged* ResponseActiveChanged::default_instance_ = NULL;

ResponseActiveChanged* ResponseActiveChanged::New(::google::protobuf::Arena* arena) const {
  ResponseActiveChanged* n = new ResponseActiveChanged;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseActiveChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.ResponseActiveChanged)
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ResponseActiveChanged::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.ResponseActiveChanged)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.ResponseActiveChanged)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.ResponseActiveChanged)
  return false;
#undef DO_
}

void ResponseActiveChanged::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.ResponseActiveChanged)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.ResponseActiveChanged)
}

::google::protobuf::uint8* ResponseActiveChanged::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.ResponseActiveChanged)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.ResponseActiveChanged)
  return target;
}

int ResponseActiveChanged::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.ResponseActiveChanged)
  int total_size = 0;

  // optional int32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseActiveChanged::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.ResponseActiveChanged)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponseActiveChanged* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseActiveChanged>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.ResponseActiveChanged)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.ResponseActiveChanged)
    MergeFrom(*source);
  }
}

void ResponseActiveChanged::MergeFrom(const ResponseActiveChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.ResponseActiveChanged)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ResponseActiveChanged::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.ResponseActiveChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseActiveChanged::CopyFrom(const ResponseActiveChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.ResponseActiveChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseActiveChanged::IsInitialized() const {

  return true;
}

void ResponseActiveChanged::Swap(ResponseActiveChanged* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseActiveChanged::InternalSwap(ResponseActiveChanged* other) {
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseActiveChanged::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseActiveChanged_descriptor_;
  metadata.reflection = ResponseActiveChanged_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseActiveChanged

// optional int32 id = 1;
bool ResponseActiveChanged::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ResponseActiveChanged::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ResponseActiveChanged::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ResponseActiveChanged::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 ResponseActiveChanged::id() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseActiveChanged.id)
  return id_;
}
 void ResponseActiveChanged::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.ResponseActiveChanged.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestSetTrackPosition::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestSetTrackPosition::RequestSetTrackPosition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.RequestSetTrackPosition)
}

void RequestSetTrackPosition::InitAsDefaultInstance() {
}

RequestSetTrackPosition::RequestSetTrackPosition(const RequestSetTrackPosition& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.remote.RequestSetTrackPosition)
}

void RequestSetTrackPosition::SharedCtor() {
  _cached_size_ = 0;
  position_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestSetTrackPosition::~RequestSetTrackPosition() {
  // @@protoc_insertion_point(destructor:pb.remote.RequestSetTrackPosition)
  SharedDtor();
}

void RequestSetTrackPosition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestSetTrackPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestSetTrackPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestSetTrackPosition_descriptor_;
}

const RequestSetTrackPosition& RequestSetTrackPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remotecontrolmessages_2eproto();
  return *default_instance_;
}

RequestSetTrackPosition* RequestSetTrackPosition::default_instance_ = NULL;

RequestSetTrackPosition* RequestSetTrackPosition::New(::google::protobuf::Arena* arena) const {
  RequestSetTrackPosition* n = new RequestSetTrackPosition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestSetTrackPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.RequestSetTrackPosition)
  position_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RequestSetTrackPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.RequestSetTrackPosition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 position = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.RequestSetTrackPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.RequestSetTrackPosition)
  return false;
#undef DO_
}

void RequestSetTrackPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.RequestSetTrackPosition)
  // optional int32 position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->position(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.RequestSetTrackPosition)
}

::google::protobuf::uint8* RequestSetTrackPosition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.RequestSetTrackPosition)
  // optional int32 position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->position(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.RequestSetTrackPosition)
  return target;
}

int RequestSetTrackPosition::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.RequestSetTrackPosition)
  int total_size = 0;

  // optional int32 position = 1;
  if (has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->position());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestSetTrackPosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.RequestSetTrackPosition)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestSetTrackPosition* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestSetTrackPosition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.RequestSetTrackPosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.RequestSetTrackPosition)
    MergeFrom(*source);
  }
}

void RequestSetTrackPosition::MergeFrom(const RequestSetTrackPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.RequestSetTrackPosition)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      set_position(from.position());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RequestSetTrackPosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.RequestSetTrackPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestSetTrackPosition::CopyFrom(const RequestSetTrackPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.RequestSetTrackPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSetTrackPosition::IsInitialized() const {

  return true;
}

void RequestSetTrackPosition::Swap(RequestSetTrackPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestSetTrackPosition::InternalSwap(RequestSetTrackPosition* other) {
  std::swap(position_, other->position_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestSetTrackPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestSetTrackPosition_descriptor_;
  metadata.reflection = RequestSetTrackPosition_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestSetTrackPosition

// optional int32 position = 1;
bool RequestSetTrackPosition::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RequestSetTrackPosition::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
void RequestSetTrackPosition::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
void RequestSetTrackPosition::clear_position() {
  position_ = 0;
  clear_has_position();
}
 ::google::protobuf::int32 RequestSetTrackPosition::position() const {
  // @@protoc_insertion_point(field_get:pb.remote.RequestSetTrackPosition.position)
  return position_;
}
 void RequestSetTrackPosition::set_position(::google::protobuf::int32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.RequestSetTrackPosition.position)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestInsertUrls::kPlaylistIdFieldNumber;
const int RequestInsertUrls::kUrlsFieldNumber;
const int RequestInsertUrls::kPositionFieldNumber;
const int RequestInsertUrls::kPlayNowFieldNumber;
const int RequestInsertUrls::kEnqueueFieldNumber;
const int RequestInsertUrls::kSongsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestInsertUrls::RequestInsertUrls()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.RequestInsertUrls)
}

void RequestInsertUrls::InitAsDefaultInstance() {
}

RequestInsertUrls::RequestInsertUrls(const RequestInsertUrls& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.remote.RequestInsertUrls)
}

void RequestInsertUrls::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  playlist_id_ = 0;
  position_ = -1;
  play_now_ = false;
  enqueue_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestInsertUrls::~RequestInsertUrls() {
  // @@protoc_insertion_point(destructor:pb.remote.RequestInsertUrls)
  SharedDtor();
}

void RequestInsertUrls::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestInsertUrls::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestInsertUrls::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestInsertUrls_descriptor_;
}

const RequestInsertUrls& RequestInsertUrls::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remotecontrolmessages_2eproto();
  return *default_instance_;
}

RequestInsertUrls* RequestInsertUrls::default_instance_ = NULL;

RequestInsertUrls* RequestInsertUrls::New(::google::protobuf::Arena* arena) const {
  RequestInsertUrls* n = new RequestInsertUrls;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestInsertUrls::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.RequestInsertUrls)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RequestInsertUrls, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RequestInsertUrls*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 29u) {
    ZR_(play_now_, enqueue_);
    playlist_id_ = 0;
    position_ = -1;
  }

#undef ZR_HELPER_
#undef ZR_

  urls_.Clear();
  songs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RequestInsertUrls::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.RequestInsertUrls)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 playlist_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playlist_id_)));
          set_has_playlist_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_urls;
        break;
      }

      // repeated string urls = 2;
      case 2: {
        if (tag == 18) {
         parse_urls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_urls()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->urls(this->urls_size() - 1).data(),
            this->urls(this->urls_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.remote.RequestInsertUrls.urls");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_urls;
        if (input->ExpectTag(24)) goto parse_position;
        break;
      }

      // optional int32 position = 3 [default = -1];
      case 3: {
        if (tag == 24) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_play_now;
        break;
      }

      // optional bool play_now = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_play_now:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &play_now_)));
          set_has_play_now();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_enqueue;
        break;
      }

      // optional bool enqueue = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_enqueue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enqueue_)));
          set_has_enqueue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_songs;
        break;
      }

      // repeated .pb.remote.SongMetadata songs = 6;
      case 6: {
        if (tag == 50) {
         parse_songs:
          DO_(input->IncrementRecursionDepth());
         parse_loop_songs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_songs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_songs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.RequestInsertUrls)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.RequestInsertUrls)
  return false;
#undef DO_
}

void RequestInsertUrls::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.RequestInsertUrls)
  // optional int32 playlist_id = 1;
  if (has_playlist_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playlist_id(), output);
  }

  // repeated string urls = 2;
  for (int i = 0; i < this->urls_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->urls(i).data(), this->urls(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.RequestInsertUrls.urls");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->urls(i), output);
  }

  // optional int32 position = 3 [default = -1];
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->position(), output);
  }

  // optional bool play_now = 4 [default = false];
  if (has_play_now()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->play_now(), output);
  }

  // optional bool enqueue = 5 [default = false];
  if (has_enqueue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->enqueue(), output);
  }

  // repeated .pb.remote.SongMetadata songs = 6;
  for (unsigned int i = 0, n = this->songs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->songs(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.RequestInsertUrls)
}

::google::protobuf::uint8* RequestInsertUrls::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.RequestInsertUrls)
  // optional int32 playlist_id = 1;
  if (has_playlist_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playlist_id(), target);
  }

  // repeated string urls = 2;
  for (int i = 0; i < this->urls_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->urls(i).data(), this->urls(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.RequestInsertUrls.urls");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->urls(i), target);
  }

  // optional int32 position = 3 [default = -1];
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->position(), target);
  }

  // optional bool play_now = 4 [default = false];
  if (has_play_now()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->play_now(), target);
  }

  // optional bool enqueue = 5 [default = false];
  if (has_enqueue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->enqueue(), target);
  }

  // repeated .pb.remote.SongMetadata songs = 6;
  for (unsigned int i = 0, n = this->songs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->songs(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.RequestInsertUrls)
  return target;
}

int RequestInsertUrls::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.RequestInsertUrls)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 29u) {
    // optional int32 playlist_id = 1;
    if (has_playlist_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playlist_id());
    }

    // optional int32 position = 3 [default = -1];
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }

    // optional bool play_now = 4 [default = false];
    if (has_play_now()) {
      total_size += 1 + 1;
    }

    // optional bool enqueue = 5 [default = false];
    if (has_enqueue()) {
      total_size += 1 + 1;
    }

  }
  // repeated string urls = 2;
  total_size += 1 * this->urls_size();
  for (int i = 0; i < this->urls_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->urls(i));
  }

  // repeated .pb.remote.SongMetadata songs = 6;
  total_size += 1 * this->songs_size();
  for (int i = 0; i < this->songs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->songs(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestInsertUrls::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.RequestInsertUrls)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestInsertUrls* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestInsertUrls>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.RequestInsertUrls)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.RequestInsertUrls)
    MergeFrom(*source);
  }
}

void RequestInsertUrls::MergeFrom(const RequestInsertUrls& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.RequestInsertUrls)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  urls_.MergeFrom(from.urls_);
  songs_.MergeFrom(from.songs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playlist_id()) {
      set_playlist_id(from.playlist_id());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_play_now()) {
      set_play_now(from.play_now());
    }
    if (from.has_enqueue()) {
      set_enqueue(from.enqueue());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RequestInsertUrls::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.RequestInsertUrls)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestInsertUrls::CopyFrom(const RequestInsertUrls& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.RequestInsertUrls)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestInsertUrls::IsInitialized() const {

  return true;
}

void RequestInsertUrls::Swap(RequestInsertUrls* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestInsertUrls::InternalSwap(RequestInsertUrls* other) {
  std::swap(playlist_id_, other->playlist_id_);
  urls_.UnsafeArenaSwap(&other->urls_);
  std::swap(position_, other->position_);
  std::swap(play_now_, other->play_now_);
  std::swap(enqueue_, other->enqueue_);
  songs_.UnsafeArenaSwap(&other->songs_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestInsertUrls::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestInsertUrls_descriptor_;
  metadata.reflection = RequestInsertUrls_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestInsertUrls

// optional int32 playlist_id = 1;
bool RequestInsertUrls::has_playlist_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RequestInsertUrls::set_has_playlist_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RequestInsertUrls::clear_has_playlist_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RequestInsertUrls::clear_playlist_id() {
  playlist_id_ = 0;
  clear_has_playlist_id();
}
 ::google::protobuf::int32 RequestInsertUrls::playlist_id() const {
  // @@protoc_insertion_point(field_get:pb.remote.RequestInsertUrls.playlist_id)
  return playlist_id_;
}
 void RequestInsertUrls::set_playlist_id(::google::protobuf::int32 value) {
  set_has_playlist_id();
  playlist_id_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.RequestInsertUrls.playlist_id)
}

// repeated string urls = 2;
int RequestInsertUrls::urls_size() const {
  return urls_.size();
}
void RequestInsertUrls::clear_urls() {
  urls_.Clear();
}
 const ::std::string& RequestInsertUrls::urls(int index) const {
  // @@protoc_insertion_point(field_get:pb.remote.RequestInsertUrls.urls)
  return urls_.Get(index);
}
 ::std::string* RequestInsertUrls::mutable_urls(int index) {
  // @@protoc_insertion_point(field_mutable:pb.remote.RequestInsertUrls.urls)
  return urls_.Mutable(index);
}
 void RequestInsertUrls::set_urls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.remote.RequestInsertUrls.urls)
  urls_.Mutable(index)->assign(value);
}
 void RequestInsertUrls::set_urls(int index, const char* value) {
  urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.remote.RequestInsertUrls.urls)
}
 void RequestInsertUrls::set_urls(int index, const char* value, size_t size) {
  urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.remote.RequestInsertUrls.urls)
}
 ::std::string* RequestInsertUrls::add_urls() {
  // @@protoc_insertion_point(field_add_mutable:pb.remote.RequestInsertUrls.urls)
  return urls_.Add();
}
 void RequestInsertUrls::add_urls(const ::std::string& value) {
  urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.remote.RequestInsertUrls.urls)
}
 void RequestInsertUrls::add_urls(const char* value) {
  urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.remote.RequestInsertUrls.urls)
}
 void RequestInsertUrls::add_urls(const char* value, size_t size) {
  urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.remote.RequestInsertUrls.urls)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
RequestInsertUrls::urls() const {
  // @@protoc_insertion_point(field_list:pb.remote.RequestInsertUrls.urls)
  return urls_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
RequestInsertUrls::mutable_urls() {
  // @@protoc_insertion_point(field_mutable_list:pb.remote.RequestInsertUrls.urls)
  return &urls_;
}

// optional int32 position = 3 [default = -1];
bool RequestInsertUrls::has_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RequestInsertUrls::set_has_position() {
  _has_bits_[0] |= 0x00000004u;
}
void RequestInsertUrls::clear_has_position() {
  _has_bits_[0] &= ~0x00000004u;
}
void RequestInsertUrls::clear_position() {
  position_ = -1;
  clear_has_position();
}
 ::google::protobuf::int32 RequestInsertUrls::position() const {
  // @@protoc_insertion_point(field_get:pb.remote.RequestInsertUrls.position)
  return position_;
}
 void RequestInsertUrls::set_position(::google::protobuf::int32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.RequestInsertUrls.position)
}

// optional bool play_now = 4 [default = false];
bool RequestInsertUrls::has_play_now() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RequestInsertUrls::set_has_play_now() {
  _has_bits_[0] |= 0x00000008u;
}
void RequestInsertUrls::clear_has_play_now() {
  _has_bits_[0] &= ~0x00000008u;
}
void RequestInsertUrls::clear_play_now() {
  play_now_ = false;
  clear_has_play_now();
}
 bool RequestInsertUrls::play_now() const {
  // @@protoc_insertion_point(field_get:pb.remote.RequestInsertUrls.play_now)
  return play_now_;
}
 void RequestInsertUrls::set_play_now(bool value) {
  set_has_play_now();
  play_now_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.RequestInsertUrls.play_now)
}

// optional bool enqueue = 5 [default = false];
bool RequestInsertUrls::has_enqueue() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RequestInsertUrls::set_has_enqueue() {
  _has_bits_[0] |= 0x00000010u;
}
void RequestInsertUrls::clear_has_enqueue() {
  _has_bits_[0] &= ~0x00000010u;
}
void RequestInsertUrls::clear_enqueue() {
  enqueue_ = false;
  clear_has_enqueue();
}
 bool RequestInsertUrls::enqueue() const {
  // @@protoc_insertion_point(field_get:pb.remote.RequestInsertUrls.enqueue)
  return enqueue_;
}
 void RequestInsertUrls::set_enqueue(bool value) {
  set_has_enqueue();
  enqueue_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.RequestInsertUrls.enqueue)
}

// repeated .pb.remote.SongMetadata songs = 6;
int RequestInsertUrls::songs_size() const {
  return songs_.size();
}
void RequestInsertUrls::clear_songs() {
  songs_.Clear();
}
const ::pb::remote::SongMetadata& RequestInsertUrls::songs(int index) const {
  // @@protoc_insertion_point(field_get:pb.remote.RequestInsertUrls.songs)
  return songs_.Get(index);
}
::pb::remote::SongMetadata* RequestInsertUrls::mutable_songs(int index) {
  // @@protoc_insertion_point(field_mutable:pb.remote.RequestInsertUrls.songs)
  return songs_.Mutable(index);
}
::pb::remote::SongMetadata* RequestInsertUrls::add_songs() {
  // @@protoc_insertion_point(field_add:pb.remote.RequestInsertUrls.songs)
  return songs_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb::remote::SongMetadata >*
RequestInsertUrls::mutable_songs() {
  // @@protoc_insertion_point(field_mutable_list:pb.remote.RequestInsertUrls.songs)
  return &songs_;
}
const ::google::protobuf::RepeatedPtrField< ::pb::remote::SongMetadata >&
RequestInsertUrls::songs() const {
  // @@protoc_insertion_point(field_list:pb.remote.RequestInsertUrls.songs)
  return songs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestRemoveSongs::kPlaylistIdFieldNumber;
const int RequestRemoveSongs::kSongsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestRemoveSongs::RequestRemoveSongs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.RequestRemoveSongs)
}

void RequestRemoveSongs::InitAsDefaultInstance() {
}

RequestRemoveSongs::RequestRemoveSongs(const RequestRemoveSongs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.remote.RequestRemoveSongs)
}

void RequestRemoveSongs::SharedCtor() {
  _cached_size_ = 0;
  playlist_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestRemoveSongs::~RequestRemoveSongs() {
  // @@protoc_insertion_point(destructor:pb.remote.RequestRemoveSongs)
  SharedDtor();
}

void RequestRemoveSongs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestRemoveSongs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestRemoveSongs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestRemoveSongs_descriptor_;
}

const RequestRemoveSongs& RequestRemoveSongs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remotecontrolmessages_2eproto();
  return *default_instance_;
}

RequestRemoveSongs* RequestRemoveSongs::default_instance_ = NULL;

RequestRemoveSongs* RequestRemoveSongs::New(::google::protobuf::Arena* arena) const {
  RequestRemoveSongs* n = new RequestRemoveSongs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestRemoveSongs::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.RequestRemoveSongs)
  playlist_id_ = 0;
  songs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RequestRemoveSongs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.RequestRemoveSongs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 playlist_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playlist_id_)));
          set_has_playlist_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_songs;
        break;
      }

      // repeated int32 songs = 2;
      case 2: {
        if (tag == 16) {
         parse_songs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_songs())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_songs())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_songs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.RequestRemoveSongs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.RequestRemoveSongs)
  return false;
#undef DO_
}

void RequestRemoveSongs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.RequestRemoveSongs)
  // optional int32 playlist_id = 1;
  if (has_playlist_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playlist_id(), output);
  }

  // repeated int32 songs = 2;
  for (int i = 0; i < this->songs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->songs(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.RequestRemoveSongs)
}

::google::protobuf::uint8* RequestRemoveSongs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.RequestRemoveSongs)
  // optional int32 playlist_id = 1;
  if (has_playlist_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playlist_id(), target);
  }

  // repeated int32 songs = 2;
  for (int i = 0; i < this->songs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->songs(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.RequestRemoveSongs)
  return target;
}

int RequestRemoveSongs::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.RequestRemoveSongs)
  int total_size = 0;

  // optional int32 playlist_id = 1;
  if (has_playlist_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->playlist_id());
  }

  // repeated int32 songs = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->songs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->songs(i));
    }
    total_size += 1 * this->songs_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestRemoveSongs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.RequestRemoveSongs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestRemoveSongs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestRemoveSongs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.RequestRemoveSongs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.RequestRemoveSongs)
    MergeFrom(*source);
  }
}

void RequestRemoveSongs::MergeFrom(const RequestRemoveSongs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.RequestRemoveSongs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  songs_.MergeFrom(from.songs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playlist_id()) {
      set_playlist_id(from.playlist_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RequestRemoveSongs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.RequestRemoveSongs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestRemoveSongs::CopyFrom(const RequestRemoveSongs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.RequestRemoveSongs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRemoveSongs::IsInitialized() const {

  return true;
}

void RequestRemoveSongs::Swap(RequestRemoveSongs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestRemoveSongs::InternalSwap(RequestRemoveSongs* other) {
  std::swap(playlist_id_, other->playlist_id_);
  songs_.UnsafeArenaSwap(&other->songs_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestRemoveSongs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestRemoveSongs_descriptor_;
  metadata.reflection = RequestRemoveSongs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestRemoveSongs

// optional int32 playlist_id = 1;
bool RequestRemoveSongs::has_playlist_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RequestRemoveSongs::set_has_playlist_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RequestRemoveSongs::clear_has_playlist_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RequestRemoveSongs::clear_playlist_id() {
  playlist_id_ = 0;
  clear_has_playlist_id();
}
 ::google::protobuf::int32 RequestRemoveSongs::playlist_id() const {
  // @@protoc_insertion_point(field_get:pb.remote.RequestRemoveSongs.playlist_id)
  return playlist_id_;
}
 void RequestRemoveSongs::set_playlist_id(::google::protobuf::int32 value) {
  set_has_playlist_id();
  playlist_id_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.RequestRemoveSongs.playlist_id)
}

// repeated int32 songs = 2;
int RequestRemoveSongs::songs_size() const {
  return songs_.size();
}
void RequestRemoveSongs::clear_songs() {
  songs_.Clear();
}
 ::google::protobuf::int32 RequestRemoveSongs::songs(int index) const {
  // @@protoc_insertion_point(field_get:pb.remote.RequestRemoveSongs.songs)
  return songs_.Get(index);
}
 void RequestRemoveSongs::set_songs(int index, ::google::protobuf::int32 value) {
  songs_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.remote.RequestRemoveSongs.songs)
}
 void RequestRemoveSongs::add_songs(::google::protobuf::int32 value) {
  songs_.Add(value);
  // @@protoc_insertion_point(field_add:pb.remote.RequestRemoveSongs.songs)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RequestRemoveSongs::songs() const {
  // @@protoc_insertion_point(field_list:pb.remote.RequestRemoveSongs.songs)
  return songs_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RequestRemoveSongs::mutable_songs() {
  // @@protoc_insertion_point(field_mutable_list:pb.remote.RequestRemoveSongs.songs)
  return &songs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestOpenPlaylist::kPlaylistIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestOpenPlaylist::RequestOpenPlaylist()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.RequestOpenPlaylist)
}

void RequestOpenPlaylist::InitAsDefaultInstance() {
}

RequestOpenPlaylist::RequestOpenPlaylist(const RequestOpenPlaylist& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.remote.RequestOpenPlaylist)
}

void RequestOpenPlaylist::SharedCtor() {
  _cached_size_ = 0;
  playlist_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestOpenPlaylist::~RequestOpenPlaylist() {
  // @@protoc_insertion_point(destructor:pb.remote.RequestOpenPlaylist)
  SharedDtor();
}

void RequestOpenPlaylist::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestOpenPlaylist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestOpenPlaylist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestOpenPlaylist_descriptor_;
}

const RequestOpenPlaylist& RequestOpenPlaylist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remotecontrolmessages_2eproto();
  return *default_instance_;
}

RequestOpenPlaylist* RequestOpenPlaylist::default_instance_ = NULL;

RequestOpenPlaylist* RequestOpenPlaylist::New(::google::protobuf::Arena* arena) const {
  RequestOpenPlaylist* n = new RequestOpenPlaylist;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestOpenPlaylist::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.RequestOpenPlaylist)
  playlist_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RequestOpenPlaylist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.RequestOpenPlaylist)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 playlist_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playlist_id_)));
          set_has_playlist_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.RequestOpenPlaylist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.RequestOpenPlaylist)
  return false;
#undef DO_
}

void RequestOpenPlaylist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.RequestOpenPlaylist)
  // optional int32 playlist_id = 1;
  if (has_playlist_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playlist_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.RequestOpenPlaylist)
}

::google::protobuf::uint8* RequestOpenPlaylist::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.RequestOpenPlaylist)
  // optional int32 playlist_id = 1;
  if (has_playlist_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playlist_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.RequestOpenPlaylist)
  return target;
}

int RequestOpenPlaylist::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.RequestOpenPlaylist)
  int total_size = 0;

  // optional int32 playlist_id = 1;
  if (has_playlist_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->playlist_id());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestOpenPlaylist::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.RequestOpenPlaylist)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestOpenPlaylist* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestOpenPlaylist>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.RequestOpenPlaylist)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.RequestOpenPlaylist)
    MergeFrom(*source);
  }
}

void RequestOpenPlaylist::MergeFrom(const RequestOpenPlaylist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.RequestOpenPlaylist)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playlist_id()) {
      set_playlist_id(from.playlist_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RequestOpenPlaylist::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.RequestOpenPlaylist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestOpenPlaylist::CopyFrom(const RequestOpenPlaylist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.RequestOpenPlaylist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestOpenPlaylist::IsInitialized() const {

  return true;
}

void RequestOpenPlaylist::Swap(RequestOpenPlaylist* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestOpenPlaylist::InternalSwap(RequestOpenPlaylist* other) {
  std::swap(playlist_id_, other->playlist_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestOpenPlaylist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestOpenPlaylist_descriptor_;
  metadata.reflection = RequestOpenPlaylist_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestOpenPlaylist

// optional int32 playlist_id = 1;
bool RequestOpenPlaylist::has_playlist_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RequestOpenPlaylist::set_has_playlist_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RequestOpenPlaylist::clear_has_playlist_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RequestOpenPlaylist::clear_playlist_id() {
  playlist_id_ = 0;
  clear_has_playlist_id();
}
 ::google::protobuf::int32 RequestOpenPlaylist::playlist_id() const {
  // @@protoc_insertion_point(field_get:pb.remote.RequestOpenPlaylist.playlist_id)
  return playlist_id_;
}
 void RequestOpenPlaylist::set_playlist_id(::google::protobuf::int32 value) {
  set_has_playlist_id();
  playlist_id_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.RequestOpenPlaylist.playlist_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestClosePlaylist::kPlaylistIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestClosePlaylist::RequestClosePlaylist()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.RequestClosePlaylist)
}

void RequestClosePlaylist::InitAsDefaultInstance() {
}

RequestClosePlaylist::RequestClosePlaylist(const RequestClosePlaylist& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.remote.RequestClosePlaylist)
}

void RequestClosePlaylist::SharedCtor() {
  _cached_size_ = 0;
  playlist_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestClosePlaylist::~RequestClosePlaylist() {
  // @@protoc_insertion_point(destructor:pb.remote.RequestClosePlaylist)
  SharedDtor();
}

void RequestClosePlaylist::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestClosePlaylist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestClosePlaylist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestClosePlaylist_descriptor_;
}

const RequestClosePlaylist& RequestClosePlaylist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remotecontrolmessages_2eproto();
  return *default_instance_;
}

RequestClosePlaylist* RequestClosePlaylist::default_instance_ = NULL;

RequestClosePlaylist* RequestClosePlaylist::New(::google::protobuf::Arena* arena) const {
  RequestClosePlaylist* n = new RequestClosePlaylist;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestClosePlaylist::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.RequestClosePlaylist)
  playlist_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RequestClosePlaylist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.RequestClosePlaylist)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 playlist_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playlist_id_)));
          set_has_playlist_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.RequestClosePlaylist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.RequestClosePlaylist)
  return false;
#undef DO_
}

void RequestClosePlaylist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.RequestClosePlaylist)
  // optional int32 playlist_id = 1;
  if (has_playlist_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playlist_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.RequestClosePlaylist)
}

::google::protobuf::uint8* RequestClosePlaylist::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.RequestClosePlaylist)
  // optional int32 playlist_id = 1;
  if (has_playlist_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playlist_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.RequestClosePlaylist)
  return target;
}

int RequestClosePlaylist::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.RequestClosePlaylist)
  int total_size = 0;

  // optional int32 playlist_id = 1;
  if (has_playlist_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->playlist_id());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestClosePlaylist::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.RequestClosePlaylist)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestClosePlaylist* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestClosePlaylist>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.RequestClosePlaylist)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.RequestClosePlaylist)
    MergeFrom(*source);
  }
}

void RequestClosePlaylist::MergeFrom(const RequestClosePlaylist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.RequestClosePlaylist)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playlist_id()) {
      set_playlist_id(from.playlist_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RequestClosePlaylist::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.RequestClosePlaylist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestClosePlaylist::CopyFrom(const RequestClosePlaylist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.RequestClosePlaylist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestClosePlaylist::IsInitialized() const {

  return true;
}

void RequestClosePlaylist::Swap(RequestClosePlaylist* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestClosePlaylist::InternalSwap(RequestClosePlaylist* other) {
  std::swap(playlist_id_, other->playlist_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestClosePlaylist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestClosePlaylist_descriptor_;
  metadata.reflection = RequestClosePlaylist_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestClosePlaylist

// optional int32 playlist_id = 1;
bool RequestClosePlaylist::has_playlist_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RequestClosePlaylist::set_has_playlist_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RequestClosePlaylist::clear_has_playlist_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RequestClosePlaylist::clear_playlist_id() {
  playlist_id_ = 0;
  clear_has_playlist_id();
}
 ::google::protobuf::int32 RequestClosePlaylist::playlist_id() const {
  // @@protoc_insertion_point(field_get:pb.remote.RequestClosePlaylist.playlist_id)
  return playlist_id_;
}
 void RequestClosePlaylist::set_playlist_id(::google::protobuf::int32 value) {
  set_has_playlist_id();
  playlist_id_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.RequestClosePlaylist.playlist_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseLyrics::kLyricsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseLyrics::ResponseLyrics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.ResponseLyrics)
}

void ResponseLyrics::InitAsDefaultInstance() {
}

ResponseLyrics::ResponseLyrics(const ResponseLyrics& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.remote.ResponseLyrics)
}

void ResponseLyrics::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseLyrics::~ResponseLyrics() {
  // @@protoc_insertion_point(destructor:pb.remote.ResponseLyrics)
  SharedDtor();
}

void ResponseLyrics::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseLyrics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseLyrics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseLyrics_descriptor_;
}

const ResponseLyrics& ResponseLyrics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remotecontrolmessages_2eproto();
  return *default_instance_;
}

ResponseLyrics* ResponseLyrics::default_instance_ = NULL;

ResponseLyrics* ResponseLyrics::New(::google::protobuf::Arena* arena) const {
  ResponseLyrics* n = new ResponseLyrics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseLyrics::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.ResponseLyrics)
  lyrics_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ResponseLyrics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.ResponseLyrics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.remote.Lyric lyrics = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_lyrics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_lyrics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_lyrics;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.ResponseLyrics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.ResponseLyrics)
  return false;
#undef DO_
}

void ResponseLyrics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.ResponseLyrics)
  // repeated .pb.remote.Lyric lyrics = 1;
  for (unsigned int i = 0, n = this->lyrics_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lyrics(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.ResponseLyrics)
}

::google::protobuf::uint8* ResponseLyrics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.ResponseLyrics)
  // repeated .pb.remote.Lyric lyrics = 1;
  for (unsigned int i = 0, n = this->lyrics_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->lyrics(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.ResponseLyrics)
  return target;
}

int ResponseLyrics::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.ResponseLyrics)
  int total_size = 0;

  // repeated .pb.remote.Lyric lyrics = 1;
  total_size += 1 * this->lyrics_size();
  for (int i = 0; i < this->lyrics_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lyrics(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseLyrics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.ResponseLyrics)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponseLyrics* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseLyrics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.ResponseLyrics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.ResponseLyrics)
    MergeFrom(*source);
  }
}

void ResponseLyrics::MergeFrom(const ResponseLyrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.ResponseLyrics)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  lyrics_.MergeFrom(from.lyrics_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ResponseLyrics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.ResponseLyrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseLyrics::CopyFrom(const ResponseLyrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.ResponseLyrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseLyrics::IsInitialized() const {

  return true;
}

void ResponseLyrics::Swap(ResponseLyrics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseLyrics::InternalSwap(ResponseLyrics* other) {
  lyrics_.UnsafeArenaSwap(&other->lyrics_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseLyrics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseLyrics_descriptor_;
  metadata.reflection = ResponseLyrics_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseLyrics

// repeated .pb.remote.Lyric lyrics = 1;
int ResponseLyrics::lyrics_size() const {
  return lyrics_.size();
}
void ResponseLyrics::clear_lyrics() {
  lyrics_.Clear();
}
const ::pb::remote::Lyric& ResponseLyrics::lyrics(int index) const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseLyrics.lyrics)
  return lyrics_.Get(index);
}
::pb::remote::Lyric* ResponseLyrics::mutable_lyrics(int index) {
  // @@protoc_insertion_point(field_mutable:pb.remote.ResponseLyrics.lyrics)
  return lyrics_.Mutable(index);
}
::pb::remote::Lyric* ResponseLyrics::add_lyrics() {
  // @@protoc_insertion_point(field_add:pb.remote.ResponseLyrics.lyrics)
  return lyrics_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb::remote::Lyric >*
ResponseLyrics::mutable_lyrics() {
  // @@protoc_insertion_point(field_mutable_list:pb.remote.ResponseLyrics.lyrics)
  return &lyrics_;
}
const ::google::protobuf::RepeatedPtrField< ::pb::remote::Lyric >&
ResponseLyrics::lyrics() const {
  // @@protoc_insertion_point(field_list:pb.remote.ResponseLyrics.lyrics)
  return lyrics_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Lyric::kIdFieldNumber;
const int Lyric::kTitleFieldNumber;
const int Lyric::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Lyric::Lyric()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.Lyric)
}

void Lyric::InitAsDefaultInstance() {
}

Lyric::Lyric(const Lyric& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.remote.Lyric)
}

void Lyric::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Lyric::~Lyric() {
  // @@protoc_insertion_point(destructor:pb.remote.Lyric)
  SharedDtor();
}

void Lyric::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Lyric::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lyric::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Lyric_descriptor_;
}

const Lyric& Lyric::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remotecontrolmessages_2eproto();
  return *default_instance_;
}

Lyric* Lyric::default_instance_ = NULL;

Lyric* Lyric::New(::google::protobuf::Arena* arena) const {
  Lyric* n = new Lyric;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Lyric::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.Lyric)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_title()) {
      title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_content()) {
      content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Lyric::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.Lyric)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.remote.Lyric.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }

      // optional string title = 2;
      case 2: {
        if (tag == 18) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.remote.Lyric.title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // optional string content = 3;
      case 3: {
        if (tag == 26) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.remote.Lyric.content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.Lyric)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.Lyric)
  return false;
#undef DO_
}

void Lyric::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.Lyric)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.Lyric.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.Lyric.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.Lyric.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->content(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.Lyric)
}

::google::protobuf::uint8* Lyric::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.Lyric)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.Lyric.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.Lyric.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.Lyric.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.Lyric)
  return target;
}

int Lyric::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.Lyric)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lyric::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.Lyric)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Lyric* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Lyric>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.Lyric)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.Lyric)
    MergeFrom(*source);
  }
}

void Lyric::MergeFrom(const Lyric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.Lyric)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_title()) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (from.has_content()) {
      set_has_content();
      content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Lyric::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.Lyric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lyric::CopyFrom(const Lyric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.Lyric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lyric::IsInitialized() const {

  return true;
}

void Lyric::Swap(Lyric* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Lyric::InternalSwap(Lyric* other) {
  id_.Swap(&other->id_);
  title_.Swap(&other->title_);
  content_.Swap(&other->content_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Lyric::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Lyric_descriptor_;
  metadata.reflection = Lyric_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Lyric

// optional string id = 1;
bool Lyric::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Lyric::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Lyric::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Lyric::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& Lyric::id() const {
  // @@protoc_insertion_point(field_get:pb.remote.Lyric.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Lyric::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.remote.Lyric.id)
}
 void Lyric::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.remote.Lyric.id)
}
 void Lyric::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.remote.Lyric.id)
}
 ::std::string* Lyric::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:pb.remote.Lyric.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Lyric::release_id() {
  // @@protoc_insertion_point(field_release:pb.remote.Lyric.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Lyric::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Lyric.id)
}

// optional string title = 2;
bool Lyric::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Lyric::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
void Lyric::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
void Lyric::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
 const ::std::string& Lyric::title() const {
  // @@protoc_insertion_point(field_get:pb.remote.Lyric.title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Lyric::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.remote.Lyric.title)
}
 void Lyric::set_title(const char* value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.remote.Lyric.title)
}
 void Lyric::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.remote.Lyric.title)
}
 ::std::string* Lyric::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:pb.remote.Lyric.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Lyric::release_title() {
  // @@protoc_insertion_point(field_release:pb.remote.Lyric.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Lyric::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Lyric.title)
}

// optional string content = 3;
bool Lyric::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Lyric::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
void Lyric::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
void Lyric::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
 const ::std::string& Lyric::content() const {
  // @@protoc_insertion_point(field_get:pb.remote.Lyric.content)
  return content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Lyric::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.remote.Lyric.content)
}
 void Lyric::set_content(const char* value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.remote.Lyric.content)
}
 void Lyric::set_content(const char* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.remote.Lyric.content)
}
 ::std::string* Lyric::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:pb.remote.Lyric.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Lyric::release_content() {
  // @@protoc_insertion_point(field_release:pb.remote.Lyric.content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Lyric::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Lyric.content)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestDownloadSongs::kDownloadItemFieldNumber;
const int RequestDownloadSongs::kPlaylistIdFieldNumber;
const int RequestDownloadSongs::kUrlsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestDownloadSongs::RequestDownloadSongs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.RequestDownloadSongs)
}

void RequestDownloadSongs::InitAsDefaultInstance() {
}

RequestDownloadSongs::RequestDownloadSongs(const RequestDownloadSongs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.remote.RequestDownloadSongs)
}

void RequestDownloadSongs::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  download_item_ = 1;
  playlist_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestDownloadSongs::~RequestDownloadSongs() {
  // @@protoc_insertion_point(destructor:pb.remote.RequestDownloadSongs)
  SharedDtor();
}

void RequestDownloadSongs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestDownloadSongs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestDownloadSongs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestDownloadSongs_descriptor_;
}

const RequestDownloadSongs& RequestDownloadSongs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remotecontrolmessages_2eproto();
  return *default_instance_;
}

RequestDownloadSongs* RequestDownloadSongs::default_instance_ = NULL;

RequestDownloadSongs* RequestDownloadSongs::New(::google::protobuf::Arena* arena) const {
  RequestDownloadSongs* n = new RequestDownloadSongs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestDownloadSongs::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.RequestDownloadSongs)
  if (_has_bits_[0 / 32] & 3u) {
    download_item_ = 1;
    playlist_id_ = 0;
  }
  urls_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RequestDownloadSongs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.RequestDownloadSongs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.remote.DownloadItem download_item = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::remote::DownloadItem_IsValid(value)) {
            set_download_item(static_cast< ::pb::remote::DownloadItem >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_playlist_id;
        break;
      }

      // optional int32 playlist_id = 2;
      case 2: {
        if (tag == 16) {
         parse_playlist_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playlist_id_)));
          set_has_playlist_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_urls;
        break;
      }

      // repeated string urls = 3;
      case 3: {
        if (tag == 26) {
         parse_urls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_urls()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->urls(this->urls_size() - 1).data(),
            this->urls(this->urls_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.remote.RequestDownloadSongs.urls");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_urls;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.RequestDownloadSongs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.RequestDownloadSongs)
  return false;
#undef DO_
}

void RequestDownloadSongs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.RequestDownloadSongs)
  // optional .pb.remote.DownloadItem download_item = 1;
  if (has_download_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->download_item(), output);
  }

  // optional int32 playlist_id = 2;
  if (has_playlist_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->playlist_id(), output);
  }

  // repeated string urls = 3;
  for (int i = 0; i < this->urls_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->urls(i).data(), this->urls(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.RequestDownloadSongs.urls");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->urls(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.RequestDownloadSongs)
}

::google::protobuf::uint8* RequestDownloadSongs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.RequestDownloadSongs)
  // optional .pb.remote.DownloadItem download_item = 1;
  if (has_download_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->download_item(), target);
  }

  // optional int32 playlist_id = 2;
  if (has_playlist_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->playlist_id(), target);
  }

  // repeated string urls = 3;
  for (int i = 0; i < this->urls_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->urls(i).data(), this->urls(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.RequestDownloadSongs.urls");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->urls(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.RequestDownloadSongs)
  return target;
}

int RequestDownloadSongs::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.RequestDownloadSongs)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .pb.remote.DownloadItem download_item = 1;
    if (has_download_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->download_item());
    }

    // optional int32 playlist_id = 2;
    if (has_playlist_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playlist_id());
    }

  }
  // repeated string urls = 3;
  total_size += 1 * this->urls_size();
  for (int i = 0; i < this->urls_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->urls(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestDownloadSongs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.RequestDownloadSongs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestDownloadSongs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestDownloadSongs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.RequestDownloadSongs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.RequestDownloadSongs)
    MergeFrom(*source);
  }
}

void RequestDownloadSongs::MergeFrom(const RequestDownloadSongs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.RequestDownloadSongs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  urls_.MergeFrom(from.urls_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_download_item()) {
      set_download_item(from.download_item());
    }
    if (from.has_playlist_id()) {
      set_playlist_id(from.playlist_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RequestDownloadSongs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.RequestDownloadSongs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestDownloadSongs::CopyFrom(const RequestDownloadSongs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.RequestDownloadSongs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestDownloadSongs::IsInitialized() const {

  return true;
}

void RequestDownloadSongs::Swap(RequestDownloadSongs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestDownloadSongs::InternalSwap(RequestDownloadSongs* other) {
  std::swap(download_item_, other->download_item_);
  std::swap(playlist_id_, other->playlist_id_);
  urls_.UnsafeArenaSwap(&other->urls_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestDownloadSongs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestDownloadSongs_descriptor_;
  metadata.reflection = RequestDownloadSongs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestDownloadSongs

// optional .pb.remote.DownloadItem download_item = 1;
bool RequestDownloadSongs::has_download_item() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RequestDownloadSongs::set_has_download_item() {
  _has_bits_[0] |= 0x00000001u;
}
void RequestDownloadSongs::clear_has_download_item() {
  _has_bits_[0] &= ~0x00000001u;
}
void RequestDownloadSongs::clear_download_item() {
  download_item_ = 1;
  clear_has_download_item();
}
 ::pb::remote::DownloadItem RequestDownloadSongs::download_item() const {
  // @@protoc_insertion_point(field_get:pb.remote.RequestDownloadSongs.download_item)
  return static_cast< ::pb::remote::DownloadItem >(download_item_);
}
 void RequestDownloadSongs::set_download_item(::pb::remote::DownloadItem value) {
  assert(::pb::remote::DownloadItem_IsValid(value));
  set_has_download_item();
  download_item_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.RequestDownloadSongs.download_item)
}

// optional int32 playlist_id = 2;
bool RequestDownloadSongs::has_playlist_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RequestDownloadSongs::set_has_playlist_id() {
  _has_bits_[0] |= 0x00000002u;
}
void RequestDownloadSongs::clear_has_playlist_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void RequestDownloadSongs::clear_playlist_id() {
  playlist_id_ = 0;
  clear_has_playlist_id();
}
 ::google::protobuf::int32 RequestDownloadSongs::playlist_id() const {
  // @@protoc_insertion_point(field_get:pb.remote.RequestDownloadSongs.playlist_id)
  return playlist_id_;
}
 void RequestDownloadSongs::set_playlist_id(::google::protobuf::int32 value) {
  set_has_playlist_id();
  playlist_id_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.RequestDownloadSongs.playlist_id)
}

// repeated string urls = 3;
int RequestDownloadSongs::urls_size() const {
  return urls_.size();
}
void RequestDownloadSongs::clear_urls() {
  urls_.Clear();
}
 const ::std::string& RequestDownloadSongs::urls(int index) const {
  // @@protoc_insertion_point(field_get:pb.remote.RequestDownloadSongs.urls)
  return urls_.Get(index);
}
 ::std::string* RequestDownloadSongs::mutable_urls(int index) {
  // @@protoc_insertion_point(field_mutable:pb.remote.RequestDownloadSongs.urls)
  return urls_.Mutable(index);
}
 void RequestDownloadSongs::set_urls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.remote.RequestDownloadSongs.urls)
  urls_.Mutable(index)->assign(value);
}
 void RequestDownloadSongs::set_urls(int index, const char* value) {
  urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.remote.RequestDownloadSongs.urls)
}
 void RequestDownloadSongs::set_urls(int index, const char* value, size_t size) {
  urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.remote.RequestDownloadSongs.urls)
}
 ::std::string* RequestDownloadSongs::add_urls() {
  // @@protoc_insertion_point(field_add_mutable:pb.remote.RequestDownloadSongs.urls)
  return urls_.Add();
}
 void RequestDownloadSongs::add_urls(const ::std::string& value) {
  urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.remote.RequestDownloadSongs.urls)
}
 void RequestDownloadSongs::add_urls(const char* value) {
  urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.remote.RequestDownloadSongs.urls)
}
 void RequestDownloadSongs::add_urls(const char* value, size_t size) {
  urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.remote.RequestDownloadSongs.urls)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
RequestDownloadSongs::urls() const {
  // @@protoc_insertion_point(field_list:pb.remote.RequestDownloadSongs.urls)
  return urls_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
RequestDownloadSongs::mutable_urls() {
  // @@protoc_insertion_point(field_mutable_list:pb.remote.RequestDownloadSongs.urls)
  return &urls_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseSongFileChunk::kChunkNumberFieldNumber;
const int ResponseSongFileChunk::kChunkCountFieldNumber;
const int ResponseSongFileChunk::kFileNumberFieldNumber;
const int ResponseSongFileChunk::kFileCountFieldNumber;
const int ResponseSongFileChunk::kSongMetadataFieldNumber;
const int ResponseSongFileChunk::kDataFieldNumber;
const int ResponseSongFileChunk::kSizeFieldNumber;
const int ResponseSongFileChunk::kFileHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseSongFileChunk::ResponseSongFileChunk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.ResponseSongFileChunk)
}

void ResponseSongFileChunk::InitAsDefaultInstance() {
  song_metadata_ = const_cast< ::pb::remote::SongMetadata*>(&::pb::remote::SongMetadata::default_instance());
}

ResponseSongFileChunk::ResponseSongFileChunk(const ResponseSongFileChunk& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.remote.ResponseSongFileChunk)
}

void ResponseSongFileChunk::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  chunk_number_ = 0;
  chunk_count_ = 0;
  file_number_ = 0;
  file_count_ = 0;
  song_metadata_ = NULL;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_ = 0;
  file_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseSongFileChunk::~ResponseSongFileChunk() {
  // @@protoc_insertion_point(destructor:pb.remote.ResponseSongFileChunk)
  SharedDtor();
}

void ResponseSongFileChunk::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete song_metadata_;
  }
}

void ResponseSongFileChunk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseSongFileChunk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseSongFileChunk_descriptor_;
}

const ResponseSongFileChunk& ResponseSongFileChunk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remotecontrolmessages_2eproto();
  return *default_instance_;
}

ResponseSongFileChunk* ResponseSongFileChunk::default_instance_ = NULL;

ResponseSongFileChunk* ResponseSongFileChunk::New(::google::protobuf::Arena* arena) const {
  ResponseSongFileChunk* n = new ResponseSongFileChunk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseSongFileChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.ResponseSongFileChunk)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ResponseSongFileChunk, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ResponseSongFileChunk*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(chunk_number_, file_count_);
    if (has_song_metadata()) {
      if (song_metadata_ != NULL) song_metadata_->::pb::remote::SongMetadata::Clear();
    }
    if (has_data()) {
      data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    size_ = 0;
    if (has_file_hash()) {
      file_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ResponseSongFileChunk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.ResponseSongFileChunk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chunk_number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chunk_number_)));
          set_has_chunk_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_chunk_count;
        break;
      }

      // optional int32 chunk_count = 2;
      case 2: {
        if (tag == 16) {
         parse_chunk_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chunk_count_)));
          set_has_chunk_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_file_number;
        break;
      }

      // optional int32 file_number = 3;
      case 3: {
        if (tag == 24) {
         parse_file_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &file_number_)));
          set_has_file_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_file_count;
        break;
      }

      // optional int32 file_count = 4;
      case 4: {
        if (tag == 32) {
         parse_file_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &file_count_)));
          set_has_file_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_song_metadata;
        break;
      }

      // optional .pb.remote.SongMetadata song_metadata = 6;
      case 6: {
        if (tag == 50) {
         parse_song_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_song_metadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_data;
        break;
      }

      // optional bytes data = 7;
      case 7: {
        if (tag == 58) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_size;
        break;
      }

      // optional int32 size = 8;
      case 8: {
        if (tag == 64) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_file_hash;
        break;
      }

      // optional bytes file_hash = 9;
      case 9: {
        if (tag == 74) {
         parse_file_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file_hash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.ResponseSongFileChunk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.ResponseSongFileChunk)
  return false;
#undef DO_
}

void ResponseSongFileChunk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.ResponseSongFileChunk)
  // optional int32 chunk_number = 1;
  if (has_chunk_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chunk_number(), output);
  }

  // optional int32 chunk_count = 2;
  if (has_chunk_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chunk_count(), output);
  }

  // optional int32 file_number = 3;
  if (has_file_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->file_number(), output);
  }

  // optional int32 file_count = 4;
  if (has_file_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->file_count(), output);
  }

  // optional .pb.remote.SongMetadata song_metadata = 6;
  if (has_song_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->song_metadata_, output);
  }

  // optional bytes data = 7;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->data(), output);
  }

  // optional int32 size = 8;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->size(), output);
  }

  // optional bytes file_hash = 9;
  if (has_file_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->file_hash(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.ResponseSongFileChunk)
}

::google::protobuf::uint8* ResponseSongFileChunk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.ResponseSongFileChunk)
  // optional int32 chunk_number = 1;
  if (has_chunk_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chunk_number(), target);
  }

  // optional int32 chunk_count = 2;
  if (has_chunk_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chunk_count(), target);
  }

  // optional int32 file_number = 3;
  if (has_file_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->file_number(), target);
  }

  // optional int32 file_count = 4;
  if (has_file_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->file_count(), target);
  }

  // optional .pb.remote.SongMetadata song_metadata = 6;
  if (has_song_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->song_metadata_, false, target);
  }

  // optional bytes data = 7;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->data(), target);
  }

  // optional int32 size = 8;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->size(), target);
  }

  // optional bytes file_hash = 9;
  if (has_file_hash()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->file_hash(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.ResponseSongFileChunk)
  return target;
}

int ResponseSongFileChunk::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.ResponseSongFileChunk)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 chunk_number = 1;
    if (has_chunk_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chunk_number());
    }

    // optional int32 chunk_count = 2;
    if (has_chunk_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chunk_count());
    }

    // optional int32 file_number = 3;
    if (has_file_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->file_number());
    }

    // optional int32 file_count = 4;
    if (has_file_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->file_count());
    }

    // optional .pb.remote.SongMetadata song_metadata = 6;
    if (has_song_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->song_metadata_);
    }

    // optional bytes data = 7;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional int32 size = 8;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // optional bytes file_hash = 9;
    if (has_file_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->file_hash());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseSongFileChunk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.ResponseSongFileChunk)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponseSongFileChunk* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseSongFileChunk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.ResponseSongFileChunk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.ResponseSongFileChunk)
    MergeFrom(*source);
  }
}

void ResponseSongFileChunk::MergeFrom(const ResponseSongFileChunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.ResponseSongFileChunk)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chunk_number()) {
      set_chunk_number(from.chunk_number());
    }
    if (from.has_chunk_count()) {
      set_chunk_count(from.chunk_count());
    }
    if (from.has_file_number()) {
      set_file_number(from.file_number());
    }
    if (from.has_file_count()) {
      set_file_count(from.file_count());
    }
    if (from.has_song_metadata()) {
      mutable_song_metadata()->::pb::remote::SongMetadata::MergeFrom(from.song_metadata());
    }
    if (from.has_data()) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_file_hash()) {
      set_has_file_hash();
      file_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_hash_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ResponseSongFileChunk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.ResponseSongFileChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseSongFileChunk::CopyFrom(const ResponseSongFileChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.ResponseSongFileChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseSongFileChunk::IsInitialized() const {

  return true;
}

void ResponseSongFileChunk::Swap(ResponseSongFileChunk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseSongFileChunk::InternalSwap(ResponseSongFileChunk* other) {
  std::swap(chunk_number_, other->chunk_number_);
  std::swap(chunk_count_, other->chunk_count_);
  std::swap(file_number_, other->file_number_);
  std::swap(file_count_, other->file_count_);
  std::swap(song_metadata_, other->song_metadata_);
  data_.Swap(&other->data_);
  std::swap(size_, other->size_);
  file_hash_.Swap(&other->file_hash_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseSongFileChunk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseSongFileChunk_descriptor_;
  metadata.reflection = ResponseSongFileChunk_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseSongFileChunk

// optional int32 chunk_number = 1;
bool ResponseSongFileChunk::has_chunk_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ResponseSongFileChunk::set_has_chunk_number() {
  _has_bits_[0] |= 0x00000001u;
}
void ResponseSongFileChunk::clear_has_chunk_number() {
  _has_bits_[0] &= ~0x00000001u;
}
void ResponseSongFileChunk::clear_chunk_number() {
  chunk_number_ = 0;
  clear_has_chunk_number();
}
 ::google::protobuf::int32 ResponseSongFileChunk::chunk_number() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseSongFileChunk.chunk_number)
  return chunk_number_;
}
 void ResponseSongFileChunk::set_chunk_number(::google::protobuf::int32 value) {
  set_has_chunk_number();
  chunk_number_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.ResponseSongFileChunk.chunk_number)
}

// optional int32 chunk_count = 2;
bool ResponseSongFileChunk::has_chunk_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ResponseSongFileChunk::set_has_chunk_count() {
  _has_bits_[0] |= 0x00000002u;
}
void ResponseSongFileChunk::clear_has_chunk_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void ResponseSongFileChunk::clear_chunk_count() {
  chunk_count_ = 0;
  clear_has_chunk_count();
}
 ::google::protobuf::int32 ResponseSongFileChunk::chunk_count() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseSongFileChunk.chunk_count)
  return chunk_count_;
}
 void ResponseSongFileChunk::set_chunk_count(::google::protobuf::int32 value) {
  set_has_chunk_count();
  chunk_count_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.ResponseSongFileChunk.chunk_count)
}

// optional int32 file_number = 3;
bool ResponseSongFileChunk::has_file_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ResponseSongFileChunk::set_has_file_number() {
  _has_bits_[0] |= 0x00000004u;
}
void ResponseSongFileChunk::clear_has_file_number() {
  _has_bits_[0] &= ~0x00000004u;
}
void ResponseSongFileChunk::clear_file_number() {
  file_number_ = 0;
  clear_has_file_number();
}
 ::google::protobuf::int32 ResponseSongFileChunk::file_number() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseSongFileChunk.file_number)
  return file_number_;
}
 void ResponseSongFileChunk::set_file_number(::google::protobuf::int32 value) {
  set_has_file_number();
  file_number_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.ResponseSongFileChunk.file_number)
}

// optional int32 file_count = 4;
bool ResponseSongFileChunk::has_file_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ResponseSongFileChunk::set_has_file_count() {
  _has_bits_[0] |= 0x00000008u;
}
void ResponseSongFileChunk::clear_has_file_count() {
  _has_bits_[0] &= ~0x00000008u;
}
void ResponseSongFileChunk::clear_file_count() {
  file_count_ = 0;
  clear_has_file_count();
}
 ::google::protobuf::int32 ResponseSongFileChunk::file_count() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseSongFileChunk.file_count)
  return file_count_;
}
 void ResponseSongFileChunk::set_file_count(::google::protobuf::int32 value) {
  set_has_file_count();
  file_count_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.ResponseSongFileChunk.file_count)
}

// optional .pb.remote.SongMetadata song_metadata = 6;
bool ResponseSongFileChunk::has_song_metadata() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ResponseSongFileChunk::set_has_song_metadata() {
  _has_bits_[0] |= 0x00000010u;
}
void ResponseSongFileChunk::clear_has_song_metadata() {
  _has_bits_[0] &= ~0x00000010u;
}
void ResponseSongFileChunk::clear_song_metadata() {
  if (song_metadata_ != NULL) song_metadata_->::pb::remote::SongMetadata::Clear();
  clear_has_song_metadata();
}
const ::pb::remote::SongMetadata& ResponseSongFileChunk::song_metadata() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseSongFileChunk.song_metadata)
  return song_metadata_ != NULL ? *song_metadata_ : *default_instance_->song_metadata_;
}
::pb::remote::SongMetadata* ResponseSongFileChunk::mutable_song_metadata() {
  set_has_song_metadata();
  if (song_metadata_ == NULL) {
    song_metadata_ = new ::pb::remote::SongMetadata;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.ResponseSongFileChunk.song_metadata)
  return song_metadata_;
}
::pb::remote::SongMetadata* ResponseSongFileChunk::release_song_metadata() {
  // @@protoc_insertion_point(field_release:pb.remote.ResponseSongFileChunk.song_metadata)
  clear_has_song_metadata();
  ::pb::remote::SongMetadata* temp = song_metadata_;
  song_metadata_ = NULL;
  return temp;
}
void ResponseSongFileChunk::set_allocated_song_metadata(::pb::remote::SongMetadata* song_metadata) {
  delete song_metadata_;
  song_metadata_ = song_metadata;
  if (song_metadata) {
    set_has_song_metadata();
  } else {
    clear_has_song_metadata();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.ResponseSongFileChunk.song_metadata)
}

// optional bytes data = 7;
bool ResponseSongFileChunk::has_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ResponseSongFileChunk::set_has_data() {
  _has_bits_[0] |= 0x00000020u;
}
void ResponseSongFileChunk::clear_has_data() {
  _has_bits_[0] &= ~0x00000020u;
}
void ResponseSongFileChunk::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
 const ::std::string& ResponseSongFileChunk::data() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseSongFileChunk.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseSongFileChunk::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.remote.ResponseSongFileChunk.data)
}
 void ResponseSongFileChunk::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.remote.ResponseSongFileChunk.data)
}
 void ResponseSongFileChunk::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.remote.ResponseSongFileChunk.data)
}
 ::std::string* ResponseSongFileChunk::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:pb.remote.ResponseSongFileChunk.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResponseSongFileChunk::release_data() {
  // @@protoc_insertion_point(field_release:pb.remote.ResponseSongFileChunk.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseSongFileChunk::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:pb.remote.ResponseSongFileChunk.data)
}

// optional int32 size = 8;
bool ResponseSongFileChunk::has_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ResponseSongFileChunk::set_has_size() {
  _has_bits_[0] |= 0x00000040u;
}
void ResponseSongFileChunk::clear_has_size() {
  _has_bits_[0] &= ~0x00000040u;
}
void ResponseSongFileChunk::clear_size() {
  size_ = 0;
  clear_has_size();
}
 ::google::protobuf::int32 ResponseSongFileChunk::size() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseSongFileChunk.size)
  return size_;
}
 void ResponseSongFileChunk::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.ResponseSongFileChunk.size)
}

// optional bytes file_hash = 9;
bool ResponseSongFileChunk::has_file_hash() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ResponseSongFileChunk::set_has_file_hash() {
  _has_bits_[0] |= 0x00000080u;
}
void ResponseSongFileChunk::clear_has_file_hash() {
  _has_bits_[0] &= ~0x00000080u;
}
void ResponseSongFileChunk::clear_file_hash() {
  file_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_hash();
}
 const ::std::string& ResponseSongFileChunk::file_hash() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseSongFileChunk.file_hash)
  return file_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseSongFileChunk::set_file_hash(const ::std::string& value) {
  set_has_file_hash();
  file_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.remote.ResponseSongFileChunk.file_hash)
}
 void ResponseSongFileChunk::set_file_hash(const char* value) {
  set_has_file_hash();
  file_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.remote.ResponseSongFileChunk.file_hash)
}
 void ResponseSongFileChunk::set_file_hash(const void* value, size_t size) {
  set_has_file_hash();
  file_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.remote.ResponseSongFileChunk.file_hash)
}
 ::std::string* ResponseSongFileChunk::mutable_file_hash() {
  set_has_file_hash();
  // @@protoc_insertion_point(field_mutable:pb.remote.ResponseSongFileChunk.file_hash)
  return file_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResponseSongFileChunk::release_file_hash() {
  // @@protoc_insertion_point(field_release:pb.remote.ResponseSongFileChunk.file_hash)
  clear_has_file_hash();
  return file_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseSongFileChunk::set_allocated_file_hash(::std::string* file_hash) {
  if (file_hash != NULL) {
    set_has_file_hash();
  } else {
    clear_has_file_hash();
  }
  file_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_hash);
  // @@protoc_insertion_point(field_set_allocated:pb.remote.ResponseSongFileChunk.file_hash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseLibraryChunk::kChunkNumberFieldNumber;
const int ResponseLibraryChunk::kChunkCountFieldNumber;
const int ResponseLibraryChunk::kDataFieldNumber;
const int ResponseLibraryChunk::kSizeFieldNumber;
const int ResponseLibraryChunk::kFileHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseLibraryChunk::ResponseLibraryChunk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.ResponseLibraryChunk)
}

void ResponseLibraryChunk::InitAsDefaultInstance() {
}

ResponseLibraryChunk::ResponseLibraryChunk(const ResponseLibraryChunk& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.remote.ResponseLibraryChunk)
}

void ResponseLibraryChunk::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  chunk_number_ = 0;
  chunk_count_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_ = 0;
  file_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseLibraryChunk::~ResponseLibraryChunk() {
  // @@protoc_insertion_point(destructor:pb.remote.ResponseLibraryChunk)
  SharedDtor();
}

void ResponseLibraryChunk::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ResponseLibraryChunk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseLibraryChunk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseLibraryChunk_descriptor_;
}

const ResponseLibraryChunk& ResponseLibraryChunk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remotecontrolmessages_2eproto();
  return *default_instance_;
}

ResponseLibraryChunk* ResponseLibraryChunk::default_instance_ = NULL;

ResponseLibraryChunk* ResponseLibraryChunk::New(::google::protobuf::Arena* arena) const {
  ResponseLibraryChunk* n = new ResponseLibraryChunk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseLibraryChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.ResponseLibraryChunk)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ResponseLibraryChunk, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ResponseLibraryChunk*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(chunk_number_, chunk_count_);
    if (has_data()) {
      data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    size_ = 0;
    if (has_file_hash()) {
      file_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ResponseLibraryChunk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.ResponseLibraryChunk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chunk_number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chunk_number_)));
          set_has_chunk_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_chunk_count;
        break;
      }

      // optional int32 chunk_count = 2;
      case 2: {
        if (tag == 16) {
         parse_chunk_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chunk_count_)));
          set_has_chunk_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_size;
        break;
      }

      // optional int32 size = 4;
      case 4: {
        if (tag == 32) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_file_hash;
        break;
      }

      // optional bytes file_hash = 5;
      case 5: {
        if (tag == 42) {
         parse_file_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file_hash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.ResponseLibraryChunk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.ResponseLibraryChunk)
  return false;
#undef DO_
}

void ResponseLibraryChunk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.ResponseLibraryChunk)
  // optional int32 chunk_number = 1;
  if (has_chunk_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chunk_number(), output);
  }

  // optional int32 chunk_count = 2;
  if (has_chunk_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chunk_count(), output);
  }

  // optional bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // optional int32 size = 4;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->size(), output);
  }

  // optional bytes file_hash = 5;
  if (has_file_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->file_hash(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.ResponseLibraryChunk)
}

::google::protobuf::uint8* ResponseLibraryChunk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.ResponseLibraryChunk)
  // optional int32 chunk_number = 1;
  if (has_chunk_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chunk_number(), target);
  }

  // optional int32 chunk_count = 2;
  if (has_chunk_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chunk_count(), target);
  }

  // optional bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // optional int32 size = 4;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->size(), target);
  }

  // optional bytes file_hash = 5;
  if (has_file_hash()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->file_hash(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.ResponseLibraryChunk)
  return target;
}

int ResponseLibraryChunk::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.ResponseLibraryChunk)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional int32 chunk_number = 1;
    if (has_chunk_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chunk_number());
    }

    // optional int32 chunk_count = 2;
    if (has_chunk_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chunk_count());
    }

    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional int32 size = 4;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // optional bytes file_hash = 5;
    if (has_file_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->file_hash());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseLibraryChunk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.ResponseLibraryChunk)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponseLibraryChunk* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseLibraryChunk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.ResponseLibraryChunk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.ResponseLibraryChunk)
    MergeFrom(*source);
  }
}

void ResponseLibraryChunk::MergeFrom(const ResponseLibraryChunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.ResponseLibraryChunk)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chunk_number()) {
      set_chunk_number(from.chunk_number());
    }
    if (from.has_chunk_count()) {
      set_chunk_count(from.chunk_count());
    }
    if (from.has_data()) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_file_hash()) {
      set_has_file_hash();
      file_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_hash_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ResponseLibraryChunk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.ResponseLibraryChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseLibraryChunk::CopyFrom(const ResponseLibraryChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.ResponseLibraryChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseLibraryChunk::IsInitialized() const {

  return true;
}

void ResponseLibraryChunk::Swap(ResponseLibraryChunk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseLibraryChunk::InternalSwap(ResponseLibraryChunk* other) {
  std::swap(chunk_number_, other->chunk_number_);
  std::swap(chunk_count_, other->chunk_count_);
  data_.Swap(&other->data_);
  std::swap(size_, other->size_);
  file_hash_.Swap(&other->file_hash_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseLibraryChunk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseLibraryChunk_descriptor_;
  metadata.reflection = ResponseLibraryChunk_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseLibraryChunk

// optional int32 chunk_number = 1;
bool ResponseLibraryChunk::has_chunk_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ResponseLibraryChunk::set_has_chunk_number() {
  _has_bits_[0] |= 0x00000001u;
}
void ResponseLibraryChunk::clear_has_chunk_number() {
  _has_bits_[0] &= ~0x00000001u;
}
void ResponseLibraryChunk::clear_chunk_number() {
  chunk_number_ = 0;
  clear_has_chunk_number();
}
 ::google::protobuf::int32 ResponseLibraryChunk::chunk_number() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseLibraryChunk.chunk_number)
  return chunk_number_;
}
 void ResponseLibraryChunk::set_chunk_number(::google::protobuf::int32 value) {
  set_has_chunk_number();
  chunk_number_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.ResponseLibraryChunk.chunk_number)
}

// optional int32 chunk_count = 2;
bool ResponseLibraryChunk::has_chunk_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ResponseLibraryChunk::set_has_chunk_count() {
  _has_bits_[0] |= 0x00000002u;
}
void ResponseLibraryChunk::clear_has_chunk_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void ResponseLibraryChunk::clear_chunk_count() {
  chunk_count_ = 0;
  clear_has_chunk_count();
}
 ::google::protobuf::int32 ResponseLibraryChunk::chunk_count() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseLibraryChunk.chunk_count)
  return chunk_count_;
}
 void ResponseLibraryChunk::set_chunk_count(::google::protobuf::int32 value) {
  set_has_chunk_count();
  chunk_count_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.ResponseLibraryChunk.chunk_count)
}

// optional bytes data = 3;
bool ResponseLibraryChunk::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ResponseLibraryChunk::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
void ResponseLibraryChunk::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
void ResponseLibraryChunk::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
 const ::std::string& ResponseLibraryChunk::data() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseLibraryChunk.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseLibraryChunk::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.remote.ResponseLibraryChunk.data)
}
 void ResponseLibraryChunk::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.remote.ResponseLibraryChunk.data)
}
 void ResponseLibraryChunk::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.remote.ResponseLibraryChunk.data)
}
 ::std::string* ResponseLibraryChunk::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:pb.remote.ResponseLibraryChunk.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResponseLibraryChunk::release_data() {
  // @@protoc_insertion_point(field_release:pb.remote.ResponseLibraryChunk.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseLibraryChunk::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:pb.remote.ResponseLibraryChunk.data)
}

// optional int32 size = 4;
bool ResponseLibraryChunk::has_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ResponseLibraryChunk::set_has_size() {
  _has_bits_[0] |= 0x00000008u;
}
void ResponseLibraryChunk::clear_has_size() {
  _has_bits_[0] &= ~0x00000008u;
}
void ResponseLibraryChunk::clear_size() {
  size_ = 0;
  clear_has_size();
}
 ::google::protobuf::int32 ResponseLibraryChunk::size() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseLibraryChunk.size)
  return size_;
}
 void ResponseLibraryChunk::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.ResponseLibraryChunk.size)
}

// optional bytes file_hash = 5;
bool ResponseLibraryChunk::has_file_hash() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ResponseLibraryChunk::set_has_file_hash() {
  _has_bits_[0] |= 0x00000010u;
}
void ResponseLibraryChunk::clear_has_file_hash() {
  _has_bits_[0] &= ~0x00000010u;
}
void ResponseLibraryChunk::clear_file_hash() {
  file_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_hash();
}
 const ::std::string& ResponseLibraryChunk::file_hash() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseLibraryChunk.file_hash)
  return file_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseLibraryChunk::set_file_hash(const ::std::string& value) {
  set_has_file_hash();
  file_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.remote.ResponseLibraryChunk.file_hash)
}
 void ResponseLibraryChunk::set_file_hash(const char* value) {
  set_has_file_hash();
  file_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.remote.ResponseLibraryChunk.file_hash)
}
 void ResponseLibraryChunk::set_file_hash(const void* value, size_t size) {
  set_has_file_hash();
  file_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.remote.ResponseLibraryChunk.file_hash)
}
 ::std::string* ResponseLibraryChunk::mutable_file_hash() {
  set_has_file_hash();
  // @@protoc_insertion_point(field_mutable:pb.remote.ResponseLibraryChunk.file_hash)
  return file_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResponseLibraryChunk::release_file_hash() {
  // @@protoc_insertion_point(field_release:pb.remote.ResponseLibraryChunk.file_hash)
  clear_has_file_hash();
  return file_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseLibraryChunk::set_allocated_file_hash(::std::string* file_hash) {
  if (file_hash != NULL) {
    set_has_file_hash();
  } else {
    clear_has_file_hash();
  }
  file_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_hash);
  // @@protoc_insertion_point(field_set_allocated:pb.remote.ResponseLibraryChunk.file_hash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseSongOffer::kAcceptedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseSongOffer::ResponseSongOffer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.ResponseSongOffer)
}

void ResponseSongOffer::InitAsDefaultInstance() {
}

ResponseSongOffer::ResponseSongOffer(const ResponseSongOffer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.remote.ResponseSongOffer)
}

void ResponseSongOffer::SharedCtor() {
  _cached_size_ = 0;
  accepted_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseSongOffer::~ResponseSongOffer() {
  // @@protoc_insertion_point(destructor:pb.remote.ResponseSongOffer)
  SharedDtor();
}

void ResponseSongOffer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseSongOffer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseSongOffer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseSongOffer_descriptor_;
}

const ResponseSongOffer& ResponseSongOffer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remotecontrolmessages_2eproto();
  return *default_instance_;
}

ResponseSongOffer* ResponseSongOffer::default_instance_ = NULL;

ResponseSongOffer* ResponseSongOffer::New(::google::protobuf::Arena* arena) const {
  ResponseSongOffer* n = new ResponseSongOffer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseSongOffer::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.ResponseSongOffer)
  accepted_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ResponseSongOffer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.ResponseSongOffer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool accepted = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accepted_)));
          set_has_accepted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.ResponseSongOffer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.ResponseSongOffer)
  return false;
#undef DO_
}

void ResponseSongOffer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.ResponseSongOffer)
  // optional bool accepted = 1;
  if (has_accepted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->accepted(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.ResponseSongOffer)
}

::google::protobuf::uint8* ResponseSongOffer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.ResponseSongOffer)
  // optional bool accepted = 1;
  if (has_accepted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->accepted(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.ResponseSongOffer)
  return target;
}

int ResponseSongOffer::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.ResponseSongOffer)
  int total_size = 0;

  // optional bool accepted = 1;
  if (has_accepted()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseSongOffer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.ResponseSongOffer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponseSongOffer* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseSongOffer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.ResponseSongOffer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.ResponseSongOffer)
    MergeFrom(*source);
  }
}

void ResponseSongOffer::MergeFrom(const ResponseSongOffer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.ResponseSongOffer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accepted()) {
      set_accepted(from.accepted());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ResponseSongOffer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.ResponseSongOffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseSongOffer::CopyFrom(const ResponseSongOffer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.ResponseSongOffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseSongOffer::IsInitialized() const {

  return true;
}

void ResponseSongOffer::Swap(ResponseSongOffer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseSongOffer::InternalSwap(ResponseSongOffer* other) {
  std::swap(accepted_, other->accepted_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseSongOffer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseSongOffer_descriptor_;
  metadata.reflection = ResponseSongOffer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseSongOffer

// optional bool accepted = 1;
bool ResponseSongOffer::has_accepted() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ResponseSongOffer::set_has_accepted() {
  _has_bits_[0] |= 0x00000001u;
}
void ResponseSongOffer::clear_has_accepted() {
  _has_bits_[0] &= ~0x00000001u;
}
void ResponseSongOffer::clear_accepted() {
  accepted_ = false;
  clear_has_accepted();
}
 bool ResponseSongOffer::accepted() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseSongOffer.accepted)
  return accepted_;
}
 void ResponseSongOffer::set_accepted(bool value) {
  set_has_accepted();
  accepted_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.ResponseSongOffer.accepted)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestRateSong::kRatingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestRateSong::RequestRateSong()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.RequestRateSong)
}

void RequestRateSong::InitAsDefaultInstance() {
}

RequestRateSong::RequestRateSong(const RequestRateSong& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.remote.RequestRateSong)
}

void RequestRateSong::SharedCtor() {
  _cached_size_ = 0;
  rating_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestRateSong::~RequestRateSong() {
  // @@protoc_insertion_point(destructor:pb.remote.RequestRateSong)
  SharedDtor();
}

void RequestRateSong::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestRateSong::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestRateSong::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestRateSong_descriptor_;
}

const RequestRateSong& RequestRateSong::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remotecontrolmessages_2eproto();
  return *default_instance_;
}

RequestRateSong* RequestRateSong::default_instance_ = NULL;

RequestRateSong* RequestRateSong::New(::google::protobuf::Arena* arena) const {
  RequestRateSong* n = new RequestRateSong;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestRateSong::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.RequestRateSong)
  rating_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RequestRateSong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.RequestRateSong)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float rating = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rating_)));
          set_has_rating();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.RequestRateSong)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.RequestRateSong)
  return false;
#undef DO_
}

void RequestRateSong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.RequestRateSong)
  // optional float rating = 1;
  if (has_rating()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->rating(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.RequestRateSong)
}

::google::protobuf::uint8* RequestRateSong::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.RequestRateSong)
  // optional float rating = 1;
  if (has_rating()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->rating(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.RequestRateSong)
  return target;
}

int RequestRateSong::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.RequestRateSong)
  int total_size = 0;

  // optional float rating = 1;
  if (has_rating()) {
    total_size += 1 + 4;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestRateSong::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.RequestRateSong)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestRateSong* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestRateSong>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.RequestRateSong)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.RequestRateSong)
    MergeFrom(*source);
  }
}

void RequestRateSong::MergeFrom(const RequestRateSong& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.RequestRateSong)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rating()) {
      set_rating(from.rating());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RequestRateSong::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.RequestRateSong)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestRateSong::CopyFrom(const RequestRateSong& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.RequestRateSong)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRateSong::IsInitialized() const {

  return true;
}

void RequestRateSong::Swap(RequestRateSong* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestRateSong::InternalSwap(RequestRateSong* other) {
  std::swap(rating_, other->rating_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestRateSong::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestRateSong_descriptor_;
  metadata.reflection = RequestRateSong_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestRateSong

// optional float rating = 1;
bool RequestRateSong::has_rating() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RequestRateSong::set_has_rating() {
  _has_bits_[0] |= 0x00000001u;
}
void RequestRateSong::clear_has_rating() {
  _has_bits_[0] &= ~0x00000001u;
}
void RequestRateSong::clear_rating() {
  rating_ = 0;
  clear_has_rating();
}
 float RequestRateSong::rating() const {
  // @@protoc_insertion_point(field_get:pb.remote.RequestRateSong.rating)
  return rating_;
}
 void RequestRateSong::set_rating(float value) {
  set_has_rating();
  rating_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.RequestRateSong.rating)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseDownloadTotalSize::kTotalSizeFieldNumber;
const int ResponseDownloadTotalSize::kFileCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseDownloadTotalSize::ResponseDownloadTotalSize()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.ResponseDownloadTotalSize)
}

void ResponseDownloadTotalSize::InitAsDefaultInstance() {
}

ResponseDownloadTotalSize::ResponseDownloadTotalSize(const ResponseDownloadTotalSize& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.remote.ResponseDownloadTotalSize)
}

void ResponseDownloadTotalSize::SharedCtor() {
  _cached_size_ = 0;
  total_size_ = 0;
  file_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseDownloadTotalSize::~ResponseDownloadTotalSize() {
  // @@protoc_insertion_point(destructor:pb.remote.ResponseDownloadTotalSize)
  SharedDtor();
}

void ResponseDownloadTotalSize::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseDownloadTotalSize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseDownloadTotalSize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseDownloadTotalSize_descriptor_;
}

const ResponseDownloadTotalSize& ResponseDownloadTotalSize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remotecontrolmessages_2eproto();
  return *default_instance_;
}

ResponseDownloadTotalSize* ResponseDownloadTotalSize::default_instance_ = NULL;

ResponseDownloadTotalSize* ResponseDownloadTotalSize::New(::google::protobuf::Arena* arena) const {
  ResponseDownloadTotalSize* n = new ResponseDownloadTotalSize;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseDownloadTotalSize::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.ResponseDownloadTotalSize)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ResponseDownloadTotalSize, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ResponseDownloadTotalSize*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(total_size_, file_count_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ResponseDownloadTotalSize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.ResponseDownloadTotalSize)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 total_size = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_size_)));
          set_has_total_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_file_count;
        break;
      }

      // optional int32 file_count = 2;
      case 2: {
        if (tag == 16) {
         parse_file_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &file_count_)));
          set_has_file_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.ResponseDownloadTotalSize)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.ResponseDownloadTotalSize)
  return false;
#undef DO_
}

void ResponseDownloadTotalSize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.ResponseDownloadTotalSize)
  // optional int32 total_size = 1;
  if (has_total_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->total_size(), output);
  }

  // optional int32 file_count = 2;
  if (has_file_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->file_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.ResponseDownloadTotalSize)
}

::google::protobuf::uint8* ResponseDownloadTotalSize::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.ResponseDownloadTotalSize)
  // optional int32 total_size = 1;
  if (has_total_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->total_size(), target);
  }

  // optional int32 file_count = 2;
  if (has_file_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->file_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.ResponseDownloadTotalSize)
  return target;
}

int ResponseDownloadTotalSize::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.ResponseDownloadTotalSize)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 total_size = 1;
    if (has_total_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_size());
    }

    // optional int32 file_count = 2;
    if (has_file_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->file_count());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseDownloadTotalSize::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.ResponseDownloadTotalSize)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponseDownloadTotalSize* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseDownloadTotalSize>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.ResponseDownloadTotalSize)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.ResponseDownloadTotalSize)
    MergeFrom(*source);
  }
}

void ResponseDownloadTotalSize::MergeFrom(const ResponseDownloadTotalSize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.ResponseDownloadTotalSize)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_size()) {
      set_total_size(from.total_size());
    }
    if (from.has_file_count()) {
      set_file_count(from.file_count());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ResponseDownloadTotalSize::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.ResponseDownloadTotalSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseDownloadTotalSize::CopyFrom(const ResponseDownloadTotalSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.ResponseDownloadTotalSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseDownloadTotalSize::IsInitialized() const {

  return true;
}

void ResponseDownloadTotalSize::Swap(ResponseDownloadTotalSize* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseDownloadTotalSize::InternalSwap(ResponseDownloadTotalSize* other) {
  std::swap(total_size_, other->total_size_);
  std::swap(file_count_, other->file_count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseDownloadTotalSize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseDownloadTotalSize_descriptor_;
  metadata.reflection = ResponseDownloadTotalSize_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseDownloadTotalSize

// optional int32 total_size = 1;
bool ResponseDownloadTotalSize::has_total_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ResponseDownloadTotalSize::set_has_total_size() {
  _has_bits_[0] |= 0x00000001u;
}
void ResponseDownloadTotalSize::clear_has_total_size() {
  _has_bits_[0] &= ~0x00000001u;
}
void ResponseDownloadTotalSize::clear_total_size() {
  total_size_ = 0;
  clear_has_total_size();
}
 ::google::protobuf::int32 ResponseDownloadTotalSize::total_size() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseDownloadTotalSize.total_size)
  return total_size_;
}
 void ResponseDownloadTotalSize::set_total_size(::google::protobuf::int32 value) {
  set_has_total_size();
  total_size_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.ResponseDownloadTotalSize.total_size)
}

// optional int32 file_count = 2;
bool ResponseDownloadTotalSize::has_file_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ResponseDownloadTotalSize::set_has_file_count() {
  _has_bits_[0] |= 0x00000002u;
}
void ResponseDownloadTotalSize::clear_has_file_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void ResponseDownloadTotalSize::clear_file_count() {
  file_count_ = 0;
  clear_has_file_count();
}
 ::google::protobuf::int32 ResponseDownloadTotalSize::file_count() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseDownloadTotalSize.file_count)
  return file_count_;
}
 void ResponseDownloadTotalSize::set_file_count(::google::protobuf::int32 value) {
  set_has_file_count();
  file_count_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.ResponseDownloadTotalSize.file_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestGlobalSearch::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestGlobalSearch::RequestGlobalSearch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.RequestGlobalSearch)
}

void RequestGlobalSearch::InitAsDefaultInstance() {
}

RequestGlobalSearch::RequestGlobalSearch(const RequestGlobalSearch& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.remote.RequestGlobalSearch)
}

void RequestGlobalSearch::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGlobalSearch::~RequestGlobalSearch() {
  // @@protoc_insertion_point(destructor:pb.remote.RequestGlobalSearch)
  SharedDtor();
}

void RequestGlobalSearch::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RequestGlobalSearch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestGlobalSearch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestGlobalSearch_descriptor_;
}

const RequestGlobalSearch& RequestGlobalSearch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remotecontrolmessages_2eproto();
  return *default_instance_;
}

RequestGlobalSearch* RequestGlobalSearch::default_instance_ = NULL;

RequestGlobalSearch* RequestGlobalSearch::New(::google::protobuf::Arena* arena) const {
  RequestGlobalSearch* n = new RequestGlobalSearch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestGlobalSearch::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.RequestGlobalSearch)
  if (has_query()) {
    query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RequestGlobalSearch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.RequestGlobalSearch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string query = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query().data(), this->query().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.remote.RequestGlobalSearch.query");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.RequestGlobalSearch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.RequestGlobalSearch)
  return false;
#undef DO_
}

void RequestGlobalSearch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.RequestGlobalSearch)
  // optional string query = 1;
  if (has_query()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.RequestGlobalSearch.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.RequestGlobalSearch)
}

::google::protobuf::uint8* RequestGlobalSearch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.RequestGlobalSearch)
  // optional string query = 1;
  if (has_query()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.RequestGlobalSearch.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.RequestGlobalSearch)
  return target;
}

int RequestGlobalSearch::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.RequestGlobalSearch)
  int total_size = 0;

  // optional string query = 1;
  if (has_query()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGlobalSearch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.RequestGlobalSearch)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestGlobalSearch* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestGlobalSearch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.RequestGlobalSearch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.RequestGlobalSearch)
    MergeFrom(*source);
  }
}

void RequestGlobalSearch::MergeFrom(const RequestGlobalSearch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.RequestGlobalSearch)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_query()) {
      set_has_query();
      query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RequestGlobalSearch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.RequestGlobalSearch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestGlobalSearch::CopyFrom(const RequestGlobalSearch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.RequestGlobalSearch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGlobalSearch::IsInitialized() const {

  return true;
}

void RequestGlobalSearch::Swap(RequestGlobalSearch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestGlobalSearch::InternalSwap(RequestGlobalSearch* other) {
  query_.Swap(&other->query_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestGlobalSearch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestGlobalSearch_descriptor_;
  metadata.reflection = RequestGlobalSearch_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestGlobalSearch

// optional string query = 1;
bool RequestGlobalSearch::has_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RequestGlobalSearch::set_has_query() {
  _has_bits_[0] |= 0x00000001u;
}
void RequestGlobalSearch::clear_has_query() {
  _has_bits_[0] &= ~0x00000001u;
}
void RequestGlobalSearch::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
 const ::std::string& RequestGlobalSearch::query() const {
  // @@protoc_insertion_point(field_get:pb.remote.RequestGlobalSearch.query)
  return query_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestGlobalSearch::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.remote.RequestGlobalSearch.query)
}
 void RequestGlobalSearch::set_query(const char* value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.remote.RequestGlobalSearch.query)
}
 void RequestGlobalSearch::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.remote.RequestGlobalSearch.query)
}
 ::std::string* RequestGlobalSearch::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:pb.remote.RequestGlobalSearch.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RequestGlobalSearch::release_query() {
  // @@protoc_insertion_point(field_release:pb.remote.RequestGlobalSearch.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestGlobalSearch::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:pb.remote.RequestGlobalSearch.query)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseGlobalSearch::kIdFieldNumber;
const int ResponseGlobalSearch::kQueryFieldNumber;
const int ResponseGlobalSearch::kSearchProviderFieldNumber;
const int ResponseGlobalSearch::kSongMetadataFieldNumber;
const int ResponseGlobalSearch::kSearchProviderIconFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseGlobalSearch::ResponseGlobalSearch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.ResponseGlobalSearch)
}

void ResponseGlobalSearch::InitAsDefaultInstance() {
}

ResponseGlobalSearch::ResponseGlobalSearch(const ResponseGlobalSearch& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.remote.ResponseGlobalSearch)
}

void ResponseGlobalSearch::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  search_provider_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  search_provider_icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseGlobalSearch::~ResponseGlobalSearch() {
  // @@protoc_insertion_point(destructor:pb.remote.ResponseGlobalSearch)
  SharedDtor();
}

void ResponseGlobalSearch::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  search_provider_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  search_provider_icon_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ResponseGlobalSearch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseGlobalSearch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseGlobalSearch_descriptor_;
}

const ResponseGlobalSearch& ResponseGlobalSearch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remotecontrolmessages_2eproto();
  return *default_instance_;
}

ResponseGlobalSearch* ResponseGlobalSearch::default_instance_ = NULL;

ResponseGlobalSearch* ResponseGlobalSearch::New(::google::protobuf::Arena* arena) const {
  ResponseGlobalSearch* n = new ResponseGlobalSearch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseGlobalSearch::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.ResponseGlobalSearch)
  if (_has_bits_[0 / 32] & 23u) {
    id_ = 0;
    if (has_query()) {
      query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_search_provider()) {
      search_provider_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_search_provider_icon()) {
      search_provider_icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  song_metadata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ResponseGlobalSearch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.ResponseGlobalSearch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_query;
        break;
      }

      // optional string query = 2;
      case 2: {
        if (tag == 18) {
         parse_query:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query().data(), this->query().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.remote.ResponseGlobalSearch.query");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_search_provider;
        break;
      }

      // optional string search_provider = 3;
      case 3: {
        if (tag == 26) {
         parse_search_provider:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_search_provider()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->search_provider().data(), this->search_provider().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.remote.ResponseGlobalSearch.search_provider");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_song_metadata;
        break;
      }

      // repeated .pb.remote.SongMetadata song_metadata = 4;
      case 4: {
        if (tag == 34) {
         parse_song_metadata:
          DO_(input->IncrementRecursionDepth());
         parse_loop_song_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_song_metadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_song_metadata;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(42)) goto parse_search_provider_icon;
        break;
      }

      // optional bytes search_provider_icon = 5;
      case 5: {
        if (tag == 42) {
         parse_search_provider_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_search_provider_icon()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.ResponseGlobalSearch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.ResponseGlobalSearch)
  return false;
#undef DO_
}

void ResponseGlobalSearch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.ResponseGlobalSearch)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string query = 2;
  if (has_query()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.ResponseGlobalSearch.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->query(), output);
  }

  // optional string search_provider = 3;
  if (has_search_provider()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_provider().data(), this->search_provider().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.ResponseGlobalSearch.search_provider");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->search_provider(), output);
  }

  // repeated .pb.remote.SongMetadata song_metadata = 4;
  for (unsigned int i = 0, n = this->song_metadata_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->song_metadata(i), output);
  }

  // optional bytes search_provider_icon = 5;
  if (has_search_provider_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->search_provider_icon(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.ResponseGlobalSearch)
}

::google::protobuf::uint8* ResponseGlobalSearch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.ResponseGlobalSearch)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string query = 2;
  if (has_query()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.ResponseGlobalSearch.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->query(), target);
  }

  // optional string search_provider = 3;
  if (has_search_provider()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_provider().data(), this->search_provider().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.ResponseGlobalSearch.search_provider");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->search_provider(), target);
  }

  // repeated .pb.remote.SongMetadata song_metadata = 4;
  for (unsigned int i = 0, n = this->song_metadata_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->song_metadata(i), false, target);
  }

  // optional bytes search_provider_icon = 5;
  if (has_search_provider_icon()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->search_provider_icon(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.ResponseGlobalSearch)
  return target;
}

int ResponseGlobalSearch::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.ResponseGlobalSearch)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 23u) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string query = 2;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query());
    }

    // optional string search_provider = 3;
    if (has_search_provider()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->search_provider());
    }

    // optional bytes search_provider_icon = 5;
    if (has_search_provider_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->search_provider_icon());
    }

  }
  // repeated .pb.remote.SongMetadata song_metadata = 4;
  total_size += 1 * this->song_metadata_size();
  for (int i = 0; i < this->song_metadata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->song_metadata(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseGlobalSearch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.ResponseGlobalSearch)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponseGlobalSearch* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseGlobalSearch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.ResponseGlobalSearch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.ResponseGlobalSearch)
    MergeFrom(*source);
  }
}

void ResponseGlobalSearch::MergeFrom(const ResponseGlobalSearch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.ResponseGlobalSearch)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  song_metadata_.MergeFrom(from.song_metadata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_query()) {
      set_has_query();
      query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
    }
    if (from.has_search_provider()) {
      set_has_search_provider();
      search_provider_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_provider_);
    }
    if (from.has_search_provider_icon()) {
      set_has_search_provider_icon();
      search_provider_icon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_provider_icon_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ResponseGlobalSearch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.ResponseGlobalSearch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseGlobalSearch::CopyFrom(const ResponseGlobalSearch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.ResponseGlobalSearch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseGlobalSearch::IsInitialized() const {

  return true;
}

void ResponseGlobalSearch::Swap(ResponseGlobalSearch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseGlobalSearch::InternalSwap(ResponseGlobalSearch* other) {
  std::swap(id_, other->id_);
  query_.Swap(&other->query_);
  search_provider_.Swap(&other->search_provider_);
  song_metadata_.UnsafeArenaSwap(&other->song_metadata_);
  search_provider_icon_.Swap(&other->search_provider_icon_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseGlobalSearch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseGlobalSearch_descriptor_;
  metadata.reflection = ResponseGlobalSearch_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseGlobalSearch

// optional int32 id = 1;
bool ResponseGlobalSearch::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ResponseGlobalSearch::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ResponseGlobalSearch::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ResponseGlobalSearch::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 ResponseGlobalSearch::id() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseGlobalSearch.id)
  return id_;
}
 void ResponseGlobalSearch::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.ResponseGlobalSearch.id)
}

// optional string query = 2;
bool ResponseGlobalSearch::has_query() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ResponseGlobalSearch::set_has_query() {
  _has_bits_[0] |= 0x00000002u;
}
void ResponseGlobalSearch::clear_has_query() {
  _has_bits_[0] &= ~0x00000002u;
}
void ResponseGlobalSearch::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
 const ::std::string& ResponseGlobalSearch::query() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseGlobalSearch.query)
  return query_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseGlobalSearch::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.remote.ResponseGlobalSearch.query)
}
 void ResponseGlobalSearch::set_query(const char* value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.remote.ResponseGlobalSearch.query)
}
 void ResponseGlobalSearch::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.remote.ResponseGlobalSearch.query)
}
 ::std::string* ResponseGlobalSearch::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:pb.remote.ResponseGlobalSearch.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResponseGlobalSearch::release_query() {
  // @@protoc_insertion_point(field_release:pb.remote.ResponseGlobalSearch.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseGlobalSearch::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:pb.remote.ResponseGlobalSearch.query)
}

// optional string search_provider = 3;
bool ResponseGlobalSearch::has_search_provider() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ResponseGlobalSearch::set_has_search_provider() {
  _has_bits_[0] |= 0x00000004u;
}
void ResponseGlobalSearch::clear_has_search_provider() {
  _has_bits_[0] &= ~0x00000004u;
}
void ResponseGlobalSearch::clear_search_provider() {
  search_provider_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_search_provider();
}
 const ::std::string& ResponseGlobalSearch::search_provider() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseGlobalSearch.search_provider)
  return search_provider_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseGlobalSearch::set_search_provider(const ::std::string& value) {
  set_has_search_provider();
  search_provider_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.remote.ResponseGlobalSearch.search_provider)
}
 void ResponseGlobalSearch::set_search_provider(const char* value) {
  set_has_search_provider();
  search_provider_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.remote.ResponseGlobalSearch.search_provider)
}
 void ResponseGlobalSearch::set_search_provider(const char* value, size_t size) {
  set_has_search_provider();
  search_provider_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.remote.ResponseGlobalSearch.search_provider)
}
 ::std::string* ResponseGlobalSearch::mutable_search_provider() {
  set_has_search_provider();
  // @@protoc_insertion_point(field_mutable:pb.remote.ResponseGlobalSearch.search_provider)
  return search_provider_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResponseGlobalSearch::release_search_provider() {
  // @@protoc_insertion_point(field_release:pb.remote.ResponseGlobalSearch.search_provider)
  clear_has_search_provider();
  return search_provider_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseGlobalSearch::set_allocated_search_provider(::std::string* search_provider) {
  if (search_provider != NULL) {
    set_has_search_provider();
  } else {
    clear_has_search_provider();
  }
  search_provider_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), search_provider);
  // @@protoc_insertion_point(field_set_allocated:pb.remote.ResponseGlobalSearch.search_provider)
}

// repeated .pb.remote.SongMetadata song_metadata = 4;
int ResponseGlobalSearch::song_metadata_size() const {
  return song_metadata_.size();
}
void ResponseGlobalSearch::clear_song_metadata() {
  song_metadata_.Clear();
}
const ::pb::remote::SongMetadata& ResponseGlobalSearch::song_metadata(int index) const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseGlobalSearch.song_metadata)
  return song_metadata_.Get(index);
}
::pb::remote::SongMetadata* ResponseGlobalSearch::mutable_song_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:pb.remote.ResponseGlobalSearch.song_metadata)
  return song_metadata_.Mutable(index);
}
::pb::remote::SongMetadata* ResponseGlobalSearch::add_song_metadata() {
  // @@protoc_insertion_point(field_add:pb.remote.ResponseGlobalSearch.song_metadata)
  return song_metadata_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb::remote::SongMetadata >*
ResponseGlobalSearch::mutable_song_metadata() {
  // @@protoc_insertion_point(field_mutable_list:pb.remote.ResponseGlobalSearch.song_metadata)
  return &song_metadata_;
}
const ::google::protobuf::RepeatedPtrField< ::pb::remote::SongMetadata >&
ResponseGlobalSearch::song_metadata() const {
  // @@protoc_insertion_point(field_list:pb.remote.ResponseGlobalSearch.song_metadata)
  return song_metadata_;
}

// optional bytes search_provider_icon = 5;
bool ResponseGlobalSearch::has_search_provider_icon() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ResponseGlobalSearch::set_has_search_provider_icon() {
  _has_bits_[0] |= 0x00000010u;
}
void ResponseGlobalSearch::clear_has_search_provider_icon() {
  _has_bits_[0] &= ~0x00000010u;
}
void ResponseGlobalSearch::clear_search_provider_icon() {
  search_provider_icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_search_provider_icon();
}
 const ::std::string& ResponseGlobalSearch::search_provider_icon() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseGlobalSearch.search_provider_icon)
  return search_provider_icon_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseGlobalSearch::set_search_provider_icon(const ::std::string& value) {
  set_has_search_provider_icon();
  search_provider_icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.remote.ResponseGlobalSearch.search_provider_icon)
}
 void ResponseGlobalSearch::set_search_provider_icon(const char* value) {
  set_has_search_provider_icon();
  search_provider_icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.remote.ResponseGlobalSearch.search_provider_icon)
}
 void ResponseGlobalSearch::set_search_provider_icon(const void* value, size_t size) {
  set_has_search_provider_icon();
  search_provider_icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.remote.ResponseGlobalSearch.search_provider_icon)
}
 ::std::string* ResponseGlobalSearch::mutable_search_provider_icon() {
  set_has_search_provider_icon();
  // @@protoc_insertion_point(field_mutable:pb.remote.ResponseGlobalSearch.search_provider_icon)
  return search_provider_icon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResponseGlobalSearch::release_search_provider_icon() {
  // @@protoc_insertion_point(field_release:pb.remote.ResponseGlobalSearch.search_provider_icon)
  clear_has_search_provider_icon();
  return search_provider_icon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseGlobalSearch::set_allocated_search_provider_icon(::std::string* search_provider_icon) {
  if (search_provider_icon != NULL) {
    set_has_search_provider_icon();
  } else {
    clear_has_search_provider_icon();
  }
  search_provider_icon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), search_provider_icon);
  // @@protoc_insertion_point(field_set_allocated:pb.remote.ResponseGlobalSearch.search_provider_icon)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseTranscoderStatus::kProcessedFieldNumber;
const int ResponseTranscoderStatus::kTotalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseTranscoderStatus::ResponseTranscoderStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.ResponseTranscoderStatus)
}

void ResponseTranscoderStatus::InitAsDefaultInstance() {
}

ResponseTranscoderStatus::ResponseTranscoderStatus(const ResponseTranscoderStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.remote.ResponseTranscoderStatus)
}

void ResponseTranscoderStatus::SharedCtor() {
  _cached_size_ = 0;
  processed_ = 0;
  total_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseTranscoderStatus::~ResponseTranscoderStatus() {
  // @@protoc_insertion_point(destructor:pb.remote.ResponseTranscoderStatus)
  SharedDtor();
}

void ResponseTranscoderStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseTranscoderStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseTranscoderStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseTranscoderStatus_descriptor_;
}

const ResponseTranscoderStatus& ResponseTranscoderStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remotecontrolmessages_2eproto();
  return *default_instance_;
}

ResponseTranscoderStatus* ResponseTranscoderStatus::default_instance_ = NULL;

ResponseTranscoderStatus* ResponseTranscoderStatus::New(::google::protobuf::Arena* arena) const {
  ResponseTranscoderStatus* n = new ResponseTranscoderStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseTranscoderStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.ResponseTranscoderStatus)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ResponseTranscoderStatus, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ResponseTranscoderStatus*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(processed_, total_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ResponseTranscoderStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.ResponseTranscoderStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 processed = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &processed_)));
          set_has_processed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_total;
        break;
      }

      // optional int32 total = 2;
      case 2: {
        if (tag == 16) {
         parse_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.ResponseTranscoderStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.ResponseTranscoderStatus)
  return false;
#undef DO_
}

void ResponseTranscoderStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.ResponseTranscoderStatus)
  // optional int32 processed = 1;
  if (has_processed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->processed(), output);
  }

  // optional int32 total = 2;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.ResponseTranscoderStatus)
}

::google::protobuf::uint8* ResponseTranscoderStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.ResponseTranscoderStatus)
  // optional int32 processed = 1;
  if (has_processed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->processed(), target);
  }

  // optional int32 total = 2;
  if (has_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.ResponseTranscoderStatus)
  return target;
}

int ResponseTranscoderStatus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.ResponseTranscoderStatus)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 processed = 1;
    if (has_processed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->processed());
    }

    // optional int32 total = 2;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseTranscoderStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.ResponseTranscoderStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponseTranscoderStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseTranscoderStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.ResponseTranscoderStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.ResponseTranscoderStatus)
    MergeFrom(*source);
  }
}

void ResponseTranscoderStatus::MergeFrom(const ResponseTranscoderStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.ResponseTranscoderStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_processed()) {
      set_processed(from.processed());
    }
    if (from.has_total()) {
      set_total(from.total());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ResponseTranscoderStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.ResponseTranscoderStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseTranscoderStatus::CopyFrom(const ResponseTranscoderStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.ResponseTranscoderStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseTranscoderStatus::IsInitialized() const {

  return true;
}

void ResponseTranscoderStatus::Swap(ResponseTranscoderStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseTranscoderStatus::InternalSwap(ResponseTranscoderStatus* other) {
  std::swap(processed_, other->processed_);
  std::swap(total_, other->total_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseTranscoderStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseTranscoderStatus_descriptor_;
  metadata.reflection = ResponseTranscoderStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseTranscoderStatus

// optional int32 processed = 1;
bool ResponseTranscoderStatus::has_processed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ResponseTranscoderStatus::set_has_processed() {
  _has_bits_[0] |= 0x00000001u;
}
void ResponseTranscoderStatus::clear_has_processed() {
  _has_bits_[0] &= ~0x00000001u;
}
void ResponseTranscoderStatus::clear_processed() {
  processed_ = 0;
  clear_has_processed();
}
 ::google::protobuf::int32 ResponseTranscoderStatus::processed() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseTranscoderStatus.processed)
  return processed_;
}
 void ResponseTranscoderStatus::set_processed(::google::protobuf::int32 value) {
  set_has_processed();
  processed_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.ResponseTranscoderStatus.processed)
}

// optional int32 total = 2;
bool ResponseTranscoderStatus::has_total() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ResponseTranscoderStatus::set_has_total() {
  _has_bits_[0] |= 0x00000002u;
}
void ResponseTranscoderStatus::clear_has_total() {
  _has_bits_[0] &= ~0x00000002u;
}
void ResponseTranscoderStatus::clear_total() {
  total_ = 0;
  clear_has_total();
}
 ::google::protobuf::int32 ResponseTranscoderStatus::total() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseTranscoderStatus.total)
  return total_;
}
 void ResponseTranscoderStatus::set_total(::google::protobuf::int32 value) {
  set_has_total();
  total_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.ResponseTranscoderStatus.total)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseGlobalSearchStatus::kIdFieldNumber;
const int ResponseGlobalSearchStatus::kQueryFieldNumber;
const int ResponseGlobalSearchStatus::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseGlobalSearchStatus::ResponseGlobalSearchStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.ResponseGlobalSearchStatus)
}

void ResponseGlobalSearchStatus::InitAsDefaultInstance() {
}

ResponseGlobalSearchStatus::ResponseGlobalSearchStatus(const ResponseGlobalSearchStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.remote.ResponseGlobalSearchStatus)
}

void ResponseGlobalSearchStatus::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseGlobalSearchStatus::~ResponseGlobalSearchStatus() {
  // @@protoc_insertion_point(destructor:pb.remote.ResponseGlobalSearchStatus)
  SharedDtor();
}

void ResponseGlobalSearchStatus::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ResponseGlobalSearchStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseGlobalSearchStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseGlobalSearchStatus_descriptor_;
}

const ResponseGlobalSearchStatus& ResponseGlobalSearchStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remotecontrolmessages_2eproto();
  return *default_instance_;
}

ResponseGlobalSearchStatus* ResponseGlobalSearchStatus::default_instance_ = NULL;

ResponseGlobalSearchStatus* ResponseGlobalSearchStatus::New(::google::protobuf::Arena* arena) const {
  ResponseGlobalSearchStatus* n = new ResponseGlobalSearchStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseGlobalSearchStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.ResponseGlobalSearchStatus)
  if (_has_bits_[0 / 32] & 7u) {
    id_ = 0;
    if (has_query()) {
      query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    status_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ResponseGlobalSearchStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.ResponseGlobalSearchStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_query;
        break;
      }

      // optional string query = 2;
      case 2: {
        if (tag == 18) {
         parse_query:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query().data(), this->query().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.remote.ResponseGlobalSearchStatus.query");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional .pb.remote.GlobalSearchStatus status = 3;
      case 3: {
        if (tag == 24) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::remote::GlobalSearchStatus_IsValid(value)) {
            set_status(static_cast< ::pb::remote::GlobalSearchStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.ResponseGlobalSearchStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.ResponseGlobalSearchStatus)
  return false;
#undef DO_
}

void ResponseGlobalSearchStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.ResponseGlobalSearchStatus)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string query = 2;
  if (has_query()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.ResponseGlobalSearchStatus.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->query(), output);
  }

  // optional .pb.remote.GlobalSearchStatus status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.ResponseGlobalSearchStatus)
}

::google::protobuf::uint8* ResponseGlobalSearchStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.ResponseGlobalSearchStatus)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string query = 2;
  if (has_query()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.ResponseGlobalSearchStatus.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->query(), target);
  }

  // optional .pb.remote.GlobalSearchStatus status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.ResponseGlobalSearchStatus)
  return target;
}

int ResponseGlobalSearchStatus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.ResponseGlobalSearchStatus)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string query = 2;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query());
    }

    // optional .pb.remote.GlobalSearchStatus status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseGlobalSearchStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.ResponseGlobalSearchStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponseGlobalSearchStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseGlobalSearchStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.ResponseGlobalSearchStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.ResponseGlobalSearchStatus)
    MergeFrom(*source);
  }
}

void ResponseGlobalSearchStatus::MergeFrom(const ResponseGlobalSearchStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.ResponseGlobalSearchStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_query()) {
      set_has_query();
      query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ResponseGlobalSearchStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.ResponseGlobalSearchStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseGlobalSearchStatus::CopyFrom(const ResponseGlobalSearchStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.ResponseGlobalSearchStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseGlobalSearchStatus::IsInitialized() const {

  return true;
}

void ResponseGlobalSearchStatus::Swap(ResponseGlobalSearchStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseGlobalSearchStatus::InternalSwap(ResponseGlobalSearchStatus* other) {
  std::swap(id_, other->id_);
  query_.Swap(&other->query_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseGlobalSearchStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseGlobalSearchStatus_descriptor_;
  metadata.reflection = ResponseGlobalSearchStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseGlobalSearchStatus

// optional int32 id = 1;
bool ResponseGlobalSearchStatus::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ResponseGlobalSearchStatus::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ResponseGlobalSearchStatus::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ResponseGlobalSearchStatus::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 ResponseGlobalSearchStatus::id() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseGlobalSearchStatus.id)
  return id_;
}
 void ResponseGlobalSearchStatus::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.ResponseGlobalSearchStatus.id)
}

// optional string query = 2;
bool ResponseGlobalSearchStatus::has_query() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ResponseGlobalSearchStatus::set_has_query() {
  _has_bits_[0] |= 0x00000002u;
}
void ResponseGlobalSearchStatus::clear_has_query() {
  _has_bits_[0] &= ~0x00000002u;
}
void ResponseGlobalSearchStatus::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
 const ::std::string& ResponseGlobalSearchStatus::query() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseGlobalSearchStatus.query)
  return query_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseGlobalSearchStatus::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.remote.ResponseGlobalSearchStatus.query)
}
 void ResponseGlobalSearchStatus::set_query(const char* value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.remote.ResponseGlobalSearchStatus.query)
}
 void ResponseGlobalSearchStatus::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.remote.ResponseGlobalSearchStatus.query)
}
 ::std::string* ResponseGlobalSearchStatus::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:pb.remote.ResponseGlobalSearchStatus.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResponseGlobalSearchStatus::release_query() {
  // @@protoc_insertion_point(field_release:pb.remote.ResponseGlobalSearchStatus.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseGlobalSearchStatus::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:pb.remote.ResponseGlobalSearchStatus.query)
}

// optional .pb.remote.GlobalSearchStatus status = 3;
bool ResponseGlobalSearchStatus::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ResponseGlobalSearchStatus::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
void ResponseGlobalSearchStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void ResponseGlobalSearchStatus::clear_status() {
  status_ = 1;
  clear_has_status();
}
 ::pb::remote::GlobalSearchStatus ResponseGlobalSearchStatus::status() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseGlobalSearchStatus.status)
  return static_cast< ::pb::remote::GlobalSearchStatus >(status_);
}
 void ResponseGlobalSearchStatus::set_status(::pb::remote::GlobalSearchStatus value) {
  assert(::pb::remote::GlobalSearchStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.ResponseGlobalSearchStatus.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message::kVersionFieldNumber;
const int Message::kTypeFieldNumber;
const int Message::kRequestConnectFieldNumber;
const int Message::kRequestPlaylistsFieldNumber;
const int Message::kRequestPlaylistSongsFieldNumber;
const int Message::kRequestChangeSongFieldNumber;
const int Message::kRequestSetVolumeFieldNumber;
const int Message::kRequestSetTrackPositionFieldNumber;
const int Message::kRequestInsertUrlsFieldNumber;
const int Message::kRequestRemoveSongsFieldNumber;
const int Message::kRequestOpenPlaylistFieldNumber;
const int Message::kRequestClosePlaylistFieldNumber;
const int Message::kRequestDownloadSongsFieldNumber;
const int Message::kRequestRateSongFieldNumber;
const int Message::kRequestGlobalSearchFieldNumber;
const int Message::kRepeatFieldNumber;
const int Message::kShuffleFieldNumber;
const int Message::kResponseClementineInfoFieldNumber;
const int Message::kResponseCurrentMetadataFieldNumber;
const int Message::kResponsePlaylistsFieldNumber;
const int Message::kResponsePlaylistSongsFieldNumber;
const int Message::kResponseEngineStateChangedFieldNumber;
const int Message::kResponseUpdateTrackPositionFieldNumber;
const int Message::kResponseDisconnectFieldNumber;
const int Message::kResponseActiveChangedFieldNumber;
const int Message::kResponseLyricsFieldNumber;
const int Message::kResponseSongFileChunkFieldNumber;
const int Message::kResponseSongOfferFieldNumber;
const int Message::kResponseLibraryChunkFieldNumber;
const int Message::kResponseDownloadTotalSizeFieldNumber;
const int Message::kResponseGlobalSearchFieldNumber;
const int Message::kResponseTranscoderStatusFieldNumber;
const int Message::kResponseGlobalSearchStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message::Message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.Message)
}

void Message::InitAsDefaultInstance() {
  request_connect_ = const_cast< ::pb::remote::RequestConnect*>(&::pb::remote::RequestConnect::default_instance());
  request_playlists_ = const_cast< ::pb::remote::RequestPlaylists*>(&::pb::remote::RequestPlaylists::default_instance());
  request_playlist_songs_ = const_cast< ::pb::remote::RequestPlaylistSongs*>(&::pb::remote::RequestPlaylistSongs::default_instance());
  request_change_song_ = const_cast< ::pb::remote::RequestChangeSong*>(&::pb::remote::RequestChangeSong::default_instance());
  request_set_volume_ = const_cast< ::pb::remote::RequestSetVolume*>(&::pb::remote::RequestSetVolume::default_instance());
  request_set_track_position_ = const_cast< ::pb::remote::RequestSetTrackPosition*>(&::pb::remote::RequestSetTrackPosition::default_instance());
  request_insert_urls_ = const_cast< ::pb::remote::RequestInsertUrls*>(&::pb::remote::RequestInsertUrls::default_instance());
  request_remove_songs_ = const_cast< ::pb::remote::RequestRemoveSongs*>(&::pb::remote::RequestRemoveSongs::default_instance());
  request_open_playlist_ = const_cast< ::pb::remote::RequestOpenPlaylist*>(&::pb::remote::RequestOpenPlaylist::default_instance());
  request_close_playlist_ = const_cast< ::pb::remote::RequestClosePlaylist*>(&::pb::remote::RequestClosePlaylist::default_instance());
  request_download_songs_ = const_cast< ::pb::remote::RequestDownloadSongs*>(&::pb::remote::RequestDownloadSongs::default_instance());
  request_rate_song_ = const_cast< ::pb::remote::RequestRateSong*>(&::pb::remote::RequestRateSong::default_instance());
  request_global_search_ = const_cast< ::pb::remote::RequestGlobalSearch*>(&::pb::remote::RequestGlobalSearch::default_instance());
  repeat_ = const_cast< ::pb::remote::Repeat*>(&::pb::remote::Repeat::default_instance());
  shuffle_ = const_cast< ::pb::remote::Shuffle*>(&::pb::remote::Shuffle::default_instance());
  response_clementine_info_ = const_cast< ::pb::remote::ResponseClementineInfo*>(&::pb::remote::ResponseClementineInfo::default_instance());
  response_current_metadata_ = const_cast< ::pb::remote::ResponseCurrentMetadata*>(&::pb::remote::ResponseCurrentMetadata::default_instance());
  response_playlists_ = const_cast< ::pb::remote::ResponsePlaylists*>(&::pb::remote::ResponsePlaylists::default_instance());
  response_playlist_songs_ = const_cast< ::pb::remote::ResponsePlaylistSongs*>(&::pb::remote::ResponsePlaylistSongs::default_instance());
  response_engine_state_changed_ = const_cast< ::pb::remote::ResponseEngineStateChanged*>(&::pb::remote::ResponseEngineStateChanged::default_instance());
  response_update_track_position_ = const_cast< ::pb::remote::ResponseUpdateTrackPosition*>(&::pb::remote::ResponseUpdateTrackPosition::default_instance());
  response_disconnect_ = const_cast< ::pb::remote::ResponseDisconnect*>(&::pb::remote::ResponseDisconnect::default_instance());
  response_active_changed_ = const_cast< ::pb::remote::ResponseActiveChanged*>(&::pb::remote::ResponseActiveChanged::default_instance());
  response_lyrics_ = const_cast< ::pb::remote::ResponseLyrics*>(&::pb::remote::ResponseLyrics::default_instance());
  response_song_file_chunk_ = const_cast< ::pb::remote::ResponseSongFileChunk*>(&::pb::remote::ResponseSongFileChunk::default_instance());
  response_song_offer_ = const_cast< ::pb::remote::ResponseSongOffer*>(&::pb::remote::ResponseSongOffer::default_instance());
  response_library_chunk_ = const_cast< ::pb::remote::ResponseLibraryChunk*>(&::pb::remote::ResponseLibraryChunk::default_instance());
  response_download_total_size_ = const_cast< ::pb::remote::ResponseDownloadTotalSize*>(&::pb::remote::ResponseDownloadTotalSize::default_instance());
  response_global_search_ = const_cast< ::pb::remote::ResponseGlobalSearch*>(&::pb::remote::ResponseGlobalSearch::default_instance());
  response_transcoder_status_ = const_cast< ::pb::remote::ResponseTranscoderStatus*>(&::pb::remote::ResponseTranscoderStatus::default_instance());
  response_global_search_status_ = const_cast< ::pb::remote::ResponseGlobalSearchStatus*>(&::pb::remote::ResponseGlobalSearchStatus::default_instance());
}

Message::Message(const Message& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.remote.Message)
}

void Message::SharedCtor() {
  _cached_size_ = 0;
  version_ = 21;
  type_ = 0;
  request_connect_ = NULL;
  request_playlists_ = NULL;
  request_playlist_songs_ = NULL;
  request_change_song_ = NULL;
  request_set_volume_ = NULL;
  request_set_track_position_ = NULL;
  request_insert_urls_ = NULL;
  request_remove_songs_ = NULL;
  request_open_playlist_ = NULL;
  request_close_playlist_ = NULL;
  request_download_songs_ = NULL;
  request_rate_song_ = NULL;
  request_global_search_ = NULL;
  repeat_ = NULL;
  shuffle_ = NULL;
  response_clementine_info_ = NULL;
  response_current_metadata_ = NULL;
  response_playlists_ = NULL;
  response_playlist_songs_ = NULL;
  response_engine_state_changed_ = NULL;
  response_update_track_position_ = NULL;
  response_disconnect_ = NULL;
  response_active_changed_ = NULL;
  response_lyrics_ = NULL;
  response_song_file_chunk_ = NULL;
  response_song_offer_ = NULL;
  response_library_chunk_ = NULL;
  response_download_total_size_ = NULL;
  response_global_search_ = NULL;
  response_transcoder_status_ = NULL;
  response_global_search_status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:pb.remote.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  if (this != default_instance_) {
    delete request_connect_;
    delete request_playlists_;
    delete request_playlist_songs_;
    delete request_change_song_;
    delete request_set_volume_;
    delete request_set_track_position_;
    delete request_insert_urls_;
    delete request_remove_songs_;
    delete request_open_playlist_;
    delete request_close_playlist_;
    delete request_download_songs_;
    delete request_rate_song_;
    delete request_global_search_;
    delete repeat_;
    delete shuffle_;
    delete response_clementine_info_;
    delete response_current_metadata_;
    delete response_playlists_;
    delete response_playlist_songs_;
    delete response_engine_state_changed_;
    delete response_update_track_position_;
    delete response_disconnect_;
    delete response_active_changed_;
    delete response_lyrics_;
    delete response_song_file_chunk_;
    delete response_song_offer_;
    delete response_library_chunk_;
    delete response_download_total_size_;
    delete response_global_search_;
    delete response_transcoder_status_;
    delete response_global_search_status_;
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_descriptor_;
}

const Message& Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remotecontrolmessages_2eproto();
  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New(::google::protobuf::Arena* arena) const {
  Message* n = new Message;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.Message)
  if (_has_bits_[0 / 32] & 255u) {
    version_ = 21;
    type_ = 0;
    if (has_request_connect()) {
      if (request_connect_ != NULL) request_connect_->::pb::remote::RequestConnect::Clear();
    }
    if (has_request_playlists()) {
      if (request_playlists_ != NULL) request_playlists_->::pb::remote::RequestPlaylists::Clear();
    }
    if (has_request_playlist_songs()) {
      if (request_playlist_songs_ != NULL) request_playlist_songs_->::pb::remote::RequestPlaylistSongs::Clear();
    }
    if (has_request_change_song()) {
      if (request_change_song_ != NULL) request_change_song_->::pb::remote::RequestChangeSong::Clear();
    }
    if (has_request_set_volume()) {
      if (request_set_volume_ != NULL) request_set_volume_->::pb::remote::RequestSetVolume::Clear();
    }
    if (has_request_set_track_position()) {
      if (request_set_track_position_ != NULL) request_set_track_position_->::pb::remote::RequestSetTrackPosition::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    if (has_request_insert_urls()) {
      if (request_insert_urls_ != NULL) request_insert_urls_->::pb::remote::RequestInsertUrls::Clear();
    }
    if (has_request_remove_songs()) {
      if (request_remove_songs_ != NULL) request_remove_songs_->::pb::remote::RequestRemoveSongs::Clear();
    }
    if (has_request_open_playlist()) {
      if (request_open_playlist_ != NULL) request_open_playlist_->::pb::remote::RequestOpenPlaylist::Clear();
    }
    if (has_request_close_playlist()) {
      if (request_close_playlist_ != NULL) request_close_playlist_->::pb::remote::RequestClosePlaylist::Clear();
    }
    if (has_request_download_songs()) {
      if (request_download_songs_ != NULL) request_download_songs_->::pb::remote::RequestDownloadSongs::Clear();
    }
    if (has_request_rate_song()) {
      if (request_rate_song_ != NULL) request_rate_song_->::pb::remote::RequestRateSong::Clear();
    }
    if (has_request_global_search()) {
      if (request_global_search_ != NULL) request_global_search_->::pb::remote::RequestGlobalSearch::Clear();
    }
    if (has_repeat()) {
      if (repeat_ != NULL) repeat_->::pb::remote::Repeat::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    if (has_shuffle()) {
      if (shuffle_ != NULL) shuffle_->::pb::remote::Shuffle::Clear();
    }
    if (has_response_clementine_info()) {
      if (response_clementine_info_ != NULL) response_clementine_info_->::pb::remote::ResponseClementineInfo::Clear();
    }
    if (has_response_current_metadata()) {
      if (response_current_metadata_ != NULL) response_current_metadata_->::pb::remote::ResponseCurrentMetadata::Clear();
    }
    if (has_response_playlists()) {
      if (response_playlists_ != NULL) response_playlists_->::pb::remote::ResponsePlaylists::Clear();
    }
    if (has_response_playlist_songs()) {
      if (response_playlist_songs_ != NULL) response_playlist_songs_->::pb::remote::ResponsePlaylistSongs::Clear();
    }
    if (has_response_engine_state_changed()) {
      if (response_engine_state_changed_ != NULL) response_engine_state_changed_->::pb::remote::ResponseEngineStateChanged::Clear();
    }
    if (has_response_update_track_position()) {
      if (response_update_track_position_ != NULL) response_update_track_position_->::pb::remote::ResponseUpdateTrackPosition::Clear();
    }
    if (has_response_disconnect()) {
      if (response_disconnect_ != NULL) response_disconnect_->::pb::remote::ResponseDisconnect::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    if (has_response_active_changed()) {
      if (response_active_changed_ != NULL) response_active_changed_->::pb::remote::ResponseActiveChanged::Clear();
    }
    if (has_response_lyrics()) {
      if (response_lyrics_ != NULL) response_lyrics_->::pb::remote::ResponseLyrics::Clear();
    }
    if (has_response_song_file_chunk()) {
      if (response_song_file_chunk_ != NULL) response_song_file_chunk_->::pb::remote::ResponseSongFileChunk::Clear();
    }
    if (has_response_song_offer()) {
      if (response_song_offer_ != NULL) response_song_offer_->::pb::remote::ResponseSongOffer::Clear();
    }
    if (has_response_library_chunk()) {
      if (response_library_chunk_ != NULL) response_library_chunk_->::pb::remote::ResponseLibraryChunk::Clear();
    }
    if (has_response_download_total_size()) {
      if (response_download_total_size_ != NULL) response_download_total_size_->::pb::remote::ResponseDownloadTotalSize::Clear();
    }
    if (has_response_global_search()) {
      if (response_global_search_ != NULL) response_global_search_->::pb::remote::ResponseGlobalSearch::Clear();
    }
    if (has_response_transcoder_status()) {
      if (response_transcoder_status_ != NULL) response_transcoder_status_->::pb::remote::ResponseTranscoderStatus::Clear();
    }
  }
  if (has_response_global_search_status()) {
    if (response_global_search_status_ != NULL) response_global_search_status_->::pb::remote::ResponseGlobalSearchStatus::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 version = 1 [default = 21];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .pb.remote.MsgType type = 2 [default = UNKNOWN];
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::remote::MsgType_IsValid(value)) {
            set_type(static_cast< ::pb::remote::MsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_request_playlist_songs;
        break;
      }

      // optional .pb.remote.RequestPlaylistSongs request_playlist_songs = 10;
      case 10: {
        if (tag == 82) {
         parse_request_playlist_songs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request_playlist_songs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_request_change_song;
        break;
      }

      // optional .pb.remote.RequestChangeSong request_change_song = 11;
      case 11: {
        if (tag == 90) {
         parse_request_change_song:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request_change_song()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_request_set_volume;
        break;
      }

      // optional .pb.remote.RequestSetVolume request_set_volume = 12;
      case 12: {
        if (tag == 98) {
         parse_request_set_volume:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request_set_volume()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_repeat;
        break;
      }

      // optional .pb.remote.Repeat repeat = 13;
      case 13: {
        if (tag == 106) {
         parse_repeat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_repeat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_shuffle;
        break;
      }

      // optional .pb.remote.Shuffle shuffle = 14;
      case 14: {
        if (tag == 114) {
         parse_shuffle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shuffle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_response_clementine_info;
        break;
      }

      // optional .pb.remote.ResponseClementineInfo response_clementine_info = 15;
      case 15: {
        if (tag == 122) {
         parse_response_clementine_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response_clementine_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_response_current_metadata;
        break;
      }

      // optional .pb.remote.ResponseCurrentMetadata response_current_metadata = 16;
      case 16: {
        if (tag == 130) {
         parse_response_current_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response_current_metadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_response_playlists;
        break;
      }

      // optional .pb.remote.ResponsePlaylists response_playlists = 17;
      case 17: {
        if (tag == 138) {
         parse_response_playlists:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response_playlists()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_response_playlist_songs;
        break;
      }

      // optional .pb.remote.ResponsePlaylistSongs response_playlist_songs = 18;
      case 18: {
        if (tag == 146) {
         parse_response_playlist_songs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response_playlist_songs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_response_engine_state_changed;
        break;
      }

      // optional .pb.remote.ResponseEngineStateChanged response_engine_state_changed = 19;
      case 19: {
        if (tag == 154) {
         parse_response_engine_state_changed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response_engine_state_changed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_response_update_track_position;
        break;
      }

      // optional .pb.remote.ResponseUpdateTrackPosition response_update_track_position = 20;
      case 20: {
        if (tag == 162) {
         parse_response_update_track_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response_update_track_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_request_connect;
        break;
      }

      // optional .pb.remote.RequestConnect request_connect = 21;
      case 21: {
        if (tag == 170) {
         parse_request_connect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request_connect()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_response_disconnect;
        break;
      }

      // optional .pb.remote.ResponseDisconnect response_disconnect = 22;
      case 22: {
        if (tag == 178) {
         parse_response_disconnect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response_disconnect()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_request_set_track_position;
        break;
      }

      // optional .pb.remote.RequestSetTrackPosition request_set_track_position = 23;
      case 23: {
        if (tag == 186) {
         parse_request_set_track_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request_set_track_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_response_active_changed;
        break;
      }

      // optional .pb.remote.ResponseActiveChanged response_active_changed = 24;
      case 24: {
        if (tag == 194) {
         parse_response_active_changed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response_active_changed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_request_insert_urls;
        break;
      }

      // optional .pb.remote.RequestInsertUrls request_insert_urls = 25;
      case 25: {
        if (tag == 202) {
         parse_request_insert_urls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request_insert_urls()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_request_remove_songs;
        break;
      }

      // optional .pb.remote.RequestRemoveSongs request_remove_songs = 26;
      case 26: {
        if (tag == 210) {
         parse_request_remove_songs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request_remove_songs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_request_playlists;
        break;
      }

      // optional .pb.remote.RequestPlaylists request_playlists = 27;
      case 27: {
        if (tag == 218) {
         parse_request_playlists:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request_playlists()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_request_open_playlist;
        break;
      }

      // optional .pb.remote.RequestOpenPlaylist request_open_playlist = 28;
      case 28: {
        if (tag == 226) {
         parse_request_open_playlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request_open_playlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_request_close_playlist;
        break;
      }

      // optional .pb.remote.RequestClosePlaylist request_close_playlist = 29;
      case 29: {
        if (tag == 234) {
         parse_request_close_playlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request_close_playlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_response_lyrics;
        break;
      }

      // optional .pb.remote.ResponseLyrics response_lyrics = 30;
      case 30: {
        if (tag == 242) {
         parse_response_lyrics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response_lyrics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_request_download_songs;
        break;
      }

      // optional .pb.remote.RequestDownloadSongs request_download_songs = 31;
      case 31: {
        if (tag == 250) {
         parse_request_download_songs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request_download_songs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_response_song_file_chunk;
        break;
      }

      // optional .pb.remote.ResponseSongFileChunk response_song_file_chunk = 32;
      case 32: {
        if (tag == 258) {
         parse_response_song_file_chunk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response_song_file_chunk()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(266)) goto parse_response_song_offer;
        break;
      }

      // optional .pb.remote.ResponseSongOffer response_song_offer = 33;
      case 33: {
        if (tag == 266) {
         parse_response_song_offer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response_song_offer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(274)) goto parse_response_library_chunk;
        break;
      }

      // optional .pb.remote.ResponseLibraryChunk response_library_chunk = 34;
      case 34: {
        if (tag == 274) {
         parse_response_library_chunk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response_library_chunk()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(282)) goto parse_request_rate_song;
        break;
      }

      // optional .pb.remote.RequestRateSong request_rate_song = 35;
      case 35: {
        if (tag == 282) {
         parse_request_rate_song:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request_rate_song()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(290)) goto parse_response_download_total_size;
        break;
      }

      // optional .pb.remote.ResponseDownloadTotalSize response_download_total_size = 36;
      case 36: {
        if (tag == 290) {
         parse_response_download_total_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response_download_total_size()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(298)) goto parse_request_global_search;
        break;
      }

      // optional .pb.remote.RequestGlobalSearch request_global_search = 37;
      case 37: {
        if (tag == 298) {
         parse_request_global_search:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request_global_search()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(306)) goto parse_response_global_search;
        break;
      }

      // optional .pb.remote.ResponseGlobalSearch response_global_search = 38;
      case 38: {
        if (tag == 306) {
         parse_response_global_search:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response_global_search()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(314)) goto parse_response_transcoder_status;
        break;
      }

      // optional .pb.remote.ResponseTranscoderStatus response_transcoder_status = 39;
      case 39: {
        if (tag == 314) {
         parse_response_transcoder_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response_transcoder_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(322)) goto parse_response_global_search_status;
        break;
      }

      // optional .pb.remote.ResponseGlobalSearchStatus response_global_search_status = 40;
      case 40: {
        if (tag == 322) {
         parse_response_global_search_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response_global_search_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.Message)
  // optional int32 version = 1 [default = 21];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // optional .pb.remote.MsgType type = 2 [default = UNKNOWN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .pb.remote.RequestPlaylistSongs request_playlist_songs = 10;
  if (has_request_playlist_songs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->request_playlist_songs_, output);
  }

  // optional .pb.remote.RequestChangeSong request_change_song = 11;
  if (has_request_change_song()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->request_change_song_, output);
  }

  // optional .pb.remote.RequestSetVolume request_set_volume = 12;
  if (has_request_set_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->request_set_volume_, output);
  }

  // optional .pb.remote.Repeat repeat = 13;
  if (has_repeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->repeat_, output);
  }

  // optional .pb.remote.Shuffle shuffle = 14;
  if (has_shuffle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->shuffle_, output);
  }

  // optional .pb.remote.ResponseClementineInfo response_clementine_info = 15;
  if (has_response_clementine_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->response_clementine_info_, output);
  }

  // optional .pb.remote.ResponseCurrentMetadata response_current_metadata = 16;
  if (has_response_current_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->response_current_metadata_, output);
  }

  // optional .pb.remote.ResponsePlaylists response_playlists = 17;
  if (has_response_playlists()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->response_playlists_, output);
  }

  // optional .pb.remote.ResponsePlaylistSongs response_playlist_songs = 18;
  if (has_response_playlist_songs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->response_playlist_songs_, output);
  }

  // optional .pb.remote.ResponseEngineStateChanged response_engine_state_changed = 19;
  if (has_response_engine_state_changed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *this->response_engine_state_changed_, output);
  }

  // optional .pb.remote.ResponseUpdateTrackPosition response_update_track_position = 20;
  if (has_response_update_track_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->response_update_track_position_, output);
  }

  // optional .pb.remote.RequestConnect request_connect = 21;
  if (has_request_connect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->request_connect_, output);
  }

  // optional .pb.remote.ResponseDisconnect response_disconnect = 22;
  if (has_response_disconnect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *this->response_disconnect_, output);
  }

  // optional .pb.remote.RequestSetTrackPosition request_set_track_position = 23;
  if (has_request_set_track_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, *this->request_set_track_position_, output);
  }

  // optional .pb.remote.ResponseActiveChanged response_active_changed = 24;
  if (has_response_active_changed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, *this->response_active_changed_, output);
  }

  // optional .pb.remote.RequestInsertUrls request_insert_urls = 25;
  if (has_request_insert_urls()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, *this->request_insert_urls_, output);
  }

  // optional .pb.remote.RequestRemoveSongs request_remove_songs = 26;
  if (has_request_remove_songs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, *this->request_remove_songs_, output);
  }

  // optional .pb.remote.RequestPlaylists request_playlists = 27;
  if (has_request_playlists()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, *this->request_playlists_, output);
  }

  // optional .pb.remote.RequestOpenPlaylist request_open_playlist = 28;
  if (has_request_open_playlist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, *this->request_open_playlist_, output);
  }

  // optional .pb.remote.RequestClosePlaylist request_close_playlist = 29;
  if (has_request_close_playlist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, *this->request_close_playlist_, output);
  }

  // optional .pb.remote.ResponseLyrics response_lyrics = 30;
  if (has_response_lyrics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, *this->response_lyrics_, output);
  }

  // optional .pb.remote.RequestDownloadSongs request_download_songs = 31;
  if (has_request_download_songs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, *this->request_download_songs_, output);
  }

  // optional .pb.remote.ResponseSongFileChunk response_song_file_chunk = 32;
  if (has_response_song_file_chunk()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, *this->response_song_file_chunk_, output);
  }

  // optional .pb.remote.ResponseSongOffer response_song_offer = 33;
  if (has_response_song_offer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, *this->response_song_offer_, output);
  }

  // optional .pb.remote.ResponseLibraryChunk response_library_chunk = 34;
  if (has_response_library_chunk()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, *this->response_library_chunk_, output);
  }

  // optional .pb.remote.RequestRateSong request_rate_song = 35;
  if (has_request_rate_song()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, *this->request_rate_song_, output);
  }

  // optional .pb.remote.ResponseDownloadTotalSize response_download_total_size = 36;
  if (has_response_download_total_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, *this->response_download_total_size_, output);
  }

  // optional .pb.remote.RequestGlobalSearch request_global_search = 37;
  if (has_request_global_search()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, *this->request_global_search_, output);
  }

  // optional .pb.remote.ResponseGlobalSearch response_global_search = 38;
  if (has_response_global_search()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, *this->response_global_search_, output);
  }

  // optional .pb.remote.ResponseTranscoderStatus response_transcoder_status = 39;
  if (has_response_transcoder_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, *this->response_transcoder_status_, output);
  }

  // optional .pb.remote.ResponseGlobalSearchStatus response_global_search_status = 40;
  if (has_response_global_search_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, *this->response_global_search_status_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.Message)
}

::google::protobuf::uint8* Message::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.Message)
  // optional int32 version = 1 [default = 21];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // optional .pb.remote.MsgType type = 2 [default = UNKNOWN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .pb.remote.RequestPlaylistSongs request_playlist_songs = 10;
  if (has_request_playlist_songs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->request_playlist_songs_, false, target);
  }

  // optional .pb.remote.RequestChangeSong request_change_song = 11;
  if (has_request_change_song()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->request_change_song_, false, target);
  }

  // optional .pb.remote.RequestSetVolume request_set_volume = 12;
  if (has_request_set_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->request_set_volume_, false, target);
  }

  // optional .pb.remote.Repeat repeat = 13;
  if (has_repeat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->repeat_, false, target);
  }

  // optional .pb.remote.Shuffle shuffle = 14;
  if (has_shuffle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->shuffle_, false, target);
  }

  // optional .pb.remote.ResponseClementineInfo response_clementine_info = 15;
  if (has_response_clementine_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->response_clementine_info_, false, target);
  }

  // optional .pb.remote.ResponseCurrentMetadata response_current_metadata = 16;
  if (has_response_current_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->response_current_metadata_, false, target);
  }

  // optional .pb.remote.ResponsePlaylists response_playlists = 17;
  if (has_response_playlists()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->response_playlists_, false, target);
  }

  // optional .pb.remote.ResponsePlaylistSongs response_playlist_songs = 18;
  if (has_response_playlist_songs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *this->response_playlist_songs_, false, target);
  }

  // optional .pb.remote.ResponseEngineStateChanged response_engine_state_changed = 19;
  if (has_response_engine_state_changed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, *this->response_engine_state_changed_, false, target);
  }

  // optional .pb.remote.ResponseUpdateTrackPosition response_update_track_position = 20;
  if (has_response_update_track_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->response_update_track_position_, false, target);
  }

  // optional .pb.remote.RequestConnect request_connect = 21;
  if (has_request_connect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *this->request_connect_, false, target);
  }

  // optional .pb.remote.ResponseDisconnect response_disconnect = 22;
  if (has_response_disconnect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, *this->response_disconnect_, false, target);
  }

  // optional .pb.remote.RequestSetTrackPosition request_set_track_position = 23;
  if (has_request_set_track_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        23, *this->request_set_track_position_, false, target);
  }

  // optional .pb.remote.ResponseActiveChanged response_active_changed = 24;
  if (has_response_active_changed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        24, *this->response_active_changed_, false, target);
  }

  // optional .pb.remote.RequestInsertUrls request_insert_urls = 25;
  if (has_request_insert_urls()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        25, *this->request_insert_urls_, false, target);
  }

  // optional .pb.remote.RequestRemoveSongs request_remove_songs = 26;
  if (has_request_remove_songs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        26, *this->request_remove_songs_, false, target);
  }

  // optional .pb.remote.RequestPlaylists request_playlists = 27;
  if (has_request_playlists()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        27, *this->request_playlists_, false, target);
  }

  // optional .pb.remote.RequestOpenPlaylist request_open_playlist = 28;
  if (has_request_open_playlist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        28, *this->request_open_playlist_, false, target);
  }

  // optional .pb.remote.RequestClosePlaylist request_close_playlist = 29;
  if (has_request_close_playlist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        29, *this->request_close_playlist_, false, target);
  }

  // optional .pb.remote.ResponseLyrics response_lyrics = 30;
  if (has_response_lyrics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        30, *this->response_lyrics_, false, target);
  }

  // optional .pb.remote.RequestDownloadSongs request_download_songs = 31;
  if (has_request_download_songs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        31, *this->request_download_songs_, false, target);
  }

  // optional .pb.remote.ResponseSongFileChunk response_song_file_chunk = 32;
  if (has_response_song_file_chunk()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        32, *this->response_song_file_chunk_, false, target);
  }

  // optional .pb.remote.ResponseSongOffer response_song_offer = 33;
  if (has_response_song_offer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        33, *this->response_song_offer_, false, target);
  }

  // optional .pb.remote.ResponseLibraryChunk response_library_chunk = 34;
  if (has_response_library_chunk()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        34, *this->response_library_chunk_, false, target);
  }

  // optional .pb.remote.RequestRateSong request_rate_song = 35;
  if (has_request_rate_song()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        35, *this->request_rate_song_, false, target);
  }

  // optional .pb.remote.ResponseDownloadTotalSize response_download_total_size = 36;
  if (has_response_download_total_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        36, *this->response_download_total_size_, false, target);
  }

  // optional .pb.remote.RequestGlobalSearch request_global_search = 37;
  if (has_request_global_search()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        37, *this->request_global_search_, false, target);
  }

  // optional .pb.remote.ResponseGlobalSearch response_global_search = 38;
  if (has_response_global_search()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        38, *this->response_global_search_, false, target);
  }

  // optional .pb.remote.ResponseTranscoderStatus response_transcoder_status = 39;
  if (has_response_transcoder_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        39, *this->response_transcoder_status_, false, target);
  }

  // optional .pb.remote.ResponseGlobalSearchStatus response_global_search_status = 40;
  if (has_response_global_search_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        40, *this->response_global_search_status_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.Message)
  return target;
}

int Message::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.Message)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 version = 1 [default = 21];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional .pb.remote.MsgType type = 2 [default = UNKNOWN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .pb.remote.RequestConnect request_connect = 21;
    if (has_request_connect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->request_connect_);
    }

    // optional .pb.remote.RequestPlaylists request_playlists = 27;
    if (has_request_playlists()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->request_playlists_);
    }

    // optional .pb.remote.RequestPlaylistSongs request_playlist_songs = 10;
    if (has_request_playlist_songs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->request_playlist_songs_);
    }

    // optional .pb.remote.RequestChangeSong request_change_song = 11;
    if (has_request_change_song()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->request_change_song_);
    }

    // optional .pb.remote.RequestSetVolume request_set_volume = 12;
    if (has_request_set_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->request_set_volume_);
    }

    // optional .pb.remote.RequestSetTrackPosition request_set_track_position = 23;
    if (has_request_set_track_position()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->request_set_track_position_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .pb.remote.RequestInsertUrls request_insert_urls = 25;
    if (has_request_insert_urls()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->request_insert_urls_);
    }

    // optional .pb.remote.RequestRemoveSongs request_remove_songs = 26;
    if (has_request_remove_songs()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->request_remove_songs_);
    }

    // optional .pb.remote.RequestOpenPlaylist request_open_playlist = 28;
    if (has_request_open_playlist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->request_open_playlist_);
    }

    // optional .pb.remote.RequestClosePlaylist request_close_playlist = 29;
    if (has_request_close_playlist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->request_close_playlist_);
    }

    // optional .pb.remote.RequestDownloadSongs request_download_songs = 31;
    if (has_request_download_songs()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->request_download_songs_);
    }

    // optional .pb.remote.RequestRateSong request_rate_song = 35;
    if (has_request_rate_song()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->request_rate_song_);
    }

    // optional .pb.remote.RequestGlobalSearch request_global_search = 37;
    if (has_request_global_search()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->request_global_search_);
    }

    // optional .pb.remote.Repeat repeat = 13;
    if (has_repeat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->repeat_);
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional .pb.remote.Shuffle shuffle = 14;
    if (has_shuffle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->shuffle_);
    }

    // optional .pb.remote.ResponseClementineInfo response_clementine_info = 15;
    if (has_response_clementine_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->response_clementine_info_);
    }

    // optional .pb.remote.ResponseCurrentMetadata response_current_metadata = 16;
    if (has_response_current_metadata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->response_current_metadata_);
    }

    // optional .pb.remote.ResponsePlaylists response_playlists = 17;
    if (has_response_playlists()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->response_playlists_);
    }

    // optional .pb.remote.ResponsePlaylistSongs response_playlist_songs = 18;
    if (has_response_playlist_songs()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->response_playlist_songs_);
    }

    // optional .pb.remote.ResponseEngineStateChanged response_engine_state_changed = 19;
    if (has_response_engine_state_changed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->response_engine_state_changed_);
    }

    // optional .pb.remote.ResponseUpdateTrackPosition response_update_track_position = 20;
    if (has_response_update_track_position()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->response_update_track_position_);
    }

    // optional .pb.remote.ResponseDisconnect response_disconnect = 22;
    if (has_response_disconnect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->response_disconnect_);
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional .pb.remote.ResponseActiveChanged response_active_changed = 24;
    if (has_response_active_changed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->response_active_changed_);
    }

    // optional .pb.remote.ResponseLyrics response_lyrics = 30;
    if (has_response_lyrics()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->response_lyrics_);
    }

    // optional .pb.remote.ResponseSongFileChunk response_song_file_chunk = 32;
    if (has_response_song_file_chunk()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->response_song_file_chunk_);
    }

    // optional .pb.remote.ResponseSongOffer response_song_offer = 33;
    if (has_response_song_offer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->response_song_offer_);
    }

    // optional .pb.remote.ResponseLibraryChunk response_library_chunk = 34;
    if (has_response_library_chunk()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->response_library_chunk_);
    }

    // optional .pb.remote.ResponseDownloadTotalSize response_download_total_size = 36;
    if (has_response_download_total_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->response_download_total_size_);
    }

    // optional .pb.remote.ResponseGlobalSearch response_global_search = 38;
    if (has_response_global_search()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->response_global_search_);
    }

    // optional .pb.remote.ResponseTranscoderStatus response_transcoder_status = 39;
    if (has_response_transcoder_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->response_transcoder_status_);
    }

  }
  // optional .pb.remote.ResponseGlobalSearchStatus response_global_search_status = 40;
  if (has_response_global_search_status()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_global_search_status_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.Message)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Message* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Message>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.Message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.Message)
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.Message)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_request_connect()) {
      mutable_request_connect()->::pb::remote::RequestConnect::MergeFrom(from.request_connect());
    }
    if (from.has_request_playlists()) {
      mutable_request_playlists()->::pb::remote::RequestPlaylists::MergeFrom(from.request_playlists());
    }
    if (from.has_request_playlist_songs()) {
      mutable_request_playlist_songs()->::pb::remote::RequestPlaylistSongs::MergeFrom(from.request_playlist_songs());
    }
    if (from.has_request_change_song()) {
      mutable_request_change_song()->::pb::remote::RequestChangeSong::MergeFrom(from.request_change_song());
    }
    if (from.has_request_set_volume()) {
      mutable_request_set_volume()->::pb::remote::RequestSetVolume::MergeFrom(from.request_set_volume());
    }
    if (from.has_request_set_track_position()) {
      mutable_request_set_track_position()->::pb::remote::RequestSetTrackPosition::MergeFrom(from.request_set_track_position());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_request_insert_urls()) {
      mutable_request_insert_urls()->::pb::remote::RequestInsertUrls::MergeFrom(from.request_insert_urls());
    }
    if (from.has_request_remove_songs()) {
      mutable_request_remove_songs()->::pb::remote::RequestRemoveSongs::MergeFrom(from.request_remove_songs());
    }
    if (from.has_request_open_playlist()) {
      mutable_request_open_playlist()->::pb::remote::RequestOpenPlaylist::MergeFrom(from.request_open_playlist());
    }
    if (from.has_request_close_playlist()) {
      mutable_request_close_playlist()->::pb::remote::RequestClosePlaylist::MergeFrom(from.request_close_playlist());
    }
    if (from.has_request_download_songs()) {
      mutable_request_download_songs()->::pb::remote::RequestDownloadSongs::MergeFrom(from.request_download_songs());
    }
    if (from.has_request_rate_song()) {
      mutable_request_rate_song()->::pb::remote::RequestRateSong::MergeFrom(from.request_rate_song());
    }
    if (from.has_request_global_search()) {
      mutable_request_global_search()->::pb::remote::RequestGlobalSearch::MergeFrom(from.request_global_search());
    }
    if (from.has_repeat()) {
      mutable_repeat()->::pb::remote::Repeat::MergeFrom(from.repeat());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_shuffle()) {
      mutable_shuffle()->::pb::remote::Shuffle::MergeFrom(from.shuffle());
    }
    if (from.has_response_clementine_info()) {
      mutable_response_clementine_info()->::pb::remote::ResponseClementineInfo::MergeFrom(from.response_clementine_info());
    }
    if (from.has_response_current_metadata()) {
      mutable_response_current_metadata()->::pb::remote::ResponseCurrentMetadata::MergeFrom(from.response_current_metadata());
    }
    if (from.has_response_playlists()) {
      mutable_response_playlists()->::pb::remote::ResponsePlaylists::MergeFrom(from.response_playlists());
    }
    if (from.has_response_playlist_songs()) {
      mutable_response_playlist_songs()->::pb::remote::ResponsePlaylistSongs::MergeFrom(from.response_playlist_songs());
    }
    if (from.has_response_engine_state_changed()) {
      mutable_response_engine_state_changed()->::pb::remote::ResponseEngineStateChanged::MergeFrom(from.response_engine_state_changed());
    }
    if (from.has_response_update_track_position()) {
      mutable_response_update_track_position()->::pb::remote::ResponseUpdateTrackPosition::MergeFrom(from.response_update_track_position());
    }
    if (from.has_response_disconnect()) {
      mutable_response_disconnect()->::pb::remote::ResponseDisconnect::MergeFrom(from.response_disconnect());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_response_active_changed()) {
      mutable_response_active_changed()->::pb::remote::ResponseActiveChanged::MergeFrom(from.response_active_changed());
    }
    if (from.has_response_lyrics()) {
      mutable_response_lyrics()->::pb::remote::ResponseLyrics::MergeFrom(from.response_lyrics());
    }
    if (from.has_response_song_file_chunk()) {
      mutable_response_song_file_chunk()->::pb::remote::ResponseSongFileChunk::MergeFrom(from.response_song_file_chunk());
    }
    if (from.has_response_song_offer()) {
      mutable_response_song_offer()->::pb::remote::ResponseSongOffer::MergeFrom(from.response_song_offer());
    }
    if (from.has_response_library_chunk()) {
      mutable_response_library_chunk()->::pb::remote::ResponseLibraryChunk::MergeFrom(from.response_library_chunk());
    }
    if (from.has_response_download_total_size()) {
      mutable_response_download_total_size()->::pb::remote::ResponseDownloadTotalSize::MergeFrom(from.response_download_total_size());
    }
    if (from.has_response_global_search()) {
      mutable_response_global_search()->::pb::remote::ResponseGlobalSearch::MergeFrom(from.response_global_search());
    }
    if (from.has_response_transcoder_status()) {
      mutable_response_transcoder_status()->::pb::remote::ResponseTranscoderStatus::MergeFrom(from.response_transcoder_status());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_response_global_search_status()) {
      mutable_response_global_search_status()->::pb::remote::ResponseGlobalSearchStatus::MergeFrom(from.response_global_search_status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {

  return true;
}

void Message::Swap(Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message::InternalSwap(Message* other) {
  std::swap(version_, other->version_);
  std::swap(type_, other->type_);
  std::swap(request_connect_, other->request_connect_);
  std::swap(request_playlists_, other->request_playlists_);
  std::swap(request_playlist_songs_, other->request_playlist_songs_);
  std::swap(request_change_song_, other->request_change_song_);
  std::swap(request_set_volume_, other->request_set_volume_);
  std::swap(request_set_track_position_, other->request_set_track_position_);
  std::swap(request_insert_urls_, other->request_insert_urls_);
  std::swap(request_remove_songs_, other->request_remove_songs_);
  std::swap(request_open_playlist_, other->request_open_playlist_);
  std::swap(request_close_playlist_, other->request_close_playlist_);
  std::swap(request_download_songs_, other->request_download_songs_);
  std::swap(request_rate_song_, other->request_rate_song_);
  std::swap(request_global_search_, other->request_global_search_);
  std::swap(repeat_, other->repeat_);
  std::swap(shuffle_, other->shuffle_);
  std::swap(response_clementine_info_, other->response_clementine_info_);
  std::swap(response_current_metadata_, other->response_current_metadata_);
  std::swap(response_playlists_, other->response_playlists_);
  std::swap(response_playlist_songs_, other->response_playlist_songs_);
  std::swap(response_engine_state_changed_, other->response_engine_state_changed_);
  std::swap(response_update_track_position_, other->response_update_track_position_);
  std::swap(response_disconnect_, other->response_disconnect_);
  std::swap(response_active_changed_, other->response_active_changed_);
  std::swap(response_lyrics_, other->response_lyrics_);
  std::swap(response_song_file_chunk_, other->response_song_file_chunk_);
  std::swap(response_song_offer_, other->response_song_offer_);
  std::swap(response_library_chunk_, other->response_library_chunk_);
  std::swap(response_download_total_size_, other->response_download_total_size_);
  std::swap(response_global_search_, other->response_global_search_);
  std::swap(response_transcoder_status_, other->response_transcoder_status_);
  std::swap(response_global_search_status_, other->response_global_search_status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_descriptor_;
  metadata.reflection = Message_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Message

// optional int32 version = 1 [default = 21];
bool Message::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Message::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void Message::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void Message::clear_version() {
  version_ = 21;
  clear_has_version();
}
 ::google::protobuf::int32 Message::version() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.version)
  return version_;
}
 void Message::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.Message.version)
}

// optional .pb.remote.MsgType type = 2 [default = UNKNOWN];
bool Message::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Message::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void Message::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void Message::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::pb::remote::MsgType Message::type() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.type)
  return static_cast< ::pb::remote::MsgType >(type_);
}
 void Message::set_type(::pb::remote::MsgType value) {
  assert(::pb::remote::MsgType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.Message.type)
}

// optional .pb.remote.RequestConnect request_connect = 21;
bool Message::has_request_connect() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Message::set_has_request_connect() {
  _has_bits_[0] |= 0x00000004u;
}
void Message::clear_has_request_connect() {
  _has_bits_[0] &= ~0x00000004u;
}
void Message::clear_request_connect() {
  if (request_connect_ != NULL) request_connect_->::pb::remote::RequestConnect::Clear();
  clear_has_request_connect();
}
const ::pb::remote::RequestConnect& Message::request_connect() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.request_connect)
  return request_connect_ != NULL ? *request_connect_ : *default_instance_->request_connect_;
}
::pb::remote::RequestConnect* Message::mutable_request_connect() {
  set_has_request_connect();
  if (request_connect_ == NULL) {
    request_connect_ = new ::pb::remote::RequestConnect;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.request_connect)
  return request_connect_;
}
::pb::remote::RequestConnect* Message::release_request_connect() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.request_connect)
  clear_has_request_connect();
  ::pb::remote::RequestConnect* temp = request_connect_;
  request_connect_ = NULL;
  return temp;
}
void Message::set_allocated_request_connect(::pb::remote::RequestConnect* request_connect) {
  delete request_connect_;
  request_connect_ = request_connect;
  if (request_connect) {
    set_has_request_connect();
  } else {
    clear_has_request_connect();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.request_connect)
}

// optional .pb.remote.RequestPlaylists request_playlists = 27;
bool Message::has_request_playlists() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Message::set_has_request_playlists() {
  _has_bits_[0] |= 0x00000008u;
}
void Message::clear_has_request_playlists() {
  _has_bits_[0] &= ~0x00000008u;
}
void Message::clear_request_playlists() {
  if (request_playlists_ != NULL) request_playlists_->::pb::remote::RequestPlaylists::Clear();
  clear_has_request_playlists();
}
const ::pb::remote::RequestPlaylists& Message::request_playlists() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.request_playlists)
  return request_playlists_ != NULL ? *request_playlists_ : *default_instance_->request_playlists_;
}
::pb::remote::RequestPlaylists* Message::mutable_request_playlists() {
  set_has_request_playlists();
  if (request_playlists_ == NULL) {
    request_playlists_ = new ::pb::remote::RequestPlaylists;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.request_playlists)
  return request_playlists_;
}
::pb::remote::RequestPlaylists* Message::release_request_playlists() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.request_playlists)
  clear_has_request_playlists();
  ::pb::remote::RequestPlaylists* temp = request_playlists_;
  request_playlists_ = NULL;
  return temp;
}
void Message::set_allocated_request_playlists(::pb::remote::RequestPlaylists* request_playlists) {
  delete request_playlists_;
  request_playlists_ = request_playlists;
  if (request_playlists) {
    set_has_request_playlists();
  } else {
    clear_has_request_playlists();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.request_playlists)
}

// optional .pb.remote.RequestPlaylistSongs request_playlist_songs = 10;
bool Message::has_request_playlist_songs() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Message::set_has_request_playlist_songs() {
  _has_bits_[0] |= 0x00000010u;
}
void Message::clear_has_request_playlist_songs() {
  _has_bits_[0] &= ~0x00000010u;
}
void Message::clear_request_playlist_songs() {
  if (request_playlist_songs_ != NULL) request_playlist_songs_->::pb::remote::RequestPlaylistSongs::Clear();
  clear_has_request_playlist_songs();
}
const ::pb::remote::RequestPlaylistSongs& Message::request_playlist_songs() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.request_playlist_songs)
  return request_playlist_songs_ != NULL ? *request_playlist_songs_ : *default_instance_->request_playlist_songs_;
}
::pb::remote::RequestPlaylistSongs* Message::mutable_request_playlist_songs() {
  set_has_request_playlist_songs();
  if (request_playlist_songs_ == NULL) {
    request_playlist_songs_ = new ::pb::remote::RequestPlaylistSongs;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.request_playlist_songs)
  return request_playlist_songs_;
}
::pb::remote::RequestPlaylistSongs* Message::release_request_playlist_songs() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.request_playlist_songs)
  clear_has_request_playlist_songs();
  ::pb::remote::RequestPlaylistSongs* temp = request_playlist_songs_;
  request_playlist_songs_ = NULL;
  return temp;
}
void Message::set_allocated_request_playlist_songs(::pb::remote::RequestPlaylistSongs* request_playlist_songs) {
  delete request_playlist_songs_;
  request_playlist_songs_ = request_playlist_songs;
  if (request_playlist_songs) {
    set_has_request_playlist_songs();
  } else {
    clear_has_request_playlist_songs();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.request_playlist_songs)
}

// optional .pb.remote.RequestChangeSong request_change_song = 11;
bool Message::has_request_change_song() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Message::set_has_request_change_song() {
  _has_bits_[0] |= 0x00000020u;
}
void Message::clear_has_request_change_song() {
  _has_bits_[0] &= ~0x00000020u;
}
void Message::clear_request_change_song() {
  if (request_change_song_ != NULL) request_change_song_->::pb::remote::RequestChangeSong::Clear();
  clear_has_request_change_song();
}
const ::pb::remote::RequestChangeSong& Message::request_change_song() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.request_change_song)
  return request_change_song_ != NULL ? *request_change_song_ : *default_instance_->request_change_song_;
}
::pb::remote::RequestChangeSong* Message::mutable_request_change_song() {
  set_has_request_change_song();
  if (request_change_song_ == NULL) {
    request_change_song_ = new ::pb::remote::RequestChangeSong;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.request_change_song)
  return request_change_song_;
}
::pb::remote::RequestChangeSong* Message::release_request_change_song() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.request_change_song)
  clear_has_request_change_song();
  ::pb::remote::RequestChangeSong* temp = request_change_song_;
  request_change_song_ = NULL;
  return temp;
}
void Message::set_allocated_request_change_song(::pb::remote::RequestChangeSong* request_change_song) {
  delete request_change_song_;
  request_change_song_ = request_change_song;
  if (request_change_song) {
    set_has_request_change_song();
  } else {
    clear_has_request_change_song();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.request_change_song)
}

// optional .pb.remote.RequestSetVolume request_set_volume = 12;
bool Message::has_request_set_volume() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Message::set_has_request_set_volume() {
  _has_bits_[0] |= 0x00000040u;
}
void Message::clear_has_request_set_volume() {
  _has_bits_[0] &= ~0x00000040u;
}
void Message::clear_request_set_volume() {
  if (request_set_volume_ != NULL) request_set_volume_->::pb::remote::RequestSetVolume::Clear();
  clear_has_request_set_volume();
}
const ::pb::remote::RequestSetVolume& Message::request_set_volume() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.request_set_volume)
  return request_set_volume_ != NULL ? *request_set_volume_ : *default_instance_->request_set_volume_;
}
::pb::remote::RequestSetVolume* Message::mutable_request_set_volume() {
  set_has_request_set_volume();
  if (request_set_volume_ == NULL) {
    request_set_volume_ = new ::pb::remote::RequestSetVolume;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.request_set_volume)
  return request_set_volume_;
}
::pb::remote::RequestSetVolume* Message::release_request_set_volume() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.request_set_volume)
  clear_has_request_set_volume();
  ::pb::remote::RequestSetVolume* temp = request_set_volume_;
  request_set_volume_ = NULL;
  return temp;
}
void Message::set_allocated_request_set_volume(::pb::remote::RequestSetVolume* request_set_volume) {
  delete request_set_volume_;
  request_set_volume_ = request_set_volume;
  if (request_set_volume) {
    set_has_request_set_volume();
  } else {
    clear_has_request_set_volume();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.request_set_volume)
}

// optional .pb.remote.RequestSetTrackPosition request_set_track_position = 23;
bool Message::has_request_set_track_position() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Message::set_has_request_set_track_position() {
  _has_bits_[0] |= 0x00000080u;
}
void Message::clear_has_request_set_track_position() {
  _has_bits_[0] &= ~0x00000080u;
}
void Message::clear_request_set_track_position() {
  if (request_set_track_position_ != NULL) request_set_track_position_->::pb::remote::RequestSetTrackPosition::Clear();
  clear_has_request_set_track_position();
}
const ::pb::remote::RequestSetTrackPosition& Message::request_set_track_position() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.request_set_track_position)
  return request_set_track_position_ != NULL ? *request_set_track_position_ : *default_instance_->request_set_track_position_;
}
::pb::remote::RequestSetTrackPosition* Message::mutable_request_set_track_position() {
  set_has_request_set_track_position();
  if (request_set_track_position_ == NULL) {
    request_set_track_position_ = new ::pb::remote::RequestSetTrackPosition;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.request_set_track_position)
  return request_set_track_position_;
}
::pb::remote::RequestSetTrackPosition* Message::release_request_set_track_position() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.request_set_track_position)
  clear_has_request_set_track_position();
  ::pb::remote::RequestSetTrackPosition* temp = request_set_track_position_;
  request_set_track_position_ = NULL;
  return temp;
}
void Message::set_allocated_request_set_track_position(::pb::remote::RequestSetTrackPosition* request_set_track_position) {
  delete request_set_track_position_;
  request_set_track_position_ = request_set_track_position;
  if (request_set_track_position) {
    set_has_request_set_track_position();
  } else {
    clear_has_request_set_track_position();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.request_set_track_position)
}

// optional .pb.remote.RequestInsertUrls request_insert_urls = 25;
bool Message::has_request_insert_urls() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Message::set_has_request_insert_urls() {
  _has_bits_[0] |= 0x00000100u;
}
void Message::clear_has_request_insert_urls() {
  _has_bits_[0] &= ~0x00000100u;
}
void Message::clear_request_insert_urls() {
  if (request_insert_urls_ != NULL) request_insert_urls_->::pb::remote::RequestInsertUrls::Clear();
  clear_has_request_insert_urls();
}
const ::pb::remote::RequestInsertUrls& Message::request_insert_urls() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.request_insert_urls)
  return request_insert_urls_ != NULL ? *request_insert_urls_ : *default_instance_->request_insert_urls_;
}
::pb::remote::RequestInsertUrls* Message::mutable_request_insert_urls() {
  set_has_request_insert_urls();
  if (request_insert_urls_ == NULL) {
    request_insert_urls_ = new ::pb::remote::RequestInsertUrls;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.request_insert_urls)
  return request_insert_urls_;
}
::pb::remote::RequestInsertUrls* Message::release_request_insert_urls() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.request_insert_urls)
  clear_has_request_insert_urls();
  ::pb::remote::RequestInsertUrls* temp = request_insert_urls_;
  request_insert_urls_ = NULL;
  return temp;
}
void Message::set_allocated_request_insert_urls(::pb::remote::RequestInsertUrls* request_insert_urls) {
  delete request_insert_urls_;
  request_insert_urls_ = request_insert_urls;
  if (request_insert_urls) {
    set_has_request_insert_urls();
  } else {
    clear_has_request_insert_urls();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.request_insert_urls)
}

// optional .pb.remote.RequestRemoveSongs request_remove_songs = 26;
bool Message::has_request_remove_songs() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Message::set_has_request_remove_songs() {
  _has_bits_[0] |= 0x00000200u;
}
void Message::clear_has_request_remove_songs() {
  _has_bits_[0] &= ~0x00000200u;
}
void Message::clear_request_remove_songs() {
  if (request_remove_songs_ != NULL) request_remove_songs_->::pb::remote::RequestRemoveSongs::Clear();
  clear_has_request_remove_songs();
}
const ::pb::remote::RequestRemoveSongs& Message::request_remove_songs() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.request_remove_songs)
  return request_remove_songs_ != NULL ? *request_remove_songs_ : *default_instance_->request_remove_songs_;
}
::pb::remote::RequestRemoveSongs* Message::mutable_request_remove_songs() {
  set_has_request_remove_songs();
  if (request_remove_songs_ == NULL) {
    request_remove_songs_ = new ::pb::remote::RequestRemoveSongs;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.request_remove_songs)
  return request_remove_songs_;
}
::pb::remote::RequestRemoveSongs* Message::release_request_remove_songs() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.request_remove_songs)
  clear_has_request_remove_songs();
  ::pb::remote::RequestRemoveSongs* temp = request_remove_songs_;
  request_remove_songs_ = NULL;
  return temp;
}
void Message::set_allocated_request_remove_songs(::pb::remote::RequestRemoveSongs* request_remove_songs) {
  delete request_remove_songs_;
  request_remove_songs_ = request_remove_songs;
  if (request_remove_songs) {
    set_has_request_remove_songs();
  } else {
    clear_has_request_remove_songs();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.request_remove_songs)
}

// optional .pb.remote.RequestOpenPlaylist request_open_playlist = 28;
bool Message::has_request_open_playlist() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Message::set_has_request_open_playlist() {
  _has_bits_[0] |= 0x00000400u;
}
void Message::clear_has_request_open_playlist() {
  _has_bits_[0] &= ~0x00000400u;
}
void Message::clear_request_open_playlist() {
  if (request_open_playlist_ != NULL) request_open_playlist_->::pb::remote::RequestOpenPlaylist::Clear();
  clear_has_request_open_playlist();
}
const ::pb::remote::RequestOpenPlaylist& Message::request_open_playlist() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.request_open_playlist)
  return request_open_playlist_ != NULL ? *request_open_playlist_ : *default_instance_->request_open_playlist_;
}
::pb::remote::RequestOpenPlaylist* Message::mutable_request_open_playlist() {
  set_has_request_open_playlist();
  if (request_open_playlist_ == NULL) {
    request_open_playlist_ = new ::pb::remote::RequestOpenPlaylist;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.request_open_playlist)
  return request_open_playlist_;
}
::pb::remote::RequestOpenPlaylist* Message::release_request_open_playlist() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.request_open_playlist)
  clear_has_request_open_playlist();
  ::pb::remote::RequestOpenPlaylist* temp = request_open_playlist_;
  request_open_playlist_ = NULL;
  return temp;
}
void Message::set_allocated_request_open_playlist(::pb::remote::RequestOpenPlaylist* request_open_playlist) {
  delete request_open_playlist_;
  request_open_playlist_ = request_open_playlist;
  if (request_open_playlist) {
    set_has_request_open_playlist();
  } else {
    clear_has_request_open_playlist();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.request_open_playlist)
}

// optional .pb.remote.RequestClosePlaylist request_close_playlist = 29;
bool Message::has_request_close_playlist() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Message::set_has_request_close_playlist() {
  _has_bits_[0] |= 0x00000800u;
}
void Message::clear_has_request_close_playlist() {
  _has_bits_[0] &= ~0x00000800u;
}
void Message::clear_request_close_playlist() {
  if (request_close_playlist_ != NULL) request_close_playlist_->::pb::remote::RequestClosePlaylist::Clear();
  clear_has_request_close_playlist();
}
const ::pb::remote::RequestClosePlaylist& Message::request_close_playlist() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.request_close_playlist)
  return request_close_playlist_ != NULL ? *request_close_playlist_ : *default_instance_->request_close_playlist_;
}
::pb::remote::RequestClosePlaylist* Message::mutable_request_close_playlist() {
  set_has_request_close_playlist();
  if (request_close_playlist_ == NULL) {
    request_close_playlist_ = new ::pb::remote::RequestClosePlaylist;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.request_close_playlist)
  return request_close_playlist_;
}
::pb::remote::RequestClosePlaylist* Message::release_request_close_playlist() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.request_close_playlist)
  clear_has_request_close_playlist();
  ::pb::remote::RequestClosePlaylist* temp = request_close_playlist_;
  request_close_playlist_ = NULL;
  return temp;
}
void Message::set_allocated_request_close_playlist(::pb::remote::RequestClosePlaylist* request_close_playlist) {
  delete request_close_playlist_;
  request_close_playlist_ = request_close_playlist;
  if (request_close_playlist) {
    set_has_request_close_playlist();
  } else {
    clear_has_request_close_playlist();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.request_close_playlist)
}

// optional .pb.remote.RequestDownloadSongs request_download_songs = 31;
bool Message::has_request_download_songs() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Message::set_has_request_download_songs() {
  _has_bits_[0] |= 0x00001000u;
}
void Message::clear_has_request_download_songs() {
  _has_bits_[0] &= ~0x00001000u;
}
void Message::clear_request_download_songs() {
  if (request_download_songs_ != NULL) request_download_songs_->::pb::remote::RequestDownloadSongs::Clear();
  clear_has_request_download_songs();
}
const ::pb::remote::RequestDownloadSongs& Message::request_download_songs() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.request_download_songs)
  return request_download_songs_ != NULL ? *request_download_songs_ : *default_instance_->request_download_songs_;
}
::pb::remote::RequestDownloadSongs* Message::mutable_request_download_songs() {
  set_has_request_download_songs();
  if (request_download_songs_ == NULL) {
    request_download_songs_ = new ::pb::remote::RequestDownloadSongs;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.request_download_songs)
  return request_download_songs_;
}
::pb::remote::RequestDownloadSongs* Message::release_request_download_songs() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.request_download_songs)
  clear_has_request_download_songs();
  ::pb::remote::RequestDownloadSongs* temp = request_download_songs_;
  request_download_songs_ = NULL;
  return temp;
}
void Message::set_allocated_request_download_songs(::pb::remote::RequestDownloadSongs* request_download_songs) {
  delete request_download_songs_;
  request_download_songs_ = request_download_songs;
  if (request_download_songs) {
    set_has_request_download_songs();
  } else {
    clear_has_request_download_songs();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.request_download_songs)
}

// optional .pb.remote.RequestRateSong request_rate_song = 35;
bool Message::has_request_rate_song() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Message::set_has_request_rate_song() {
  _has_bits_[0] |= 0x00002000u;
}
void Message::clear_has_request_rate_song() {
  _has_bits_[0] &= ~0x00002000u;
}
void Message::clear_request_rate_song() {
  if (request_rate_song_ != NULL) request_rate_song_->::pb::remote::RequestRateSong::Clear();
  clear_has_request_rate_song();
}
const ::pb::remote::RequestRateSong& Message::request_rate_song() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.request_rate_song)
  return request_rate_song_ != NULL ? *request_rate_song_ : *default_instance_->request_rate_song_;
}
::pb::remote::RequestRateSong* Message::mutable_request_rate_song() {
  set_has_request_rate_song();
  if (request_rate_song_ == NULL) {
    request_rate_song_ = new ::pb::remote::RequestRateSong;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.request_rate_song)
  return request_rate_song_;
}
::pb::remote::RequestRateSong* Message::release_request_rate_song() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.request_rate_song)
  clear_has_request_rate_song();
  ::pb::remote::RequestRateSong* temp = request_rate_song_;
  request_rate_song_ = NULL;
  return temp;
}
void Message::set_allocated_request_rate_song(::pb::remote::RequestRateSong* request_rate_song) {
  delete request_rate_song_;
  request_rate_song_ = request_rate_song;
  if (request_rate_song) {
    set_has_request_rate_song();
  } else {
    clear_has_request_rate_song();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.request_rate_song)
}

// optional .pb.remote.RequestGlobalSearch request_global_search = 37;
bool Message::has_request_global_search() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Message::set_has_request_global_search() {
  _has_bits_[0] |= 0x00004000u;
}
void Message::clear_has_request_global_search() {
  _has_bits_[0] &= ~0x00004000u;
}
void Message::clear_request_global_search() {
  if (request_global_search_ != NULL) request_global_search_->::pb::remote::RequestGlobalSearch::Clear();
  clear_has_request_global_search();
}
const ::pb::remote::RequestGlobalSearch& Message::request_global_search() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.request_global_search)
  return request_global_search_ != NULL ? *request_global_search_ : *default_instance_->request_global_search_;
}
::pb::remote::RequestGlobalSearch* Message::mutable_request_global_search() {
  set_has_request_global_search();
  if (request_global_search_ == NULL) {
    request_global_search_ = new ::pb::remote::RequestGlobalSearch;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.request_global_search)
  return request_global_search_;
}
::pb::remote::RequestGlobalSearch* Message::release_request_global_search() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.request_global_search)
  clear_has_request_global_search();
  ::pb::remote::RequestGlobalSearch* temp = request_global_search_;
  request_global_search_ = NULL;
  return temp;
}
void Message::set_allocated_request_global_search(::pb::remote::RequestGlobalSearch* request_global_search) {
  delete request_global_search_;
  request_global_search_ = request_global_search;
  if (request_global_search) {
    set_has_request_global_search();
  } else {
    clear_has_request_global_search();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.request_global_search)
}

// optional .pb.remote.Repeat repeat = 13;
bool Message::has_repeat() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Message::set_has_repeat() {
  _has_bits_[0] |= 0x00008000u;
}
void Message::clear_has_repeat() {
  _has_bits_[0] &= ~0x00008000u;
}
void Message::clear_repeat() {
  if (repeat_ != NULL) repeat_->::pb::remote::Repeat::Clear();
  clear_has_repeat();
}
const ::pb::remote::Repeat& Message::repeat() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.repeat)
  return repeat_ != NULL ? *repeat_ : *default_instance_->repeat_;
}
::pb::remote::Repeat* Message::mutable_repeat() {
  set_has_repeat();
  if (repeat_ == NULL) {
    repeat_ = new ::pb::remote::Repeat;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.repeat)
  return repeat_;
}
::pb::remote::Repeat* Message::release_repeat() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.repeat)
  clear_has_repeat();
  ::pb::remote::Repeat* temp = repeat_;
  repeat_ = NULL;
  return temp;
}
void Message::set_allocated_repeat(::pb::remote::Repeat* repeat) {
  delete repeat_;
  repeat_ = repeat;
  if (repeat) {
    set_has_repeat();
  } else {
    clear_has_repeat();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.repeat)
}

// optional .pb.remote.Shuffle shuffle = 14;
bool Message::has_shuffle() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Message::set_has_shuffle() {
  _has_bits_[0] |= 0x00010000u;
}
void Message::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00010000u;
}
void Message::clear_shuffle() {
  if (shuffle_ != NULL) shuffle_->::pb::remote::Shuffle::Clear();
  clear_has_shuffle();
}
const ::pb::remote::Shuffle& Message::shuffle() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.shuffle)
  return shuffle_ != NULL ? *shuffle_ : *default_instance_->shuffle_;
}
::pb::remote::Shuffle* Message::mutable_shuffle() {
  set_has_shuffle();
  if (shuffle_ == NULL) {
    shuffle_ = new ::pb::remote::Shuffle;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.shuffle)
  return shuffle_;
}
::pb::remote::Shuffle* Message::release_shuffle() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.shuffle)
  clear_has_shuffle();
  ::pb::remote::Shuffle* temp = shuffle_;
  shuffle_ = NULL;
  return temp;
}
void Message::set_allocated_shuffle(::pb::remote::Shuffle* shuffle) {
  delete shuffle_;
  shuffle_ = shuffle;
  if (shuffle) {
    set_has_shuffle();
  } else {
    clear_has_shuffle();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.shuffle)
}

// optional .pb.remote.ResponseClementineInfo response_clementine_info = 15;
bool Message::has_response_clementine_info() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Message::set_has_response_clementine_info() {
  _has_bits_[0] |= 0x00020000u;
}
void Message::clear_has_response_clementine_info() {
  _has_bits_[0] &= ~0x00020000u;
}
void Message::clear_response_clementine_info() {
  if (response_clementine_info_ != NULL) response_clementine_info_->::pb::remote::ResponseClementineInfo::Clear();
  clear_has_response_clementine_info();
}
const ::pb::remote::ResponseClementineInfo& Message::response_clementine_info() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.response_clementine_info)
  return response_clementine_info_ != NULL ? *response_clementine_info_ : *default_instance_->response_clementine_info_;
}
::pb::remote::ResponseClementineInfo* Message::mutable_response_clementine_info() {
  set_has_response_clementine_info();
  if (response_clementine_info_ == NULL) {
    response_clementine_info_ = new ::pb::remote::ResponseClementineInfo;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.response_clementine_info)
  return response_clementine_info_;
}
::pb::remote::ResponseClementineInfo* Message::release_response_clementine_info() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.response_clementine_info)
  clear_has_response_clementine_info();
  ::pb::remote::ResponseClementineInfo* temp = response_clementine_info_;
  response_clementine_info_ = NULL;
  return temp;
}
void Message::set_allocated_response_clementine_info(::pb::remote::ResponseClementineInfo* response_clementine_info) {
  delete response_clementine_info_;
  response_clementine_info_ = response_clementine_info;
  if (response_clementine_info) {
    set_has_response_clementine_info();
  } else {
    clear_has_response_clementine_info();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.response_clementine_info)
}

// optional .pb.remote.ResponseCurrentMetadata response_current_metadata = 16;
bool Message::has_response_current_metadata() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void Message::set_has_response_current_metadata() {
  _has_bits_[0] |= 0x00040000u;
}
void Message::clear_has_response_current_metadata() {
  _has_bits_[0] &= ~0x00040000u;
}
void Message::clear_response_current_metadata() {
  if (response_current_metadata_ != NULL) response_current_metadata_->::pb::remote::ResponseCurrentMetadata::Clear();
  clear_has_response_current_metadata();
}
const ::pb::remote::ResponseCurrentMetadata& Message::response_current_metadata() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.response_current_metadata)
  return response_current_metadata_ != NULL ? *response_current_metadata_ : *default_instance_->response_current_metadata_;
}
::pb::remote::ResponseCurrentMetadata* Message::mutable_response_current_metadata() {
  set_has_response_current_metadata();
  if (response_current_metadata_ == NULL) {
    response_current_metadata_ = new ::pb::remote::ResponseCurrentMetadata;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.response_current_metadata)
  return response_current_metadata_;
}
::pb::remote::ResponseCurrentMetadata* Message::release_response_current_metadata() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.response_current_metadata)
  clear_has_response_current_metadata();
  ::pb::remote::ResponseCurrentMetadata* temp = response_current_metadata_;
  response_current_metadata_ = NULL;
  return temp;
}
void Message::set_allocated_response_current_metadata(::pb::remote::ResponseCurrentMetadata* response_current_metadata) {
  delete response_current_metadata_;
  response_current_metadata_ = response_current_metadata;
  if (response_current_metadata) {
    set_has_response_current_metadata();
  } else {
    clear_has_response_current_metadata();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.response_current_metadata)
}

// optional .pb.remote.ResponsePlaylists response_playlists = 17;
bool Message::has_response_playlists() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void Message::set_has_response_playlists() {
  _has_bits_[0] |= 0x00080000u;
}
void Message::clear_has_response_playlists() {
  _has_bits_[0] &= ~0x00080000u;
}
void Message::clear_response_playlists() {
  if (response_playlists_ != NULL) response_playlists_->::pb::remote::ResponsePlaylists::Clear();
  clear_has_response_playlists();
}
const ::pb::remote::ResponsePlaylists& Message::response_playlists() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.response_playlists)
  return response_playlists_ != NULL ? *response_playlists_ : *default_instance_->response_playlists_;
}
::pb::remote::ResponsePlaylists* Message::mutable_response_playlists() {
  set_has_response_playlists();
  if (response_playlists_ == NULL) {
    response_playlists_ = new ::pb::remote::ResponsePlaylists;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.response_playlists)
  return response_playlists_;
}
::pb::remote::ResponsePlaylists* Message::release_response_playlists() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.response_playlists)
  clear_has_response_playlists();
  ::pb::remote::ResponsePlaylists* temp = response_playlists_;
  response_playlists_ = NULL;
  return temp;
}
void Message::set_allocated_response_playlists(::pb::remote::ResponsePlaylists* response_playlists) {
  delete response_playlists_;
  response_playlists_ = response_playlists;
  if (response_playlists) {
    set_has_response_playlists();
  } else {
    clear_has_response_playlists();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.response_playlists)
}

// optional .pb.remote.ResponsePlaylistSongs response_playlist_songs = 18;
bool Message::has_response_playlist_songs() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void Message::set_has_response_playlist_songs() {
  _has_bits_[0] |= 0x00100000u;
}
void Message::clear_has_response_playlist_songs() {
  _has_bits_[0] &= ~0x00100000u;
}
void Message::clear_response_playlist_songs() {
  if (response_playlist_songs_ != NULL) response_playlist_songs_->::pb::remote::ResponsePlaylistSongs::Clear();
  clear_has_response_playlist_songs();
}
const ::pb::remote::ResponsePlaylistSongs& Message::response_playlist_songs() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.response_playlist_songs)
  return response_playlist_songs_ != NULL ? *response_playlist_songs_ : *default_instance_->response_playlist_songs_;
}
::pb::remote::ResponsePlaylistSongs* Message::mutable_response_playlist_songs() {
  set_has_response_playlist_songs();
  if (response_playlist_songs_ == NULL) {
    response_playlist_songs_ = new ::pb::remote::ResponsePlaylistSongs;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.response_playlist_songs)
  return response_playlist_songs_;
}
::pb::remote::ResponsePlaylistSongs* Message::release_response_playlist_songs() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.response_playlist_songs)
  clear_has_response_playlist_songs();
  ::pb::remote::ResponsePlaylistSongs* temp = response_playlist_songs_;
  response_playlist_songs_ = NULL;
  return temp;
}
void Message::set_allocated_response_playlist_songs(::pb::remote::ResponsePlaylistSongs* response_playlist_songs) {
  delete response_playlist_songs_;
  response_playlist_songs_ = response_playlist_songs;
  if (response_playlist_songs) {
    set_has_response_playlist_songs();
  } else {
    clear_has_response_playlist_songs();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.response_playlist_songs)
}

// optional .pb.remote.ResponseEngineStateChanged response_engine_state_changed = 19;
bool Message::has_response_engine_state_changed() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void Message::set_has_response_engine_state_changed() {
  _has_bits_[0] |= 0x00200000u;
}
void Message::clear_has_response_engine_state_changed() {
  _has_bits_[0] &= ~0x00200000u;
}
void Message::clear_response_engine_state_changed() {
  if (response_engine_state_changed_ != NULL) response_engine_state_changed_->::pb::remote::ResponseEngineStateChanged::Clear();
  clear_has_response_engine_state_changed();
}
const ::pb::remote::ResponseEngineStateChanged& Message::response_engine_state_changed() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.response_engine_state_changed)
  return response_engine_state_changed_ != NULL ? *response_engine_state_changed_ : *default_instance_->response_engine_state_changed_;
}
::pb::remote::ResponseEngineStateChanged* Message::mutable_response_engine_state_changed() {
  set_has_response_engine_state_changed();
  if (response_engine_state_changed_ == NULL) {
    response_engine_state_changed_ = new ::pb::remote::ResponseEngineStateChanged;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.response_engine_state_changed)
  return response_engine_state_changed_;
}
::pb::remote::ResponseEngineStateChanged* Message::release_response_engine_state_changed() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.response_engine_state_changed)
  clear_has_response_engine_state_changed();
  ::pb::remote::ResponseEngineStateChanged* temp = response_engine_state_changed_;
  response_engine_state_changed_ = NULL;
  return temp;
}
void Message::set_allocated_response_engine_state_changed(::pb::remote::ResponseEngineStateChanged* response_engine_state_changed) {
  delete response_engine_state_changed_;
  response_engine_state_changed_ = response_engine_state_changed;
  if (response_engine_state_changed) {
    set_has_response_engine_state_changed();
  } else {
    clear_has_response_engine_state_changed();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.response_engine_state_changed)
}

// optional .pb.remote.ResponseUpdateTrackPosition response_update_track_position = 20;
bool Message::has_response_update_track_position() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void Message::set_has_response_update_track_position() {
  _has_bits_[0] |= 0x00400000u;
}
void Message::clear_has_response_update_track_position() {
  _has_bits_[0] &= ~0x00400000u;
}
void Message::clear_response_update_track_position() {
  if (response_update_track_position_ != NULL) response_update_track_position_->::pb::remote::ResponseUpdateTrackPosition::Clear();
  clear_has_response_update_track_position();
}
const ::pb::remote::ResponseUpdateTrackPosition& Message::response_update_track_position() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.response_update_track_position)
  return response_update_track_position_ != NULL ? *response_update_track_position_ : *default_instance_->response_update_track_position_;
}
::pb::remote::ResponseUpdateTrackPosition* Message::mutable_response_update_track_position() {
  set_has_response_update_track_position();
  if (response_update_track_position_ == NULL) {
    response_update_track_position_ = new ::pb::remote::ResponseUpdateTrackPosition;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.response_update_track_position)
  return response_update_track_position_;
}
::pb::remote::ResponseUpdateTrackPosition* Message::release_response_update_track_position() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.response_update_track_position)
  clear_has_response_update_track_position();
  ::pb::remote::ResponseUpdateTrackPosition* temp = response_update_track_position_;
  response_update_track_position_ = NULL;
  return temp;
}
void Message::set_allocated_response_update_track_position(::pb::remote::ResponseUpdateTrackPosition* response_update_track_position) {
  delete response_update_track_position_;
  response_update_track_position_ = response_update_track_position;
  if (response_update_track_position) {
    set_has_response_update_track_position();
  } else {
    clear_has_response_update_track_position();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.response_update_track_position)
}

// optional .pb.remote.ResponseDisconnect response_disconnect = 22;
bool Message::has_response_disconnect() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void Message::set_has_response_disconnect() {
  _has_bits_[0] |= 0x00800000u;
}
void Message::clear_has_response_disconnect() {
  _has_bits_[0] &= ~0x00800000u;
}
void Message::clear_response_disconnect() {
  if (response_disconnect_ != NULL) response_disconnect_->::pb::remote::ResponseDisconnect::Clear();
  clear_has_response_disconnect();
}
const ::pb::remote::ResponseDisconnect& Message::response_disconnect() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.response_disconnect)
  return response_disconnect_ != NULL ? *response_disconnect_ : *default_instance_->response_disconnect_;
}
::pb::remote::ResponseDisconnect* Message::mutable_response_disconnect() {
  set_has_response_disconnect();
  if (response_disconnect_ == NULL) {
    response_disconnect_ = new ::pb::remote::ResponseDisconnect;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.response_disconnect)
  return response_disconnect_;
}
::pb::remote::ResponseDisconnect* Message::release_response_disconnect() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.response_disconnect)
  clear_has_response_disconnect();
  ::pb::remote::ResponseDisconnect* temp = response_disconnect_;
  response_disconnect_ = NULL;
  return temp;
}
void Message::set_allocated_response_disconnect(::pb::remote::ResponseDisconnect* response_disconnect) {
  delete response_disconnect_;
  response_disconnect_ = response_disconnect;
  if (response_disconnect) {
    set_has_response_disconnect();
  } else {
    clear_has_response_disconnect();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.response_disconnect)
}

// optional .pb.remote.ResponseActiveChanged response_active_changed = 24;
bool Message::has_response_active_changed() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void Message::set_has_response_active_changed() {
  _has_bits_[0] |= 0x01000000u;
}
void Message::clear_has_response_active_changed() {
  _has_bits_[0] &= ~0x01000000u;
}
void Message::clear_response_active_changed() {
  if (response_active_changed_ != NULL) response_active_changed_->::pb::remote::ResponseActiveChanged::Clear();
  clear_has_response_active_changed();
}
const ::pb::remote::ResponseActiveChanged& Message::response_active_changed() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.response_active_changed)
  return response_active_changed_ != NULL ? *response_active_changed_ : *default_instance_->response_active_changed_;
}
::pb::remote::ResponseActiveChanged* Message::mutable_response_active_changed() {
  set_has_response_active_changed();
  if (response_active_changed_ == NULL) {
    response_active_changed_ = new ::pb::remote::ResponseActiveChanged;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.response_active_changed)
  return response_active_changed_;
}
::pb::remote::ResponseActiveChanged* Message::release_response_active_changed() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.response_active_changed)
  clear_has_response_active_changed();
  ::pb::remote::ResponseActiveChanged* temp = response_active_changed_;
  response_active_changed_ = NULL;
  return temp;
}
void Message::set_allocated_response_active_changed(::pb::remote::ResponseActiveChanged* response_active_changed) {
  delete response_active_changed_;
  response_active_changed_ = response_active_changed;
  if (response_active_changed) {
    set_has_response_active_changed();
  } else {
    clear_has_response_active_changed();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.response_active_changed)
}

// optional .pb.remote.ResponseLyrics response_lyrics = 30;
bool Message::has_response_lyrics() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void Message::set_has_response_lyrics() {
  _has_bits_[0] |= 0x02000000u;
}
void Message::clear_has_response_lyrics() {
  _has_bits_[0] &= ~0x02000000u;
}
void Message::clear_response_lyrics() {
  if (response_lyrics_ != NULL) response_lyrics_->::pb::remote::ResponseLyrics::Clear();
  clear_has_response_lyrics();
}
const ::pb::remote::ResponseLyrics& Message::response_lyrics() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.response_lyrics)
  return response_lyrics_ != NULL ? *response_lyrics_ : *default_instance_->response_lyrics_;
}
::pb::remote::ResponseLyrics* Message::mutable_response_lyrics() {
  set_has_response_lyrics();
  if (response_lyrics_ == NULL) {
    response_lyrics_ = new ::pb::remote::ResponseLyrics;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.response_lyrics)
  return response_lyrics_;
}
::pb::remote::ResponseLyrics* Message::release_response_lyrics() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.response_lyrics)
  clear_has_response_lyrics();
  ::pb::remote::ResponseLyrics* temp = response_lyrics_;
  response_lyrics_ = NULL;
  return temp;
}
void Message::set_allocated_response_lyrics(::pb::remote::ResponseLyrics* response_lyrics) {
  delete response_lyrics_;
  response_lyrics_ = response_lyrics;
  if (response_lyrics) {
    set_has_response_lyrics();
  } else {
    clear_has_response_lyrics();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.response_lyrics)
}

// optional .pb.remote.ResponseSongFileChunk response_song_file_chunk = 32;
bool Message::has_response_song_file_chunk() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void Message::set_has_response_song_file_chunk() {
  _has_bits_[0] |= 0x04000000u;
}
void Message::clear_has_response_song_file_chunk() {
  _has_bits_[0] &= ~0x04000000u;
}
void Message::clear_response_song_file_chunk() {
  if (response_song_file_chunk_ != NULL) response_song_file_chunk_->::pb::remote::ResponseSongFileChunk::Clear();
  clear_has_response_song_file_chunk();
}
const ::pb::remote::ResponseSongFileChunk& Message::response_song_file_chunk() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.response_song_file_chunk)
  return response_song_file_chunk_ != NULL ? *response_song_file_chunk_ : *default_instance_->response_song_file_chunk_;
}
::pb::remote::ResponseSongFileChunk* Message::mutable_response_song_file_chunk() {
  set_has_response_song_file_chunk();
  if (response_song_file_chunk_ == NULL) {
    response_song_file_chunk_ = new ::pb::remote::ResponseSongFileChunk;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.response_song_file_chunk)
  return response_song_file_chunk_;
}
::pb::remote::ResponseSongFileChunk* Message::release_response_song_file_chunk() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.response_song_file_chunk)
  clear_has_response_song_file_chunk();
  ::pb::remote::ResponseSongFileChunk* temp = response_song_file_chunk_;
  response_song_file_chunk_ = NULL;
  return temp;
}
void Message::set_allocated_response_song_file_chunk(::pb::remote::ResponseSongFileChunk* response_song_file_chunk) {
  delete response_song_file_chunk_;
  response_song_file_chunk_ = response_song_file_chunk;
  if (response_song_file_chunk) {
    set_has_response_song_file_chunk();
  } else {
    clear_has_response_song_file_chunk();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.response_song_file_chunk)
}

// optional .pb.remote.ResponseSongOffer response_song_offer = 33;
bool Message::has_response_song_offer() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void Message::set_has_response_song_offer() {
  _has_bits_[0] |= 0x08000000u;
}
void Message::clear_has_response_song_offer() {
  _has_bits_[0] &= ~0x08000000u;
}
void Message::clear_response_song_offer() {
  if (response_song_offer_ != NULL) response_song_offer_->::pb::remote::ResponseSongOffer::Clear();
  clear_has_response_song_offer();
}
const ::pb::remote::ResponseSongOffer& Message::response_song_offer() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.response_song_offer)
  return response_song_offer_ != NULL ? *response_song_offer_ : *default_instance_->response_song_offer_;
}
::pb::remote::ResponseSongOffer* Message::mutable_response_song_offer() {
  set_has_response_song_offer();
  if (response_song_offer_ == NULL) {
    response_song_offer_ = new ::pb::remote::ResponseSongOffer;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.response_song_offer)
  return response_song_offer_;
}
::pb::remote::ResponseSongOffer* Message::release_response_song_offer() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.response_song_offer)
  clear_has_response_song_offer();
  ::pb::remote::ResponseSongOffer* temp = response_song_offer_;
  response_song_offer_ = NULL;
  return temp;
}
void Message::set_allocated_response_song_offer(::pb::remote::ResponseSongOffer* response_song_offer) {
  delete response_song_offer_;
  response_song_offer_ = response_song_offer;
  if (response_song_offer) {
    set_has_response_song_offer();
  } else {
    clear_has_response_song_offer();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.response_song_offer)
}

// optional .pb.remote.ResponseLibraryChunk response_library_chunk = 34;
bool Message::has_response_library_chunk() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void Message::set_has_response_library_chunk() {
  _has_bits_[0] |= 0x10000000u;
}
void Message::clear_has_response_library_chunk() {
  _has_bits_[0] &= ~0x10000000u;
}
void Message::clear_response_library_chunk() {
  if (response_library_chunk_ != NULL) response_library_chunk_->::pb::remote::ResponseLibraryChunk::Clear();
  clear_has_response_library_chunk();
}
const ::pb::remote::ResponseLibraryChunk& Message::response_library_chunk() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.response_library_chunk)
  return response_library_chunk_ != NULL ? *response_library_chunk_ : *default_instance_->response_library_chunk_;
}
::pb::remote::ResponseLibraryChunk* Message::mutable_response_library_chunk() {
  set_has_response_library_chunk();
  if (response_library_chunk_ == NULL) {
    response_library_chunk_ = new ::pb::remote::ResponseLibraryChunk;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.response_library_chunk)
  return response_library_chunk_;
}
::pb::remote::ResponseLibraryChunk* Message::release_response_library_chunk() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.response_library_chunk)
  clear_has_response_library_chunk();
  ::pb::remote::ResponseLibraryChunk* temp = response_library_chunk_;
  response_library_chunk_ = NULL;
  return temp;
}
void Message::set_allocated_response_library_chunk(::pb::remote::ResponseLibraryChunk* response_library_chunk) {
  delete response_library_chunk_;
  response_library_chunk_ = response_library_chunk;
  if (response_library_chunk) {
    set_has_response_library_chunk();
  } else {
    clear_has_response_library_chunk();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.response_library_chunk)
}

// optional .pb.remote.ResponseDownloadTotalSize response_download_total_size = 36;
bool Message::has_response_download_total_size() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void Message::set_has_response_download_total_size() {
  _has_bits_[0] |= 0x20000000u;
}
void Message::clear_has_response_download_total_size() {
  _has_bits_[0] &= ~0x20000000u;
}
void Message::clear_response_download_total_size() {
  if (response_download_total_size_ != NULL) response_download_total_size_->::pb::remote::ResponseDownloadTotalSize::Clear();
  clear_has_response_download_total_size();
}
const ::pb::remote::ResponseDownloadTotalSize& Message::response_download_total_size() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.response_download_total_size)
  return response_download_total_size_ != NULL ? *response_download_total_size_ : *default_instance_->response_download_total_size_;
}
::pb::remote::ResponseDownloadTotalSize* Message::mutable_response_download_total_size() {
  set_has_response_download_total_size();
  if (response_download_total_size_ == NULL) {
    response_download_total_size_ = new ::pb::remote::ResponseDownloadTotalSize;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.response_download_total_size)
  return response_download_total_size_;
}
::pb::remote::ResponseDownloadTotalSize* Message::release_response_download_total_size() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.response_download_total_size)
  clear_has_response_download_total_size();
  ::pb::remote::ResponseDownloadTotalSize* temp = response_download_total_size_;
  response_download_total_size_ = NULL;
  return temp;
}
void Message::set_allocated_response_download_total_size(::pb::remote::ResponseDownloadTotalSize* response_download_total_size) {
  delete response_download_total_size_;
  response_download_total_size_ = response_download_total_size;
  if (response_download_total_size) {
    set_has_response_download_total_size();
  } else {
    clear_has_response_download_total_size();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.response_download_total_size)
}

// optional .pb.remote.ResponseGlobalSearch response_global_search = 38;
bool Message::has_response_global_search() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void Message::set_has_response_global_search() {
  _has_bits_[0] |= 0x40000000u;
}
void Message::clear_has_response_global_search() {
  _has_bits_[0] &= ~0x40000000u;
}
void Message::clear_response_global_search() {
  if (response_global_search_ != NULL) response_global_search_->::pb::remote::ResponseGlobalSearch::Clear();
  clear_has_response_global_search();
}
const ::pb::remote::ResponseGlobalSearch& Message::response_global_search() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.response_global_search)
  return response_global_search_ != NULL ? *response_global_search_ : *default_instance_->response_global_search_;
}
::pb::remote::ResponseGlobalSearch* Message::mutable_response_global_search() {
  set_has_response_global_search();
  if (response_global_search_ == NULL) {
    response_global_search_ = new ::pb::remote::ResponseGlobalSearch;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.response_global_search)
  return response_global_search_;
}
::pb::remote::ResponseGlobalSearch* Message::release_response_global_search() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.response_global_search)
  clear_has_response_global_search();
  ::pb::remote::ResponseGlobalSearch* temp = response_global_search_;
  response_global_search_ = NULL;
  return temp;
}
void Message::set_allocated_response_global_search(::pb::remote::ResponseGlobalSearch* response_global_search) {
  delete response_global_search_;
  response_global_search_ = response_global_search;
  if (response_global_search) {
    set_has_response_global_search();
  } else {
    clear_has_response_global_search();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.response_global_search)
}

// optional .pb.remote.ResponseTranscoderStatus response_transcoder_status = 39;
bool Message::has_response_transcoder_status() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void Message::set_has_response_transcoder_status() {
  _has_bits_[0] |= 0x80000000u;
}
void Message::clear_has_response_transcoder_status() {
  _has_bits_[0] &= ~0x80000000u;
}
void Message::clear_response_transcoder_status() {
  if (response_transcoder_status_ != NULL) response_transcoder_status_->::pb::remote::ResponseTranscoderStatus::Clear();
  clear_has_response_transcoder_status();
}
const ::pb::remote::ResponseTranscoderStatus& Message::response_transcoder_status() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.response_transcoder_status)
  return response_transcoder_status_ != NULL ? *response_transcoder_status_ : *default_instance_->response_transcoder_status_;
}
::pb::remote::ResponseTranscoderStatus* Message::mutable_response_transcoder_status() {
  set_has_response_transcoder_status();
  if (response_transcoder_status_ == NULL) {
    response_transcoder_status_ = new ::pb::remote::ResponseTranscoderStatus;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.response_transcoder_status)
  return response_transcoder_status_;
}
::pb::remote::ResponseTranscoderStatus* Message::release_response_transcoder_status() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.response_transcoder_status)
  clear_has_response_transcoder_status();
  ::pb::remote::ResponseTranscoderStatus* temp = response_transcoder_status_;
  response_transcoder_status_ = NULL;
  return temp;
}
void Message::set_allocated_response_transcoder_status(::pb::remote::ResponseTranscoderStatus* response_transcoder_status) {
  delete response_transcoder_status_;
  response_transcoder_status_ = response_transcoder_status;
  if (response_transcoder_status) {
    set_has_response_transcoder_status();
  } else {
    clear_has_response_transcoder_status();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.response_transcoder_status)
}

// optional .pb.remote.ResponseGlobalSearchStatus response_global_search_status = 40;
bool Message::has_response_global_search_status() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void Message::set_has_response_global_search_status() {
  _has_bits_[1] |= 0x00000001u;
}
void Message::clear_has_response_global_search_status() {
  _has_bits_[1] &= ~0x00000001u;
}
void Message::clear_response_global_search_status() {
  if (response_global_search_status_ != NULL) response_global_search_status_->::pb::remote::ResponseGlobalSearchStatus::Clear();
  clear_has_response_global_search_status();
}
const ::pb::remote::ResponseGlobalSearchStatus& Message::response_global_search_status() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.response_global_search_status)
  return response_global_search_status_ != NULL ? *response_global_search_status_ : *default_instance_->response_global_search_status_;
}
::pb::remote::ResponseGlobalSearchStatus* Message::mutable_response_global_search_status() {
  set_has_response_global_search_status();
  if (response_global_search_status_ == NULL) {
    response_global_search_status_ = new ::pb::remote::ResponseGlobalSearchStatus;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.response_global_search_status)
  return response_global_search_status_;
}
::pb::remote::ResponseGlobalSearchStatus* Message::release_response_global_search_status() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.response_global_search_status)
  clear_has_response_global_search_status();
  ::pb::remote::ResponseGlobalSearchStatus* temp = response_global_search_status_;
  response_global_search_status_ = NULL;
  return temp;
}
void Message::set_allocated_response_global_search_status(::pb::remote::ResponseGlobalSearchStatus* response_global_search_status) {
  delete response_global_search_status_;
  response_global_search_status_ = response_global_search_status;
  if (response_global_search_status) {
    set_has_response_global_search_status();
  } else {
    clear_has_response_global_search_status();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.response_global_search_status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace remote
}  // namespace pb

// @@protoc_insertion_point(global_scope)
