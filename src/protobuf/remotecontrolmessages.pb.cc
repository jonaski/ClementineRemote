// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: remotecontrolmessages.proto

#include "remotecontrolmessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_remotecontrolmessages_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_remotecontrolmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Lyric;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_remotecontrolmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Playlist;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_remotecontrolmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Repeat;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_remotecontrolmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RequestChangeSong;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_remotecontrolmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RequestClosePlaylist;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_remotecontrolmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RequestConnect;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_remotecontrolmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RequestDownloadSongs;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_remotecontrolmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RequestGlobalSearch;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_remotecontrolmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RequestOpenPlaylist;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_remotecontrolmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RequestPlaylistSongs;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_remotecontrolmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RequestPlaylists;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_remotecontrolmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RequestRateSong;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_remotecontrolmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RequestRemoveSongs;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_remotecontrolmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RequestSetTrackPosition;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_remotecontrolmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RequestSetVolume;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_remotecontrolmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ResponseActiveChanged;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_remotecontrolmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ResponseClementineInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_remotecontrolmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ResponseDisconnect;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_remotecontrolmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ResponseDownloadTotalSize;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_remotecontrolmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ResponseEngineStateChanged;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_remotecontrolmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ResponseGlobalSearchStatus;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_remotecontrolmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ResponseLibraryChunk;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_remotecontrolmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ResponseSongOffer;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_remotecontrolmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ResponseTranscoderStatus;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_remotecontrolmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ResponseUpdateTrackPosition;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_remotecontrolmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Shuffle;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_remotecontrolmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SongMetadata;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_remotecontrolmessages_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RequestInsertUrls;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_remotecontrolmessages_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ResponseCurrentMetadata;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_remotecontrolmessages_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ResponseGlobalSearch;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_remotecontrolmessages_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ResponseLyrics;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_remotecontrolmessages_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ResponsePlaylists;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_remotecontrolmessages_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ResponseSongFileChunk;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_remotecontrolmessages_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ResponsePlaylistSongs;
}  // namespace protobuf_remotecontrolmessages_2eproto
namespace pb {
namespace remote {
class RequestFilesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestFiles>
      _instance;
} _RequestFiles_default_instance_;
class FilesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Files>
      _instance;
} _Files_default_instance_;
class SongMetadataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SongMetadata>
      _instance;
} _SongMetadata_default_instance_;
class PlaylistDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Playlist>
      _instance;
} _Playlist_default_instance_;
class RequestPlaylistsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestPlaylists>
      _instance;
} _RequestPlaylists_default_instance_;
class RequestPlaylistSongsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestPlaylistSongs>
      _instance;
} _RequestPlaylistSongs_default_instance_;
class RequestChangeSongDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestChangeSong>
      _instance;
} _RequestChangeSong_default_instance_;
class RequestSetVolumeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestSetVolume>
      _instance;
} _RequestSetVolume_default_instance_;
class RepeatDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Repeat>
      _instance;
} _Repeat_default_instance_;
class ShuffleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Shuffle>
      _instance;
} _Shuffle_default_instance_;
class ResponseClementineInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseClementineInfo>
      _instance;
} _ResponseClementineInfo_default_instance_;
class ResponseCurrentMetadataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseCurrentMetadata>
      _instance;
} _ResponseCurrentMetadata_default_instance_;
class ResponsePlaylistsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponsePlaylists>
      _instance;
} _ResponsePlaylists_default_instance_;
class ResponsePlaylistSongsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponsePlaylistSongs>
      _instance;
} _ResponsePlaylistSongs_default_instance_;
class ResponseEngineStateChangedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseEngineStateChanged>
      _instance;
} _ResponseEngineStateChanged_default_instance_;
class ResponseUpdateTrackPositionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseUpdateTrackPosition>
      _instance;
} _ResponseUpdateTrackPosition_default_instance_;
class RequestConnectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestConnect>
      _instance;
} _RequestConnect_default_instance_;
class ResponseDisconnectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseDisconnect>
      _instance;
} _ResponseDisconnect_default_instance_;
class ResponseActiveChangedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseActiveChanged>
      _instance;
} _ResponseActiveChanged_default_instance_;
class RequestSetTrackPositionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestSetTrackPosition>
      _instance;
} _RequestSetTrackPosition_default_instance_;
class RequestInsertUrlsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestInsertUrls>
      _instance;
} _RequestInsertUrls_default_instance_;
class RequestRemoveSongsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestRemoveSongs>
      _instance;
} _RequestRemoveSongs_default_instance_;
class RequestOpenPlaylistDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestOpenPlaylist>
      _instance;
} _RequestOpenPlaylist_default_instance_;
class RequestClosePlaylistDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestClosePlaylist>
      _instance;
} _RequestClosePlaylist_default_instance_;
class ResponseLyricsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseLyrics>
      _instance;
} _ResponseLyrics_default_instance_;
class LyricDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Lyric>
      _instance;
} _Lyric_default_instance_;
class RequestDownloadSongsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestDownloadSongs>
      _instance;
} _RequestDownloadSongs_default_instance_;
class ResponseSongFileChunkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseSongFileChunk>
      _instance;
} _ResponseSongFileChunk_default_instance_;
class ResponseLibraryChunkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseLibraryChunk>
      _instance;
} _ResponseLibraryChunk_default_instance_;
class ResponseSongOfferDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseSongOffer>
      _instance;
} _ResponseSongOffer_default_instance_;
class RequestRateSongDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestRateSong>
      _instance;
} _RequestRateSong_default_instance_;
class ResponseDownloadTotalSizeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseDownloadTotalSize>
      _instance;
} _ResponseDownloadTotalSize_default_instance_;
class RequestGlobalSearchDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestGlobalSearch>
      _instance;
} _RequestGlobalSearch_default_instance_;
class ResponseGlobalSearchDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseGlobalSearch>
      _instance;
} _ResponseGlobalSearch_default_instance_;
class ResponseTranscoderStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseTranscoderStatus>
      _instance;
} _ResponseTranscoderStatus_default_instance_;
class ResponseGlobalSearchStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseGlobalSearchStatus>
      _instance;
} _ResponseGlobalSearchStatus_default_instance_;
class MessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Message>
      _instance;
} _Message_default_instance_;
}  // namespace remote
}  // namespace pb
namespace protobuf_remotecontrolmessages_2eproto {
static void InitDefaultsRequestFiles() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::remote::_RequestFiles_default_instance_;
    new (ptr) ::pb::remote::RequestFiles();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::remote::RequestFiles::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestFiles =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestFiles}, {}};

static void InitDefaultsFiles() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::remote::_Files_default_instance_;
    new (ptr) ::pb::remote::Files();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::remote::Files::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Files =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFiles}, {}};

static void InitDefaultsSongMetadata() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::remote::_SongMetadata_default_instance_;
    new (ptr) ::pb::remote::SongMetadata();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::remote::SongMetadata::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SongMetadata =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSongMetadata}, {}};

static void InitDefaultsPlaylist() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::remote::_Playlist_default_instance_;
    new (ptr) ::pb::remote::Playlist();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::remote::Playlist::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Playlist =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlaylist}, {}};

static void InitDefaultsRequestPlaylists() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::remote::_RequestPlaylists_default_instance_;
    new (ptr) ::pb::remote::RequestPlaylists();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::remote::RequestPlaylists::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestPlaylists =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestPlaylists}, {}};

static void InitDefaultsRequestPlaylistSongs() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::remote::_RequestPlaylistSongs_default_instance_;
    new (ptr) ::pb::remote::RequestPlaylistSongs();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::remote::RequestPlaylistSongs::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestPlaylistSongs =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestPlaylistSongs}, {}};

static void InitDefaultsRequestChangeSong() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::remote::_RequestChangeSong_default_instance_;
    new (ptr) ::pb::remote::RequestChangeSong();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::remote::RequestChangeSong::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestChangeSong =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestChangeSong}, {}};

static void InitDefaultsRequestSetVolume() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::remote::_RequestSetVolume_default_instance_;
    new (ptr) ::pb::remote::RequestSetVolume();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::remote::RequestSetVolume::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestSetVolume =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestSetVolume}, {}};

static void InitDefaultsRepeat() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::remote::_Repeat_default_instance_;
    new (ptr) ::pb::remote::Repeat();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::remote::Repeat::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Repeat =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRepeat}, {}};

static void InitDefaultsShuffle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::remote::_Shuffle_default_instance_;
    new (ptr) ::pb::remote::Shuffle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::remote::Shuffle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Shuffle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsShuffle}, {}};

static void InitDefaultsResponseClementineInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::remote::_ResponseClementineInfo_default_instance_;
    new (ptr) ::pb::remote::ResponseClementineInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::remote::ResponseClementineInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ResponseClementineInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponseClementineInfo}, {}};

static void InitDefaultsResponseCurrentMetadata() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::remote::_ResponseCurrentMetadata_default_instance_;
    new (ptr) ::pb::remote::ResponseCurrentMetadata();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::remote::ResponseCurrentMetadata::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ResponseCurrentMetadata =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsResponseCurrentMetadata}, {
      &protobuf_remotecontrolmessages_2eproto::scc_info_SongMetadata.base,}};

static void InitDefaultsResponsePlaylists() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::remote::_ResponsePlaylists_default_instance_;
    new (ptr) ::pb::remote::ResponsePlaylists();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::remote::ResponsePlaylists::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ResponsePlaylists =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsResponsePlaylists}, {
      &protobuf_remotecontrolmessages_2eproto::scc_info_Playlist.base,}};

static void InitDefaultsResponsePlaylistSongs() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::remote::_ResponsePlaylistSongs_default_instance_;
    new (ptr) ::pb::remote::ResponsePlaylistSongs();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::remote::ResponsePlaylistSongs::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ResponsePlaylistSongs =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsResponsePlaylistSongs}, {
      &protobuf_remotecontrolmessages_2eproto::scc_info_Playlist.base,
      &protobuf_remotecontrolmessages_2eproto::scc_info_SongMetadata.base,}};

static void InitDefaultsResponseEngineStateChanged() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::remote::_ResponseEngineStateChanged_default_instance_;
    new (ptr) ::pb::remote::ResponseEngineStateChanged();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::remote::ResponseEngineStateChanged::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ResponseEngineStateChanged =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponseEngineStateChanged}, {}};

static void InitDefaultsResponseUpdateTrackPosition() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::remote::_ResponseUpdateTrackPosition_default_instance_;
    new (ptr) ::pb::remote::ResponseUpdateTrackPosition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::remote::ResponseUpdateTrackPosition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ResponseUpdateTrackPosition =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponseUpdateTrackPosition}, {}};

static void InitDefaultsRequestConnect() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::remote::_RequestConnect_default_instance_;
    new (ptr) ::pb::remote::RequestConnect();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::remote::RequestConnect::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestConnect =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestConnect}, {}};

static void InitDefaultsResponseDisconnect() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::remote::_ResponseDisconnect_default_instance_;
    new (ptr) ::pb::remote::ResponseDisconnect();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::remote::ResponseDisconnect::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ResponseDisconnect =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponseDisconnect}, {}};

static void InitDefaultsResponseActiveChanged() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::remote::_ResponseActiveChanged_default_instance_;
    new (ptr) ::pb::remote::ResponseActiveChanged();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::remote::ResponseActiveChanged::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ResponseActiveChanged =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponseActiveChanged}, {}};

static void InitDefaultsRequestSetTrackPosition() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::remote::_RequestSetTrackPosition_default_instance_;
    new (ptr) ::pb::remote::RequestSetTrackPosition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::remote::RequestSetTrackPosition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestSetTrackPosition =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestSetTrackPosition}, {}};

static void InitDefaultsRequestInsertUrls() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::remote::_RequestInsertUrls_default_instance_;
    new (ptr) ::pb::remote::RequestInsertUrls();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::remote::RequestInsertUrls::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RequestInsertUrls =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRequestInsertUrls}, {
      &protobuf_remotecontrolmessages_2eproto::scc_info_SongMetadata.base,}};

static void InitDefaultsRequestRemoveSongs() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::remote::_RequestRemoveSongs_default_instance_;
    new (ptr) ::pb::remote::RequestRemoveSongs();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::remote::RequestRemoveSongs::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestRemoveSongs =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestRemoveSongs}, {}};

static void InitDefaultsRequestOpenPlaylist() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::remote::_RequestOpenPlaylist_default_instance_;
    new (ptr) ::pb::remote::RequestOpenPlaylist();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::remote::RequestOpenPlaylist::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestOpenPlaylist =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestOpenPlaylist}, {}};

static void InitDefaultsRequestClosePlaylist() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::remote::_RequestClosePlaylist_default_instance_;
    new (ptr) ::pb::remote::RequestClosePlaylist();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::remote::RequestClosePlaylist::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestClosePlaylist =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestClosePlaylist}, {}};

static void InitDefaultsResponseLyrics() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::remote::_ResponseLyrics_default_instance_;
    new (ptr) ::pb::remote::ResponseLyrics();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::remote::ResponseLyrics::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ResponseLyrics =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsResponseLyrics}, {
      &protobuf_remotecontrolmessages_2eproto::scc_info_Lyric.base,}};

static void InitDefaultsLyric() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::remote::_Lyric_default_instance_;
    new (ptr) ::pb::remote::Lyric();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::remote::Lyric::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Lyric =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLyric}, {}};

static void InitDefaultsRequestDownloadSongs() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::remote::_RequestDownloadSongs_default_instance_;
    new (ptr) ::pb::remote::RequestDownloadSongs();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::remote::RequestDownloadSongs::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestDownloadSongs =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestDownloadSongs}, {}};

static void InitDefaultsResponseSongFileChunk() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::remote::_ResponseSongFileChunk_default_instance_;
    new (ptr) ::pb::remote::ResponseSongFileChunk();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::remote::ResponseSongFileChunk::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ResponseSongFileChunk =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsResponseSongFileChunk}, {
      &protobuf_remotecontrolmessages_2eproto::scc_info_SongMetadata.base,}};

static void InitDefaultsResponseLibraryChunk() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::remote::_ResponseLibraryChunk_default_instance_;
    new (ptr) ::pb::remote::ResponseLibraryChunk();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::remote::ResponseLibraryChunk::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ResponseLibraryChunk =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponseLibraryChunk}, {}};

static void InitDefaultsResponseSongOffer() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::remote::_ResponseSongOffer_default_instance_;
    new (ptr) ::pb::remote::ResponseSongOffer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::remote::ResponseSongOffer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ResponseSongOffer =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponseSongOffer}, {}};

static void InitDefaultsRequestRateSong() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::remote::_RequestRateSong_default_instance_;
    new (ptr) ::pb::remote::RequestRateSong();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::remote::RequestRateSong::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestRateSong =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestRateSong}, {}};

static void InitDefaultsResponseDownloadTotalSize() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::remote::_ResponseDownloadTotalSize_default_instance_;
    new (ptr) ::pb::remote::ResponseDownloadTotalSize();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::remote::ResponseDownloadTotalSize::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ResponseDownloadTotalSize =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponseDownloadTotalSize}, {}};

static void InitDefaultsRequestGlobalSearch() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::remote::_RequestGlobalSearch_default_instance_;
    new (ptr) ::pb::remote::RequestGlobalSearch();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::remote::RequestGlobalSearch::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestGlobalSearch =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestGlobalSearch}, {}};

static void InitDefaultsResponseGlobalSearch() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::remote::_ResponseGlobalSearch_default_instance_;
    new (ptr) ::pb::remote::ResponseGlobalSearch();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::remote::ResponseGlobalSearch::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ResponseGlobalSearch =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsResponseGlobalSearch}, {
      &protobuf_remotecontrolmessages_2eproto::scc_info_SongMetadata.base,}};

static void InitDefaultsResponseTranscoderStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::remote::_ResponseTranscoderStatus_default_instance_;
    new (ptr) ::pb::remote::ResponseTranscoderStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::remote::ResponseTranscoderStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ResponseTranscoderStatus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponseTranscoderStatus}, {}};

static void InitDefaultsResponseGlobalSearchStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::remote::_ResponseGlobalSearchStatus_default_instance_;
    new (ptr) ::pb::remote::ResponseGlobalSearchStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::remote::ResponseGlobalSearchStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ResponseGlobalSearchStatus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponseGlobalSearchStatus}, {}};

static void InitDefaultsMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::remote::_Message_default_instance_;
    new (ptr) ::pb::remote::Message();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::remote::Message::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<31> scc_info_Message =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 31, InitDefaultsMessage}, {
      &protobuf_remotecontrolmessages_2eproto::scc_info_RequestConnect.base,
      &protobuf_remotecontrolmessages_2eproto::scc_info_RequestPlaylists.base,
      &protobuf_remotecontrolmessages_2eproto::scc_info_RequestPlaylistSongs.base,
      &protobuf_remotecontrolmessages_2eproto::scc_info_RequestChangeSong.base,
      &protobuf_remotecontrolmessages_2eproto::scc_info_RequestSetVolume.base,
      &protobuf_remotecontrolmessages_2eproto::scc_info_RequestSetTrackPosition.base,
      &protobuf_remotecontrolmessages_2eproto::scc_info_RequestInsertUrls.base,
      &protobuf_remotecontrolmessages_2eproto::scc_info_RequestRemoveSongs.base,
      &protobuf_remotecontrolmessages_2eproto::scc_info_RequestOpenPlaylist.base,
      &protobuf_remotecontrolmessages_2eproto::scc_info_RequestClosePlaylist.base,
      &protobuf_remotecontrolmessages_2eproto::scc_info_RequestDownloadSongs.base,
      &protobuf_remotecontrolmessages_2eproto::scc_info_RequestRateSong.base,
      &protobuf_remotecontrolmessages_2eproto::scc_info_RequestGlobalSearch.base,
      &protobuf_remotecontrolmessages_2eproto::scc_info_Repeat.base,
      &protobuf_remotecontrolmessages_2eproto::scc_info_Shuffle.base,
      &protobuf_remotecontrolmessages_2eproto::scc_info_ResponseClementineInfo.base,
      &protobuf_remotecontrolmessages_2eproto::scc_info_ResponseCurrentMetadata.base,
      &protobuf_remotecontrolmessages_2eproto::scc_info_ResponsePlaylists.base,
      &protobuf_remotecontrolmessages_2eproto::scc_info_ResponsePlaylistSongs.base,
      &protobuf_remotecontrolmessages_2eproto::scc_info_ResponseEngineStateChanged.base,
      &protobuf_remotecontrolmessages_2eproto::scc_info_ResponseUpdateTrackPosition.base,
      &protobuf_remotecontrolmessages_2eproto::scc_info_ResponseDisconnect.base,
      &protobuf_remotecontrolmessages_2eproto::scc_info_ResponseActiveChanged.base,
      &protobuf_remotecontrolmessages_2eproto::scc_info_ResponseLyrics.base,
      &protobuf_remotecontrolmessages_2eproto::scc_info_ResponseSongFileChunk.base,
      &protobuf_remotecontrolmessages_2eproto::scc_info_ResponseSongOffer.base,
      &protobuf_remotecontrolmessages_2eproto::scc_info_ResponseLibraryChunk.base,
      &protobuf_remotecontrolmessages_2eproto::scc_info_ResponseDownloadTotalSize.base,
      &protobuf_remotecontrolmessages_2eproto::scc_info_ResponseGlobalSearch.base,
      &protobuf_remotecontrolmessages_2eproto::scc_info_ResponseTranscoderStatus.base,
      &protobuf_remotecontrolmessages_2eproto::scc_info_ResponseGlobalSearchStatus.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_RequestFiles.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Files.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SongMetadata.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Playlist.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestPlaylists.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestPlaylistSongs.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestChangeSong.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestSetVolume.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Repeat.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Shuffle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResponseClementineInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResponseCurrentMetadata.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResponsePlaylists.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResponsePlaylistSongs.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResponseEngineStateChanged.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResponseUpdateTrackPosition.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestConnect.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResponseDisconnect.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResponseActiveChanged.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestSetTrackPosition.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestInsertUrls.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestRemoveSongs.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestOpenPlaylist.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestClosePlaylist.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResponseLyrics.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Lyric.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestDownloadSongs.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResponseSongFileChunk.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResponseLibraryChunk.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResponseSongOffer.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestRateSong.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResponseDownloadTotalSize.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestGlobalSearch.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResponseGlobalSearch.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResponseTranscoderStatus.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResponseGlobalSearchStatus.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Message.base);
}

::google::protobuf::Metadata file_level_metadata[37];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[8];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::RequestFiles, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::RequestFiles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::RequestFiles, relativepath_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Files, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Files, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Files, relativepath_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Files, file_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::SongMetadata, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::SongMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::SongMetadata, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::SongMetadata, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::SongMetadata, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::SongMetadata, album_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::SongMetadata, artist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::SongMetadata, albumartist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::SongMetadata, track_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::SongMetadata, disc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::SongMetadata, pretty_year_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::SongMetadata, genre_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::SongMetadata, playcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::SongMetadata, pretty_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::SongMetadata, art_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::SongMetadata, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::SongMetadata, is_local_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::SongMetadata, filename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::SongMetadata, file_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::SongMetadata, rating_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::SongMetadata, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::SongMetadata, art_automatic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::SongMetadata, art_manual_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::SongMetadata, type_),
  12,
  13,
  0,
  1,
  2,
  3,
  14,
  15,
  4,
  5,
  16,
  6,
  7,
  17,
  18,
  8,
  19,
  20,
  9,
  10,
  11,
  21,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Playlist, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Playlist, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Playlist, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Playlist, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Playlist, item_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Playlist, active_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Playlist, closed_),
  1,
  0,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::RequestPlaylists, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::RequestPlaylists, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::RequestPlaylists, include_closed_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::RequestPlaylistSongs, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::RequestPlaylistSongs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::RequestPlaylistSongs, id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::RequestChangeSong, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::RequestChangeSong, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::RequestChangeSong, playlist_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::RequestChangeSong, song_index_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::RequestSetVolume, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::RequestSetVolume, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::RequestSetVolume, volume_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Repeat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Repeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Repeat, repeat_mode_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Shuffle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Shuffle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Shuffle, shuffle_mode_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseClementineInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseClementineInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseClementineInfo, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseClementineInfo, state_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseCurrentMetadata, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseCurrentMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseCurrentMetadata, song_metadata_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponsePlaylists, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponsePlaylists, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponsePlaylists, playlist_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponsePlaylistSongs, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponsePlaylistSongs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponsePlaylistSongs, requested_playlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponsePlaylistSongs, songs_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseEngineStateChanged, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseEngineStateChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseEngineStateChanged, state_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseUpdateTrackPosition, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseUpdateTrackPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseUpdateTrackPosition, position_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::RequestConnect, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::RequestConnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::RequestConnect, auth_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::RequestConnect, send_playlist_songs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::RequestConnect, downloader_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseDisconnect, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseDisconnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseDisconnect, reason_disconnect_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseActiveChanged, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseActiveChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseActiveChanged, id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::RequestSetTrackPosition, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::RequestSetTrackPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::RequestSetTrackPosition, position_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::RequestInsertUrls, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::RequestInsertUrls, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::RequestInsertUrls, playlist_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::RequestInsertUrls, urls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::RequestInsertUrls, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::RequestInsertUrls, play_now_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::RequestInsertUrls, enqueue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::RequestInsertUrls, songs_),
  0,
  ~0u,
  3,
  1,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::RequestRemoveSongs, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::RequestRemoveSongs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::RequestRemoveSongs, playlist_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::RequestRemoveSongs, songs_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::RequestOpenPlaylist, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::RequestOpenPlaylist, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::RequestOpenPlaylist, playlist_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::RequestClosePlaylist, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::RequestClosePlaylist, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::RequestClosePlaylist, playlist_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseLyrics, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseLyrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseLyrics, lyrics_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Lyric, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Lyric, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Lyric, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Lyric, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Lyric, content_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::RequestDownloadSongs, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::RequestDownloadSongs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::RequestDownloadSongs, download_item_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::RequestDownloadSongs, playlist_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::RequestDownloadSongs, urls_),
  1,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseSongFileChunk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseSongFileChunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseSongFileChunk, chunk_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseSongFileChunk, chunk_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseSongFileChunk, file_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseSongFileChunk, file_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseSongFileChunk, song_metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseSongFileChunk, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseSongFileChunk, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseSongFileChunk, file_hash_),
  3,
  4,
  5,
  6,
  2,
  0,
  7,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseLibraryChunk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseLibraryChunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseLibraryChunk, chunk_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseLibraryChunk, chunk_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseLibraryChunk, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseLibraryChunk, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseLibraryChunk, file_hash_),
  2,
  3,
  0,
  4,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseSongOffer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseSongOffer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseSongOffer, accepted_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::RequestRateSong, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::RequestRateSong, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::RequestRateSong, rating_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseDownloadTotalSize, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseDownloadTotalSize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseDownloadTotalSize, total_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseDownloadTotalSize, file_count_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::RequestGlobalSearch, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::RequestGlobalSearch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::RequestGlobalSearch, query_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseGlobalSearch, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseGlobalSearch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseGlobalSearch, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseGlobalSearch, query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseGlobalSearch, search_provider_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseGlobalSearch, song_metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseGlobalSearch, search_provider_icon_),
  3,
  0,
  1,
  ~0u,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseTranscoderStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseTranscoderStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseTranscoderStatus, processed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseTranscoderStatus, total_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseGlobalSearchStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseGlobalSearchStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseGlobalSearchStatus, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseGlobalSearchStatus, query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::ResponseGlobalSearchStatus, status_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Message, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Message, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Message, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Message, request_connect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Message, request_playlists_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Message, request_playlist_songs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Message, request_change_song_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Message, request_set_volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Message, request_set_track_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Message, request_insert_urls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Message, request_remove_songs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Message, request_open_playlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Message, request_close_playlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Message, request_download_songs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Message, request_rate_song_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Message, request_global_search_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Message, repeat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Message, shuffle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Message, response_clementine_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Message, response_current_metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Message, response_playlists_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Message, response_playlist_songs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Message, response_engine_state_changed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Message, response_update_track_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Message, response_disconnect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Message, response_active_changed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Message, response_lyrics_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Message, response_song_file_chunk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Message, response_song_offer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Message, response_library_chunk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Message, response_download_total_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Message, response_global_search_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Message, response_transcoder_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::remote::Message, response_global_search_status_),
  32,
  31,
  11,
  17,
  0,
  1,
  2,
  13,
  15,
  16,
  18,
  19,
  21,
  25,
  27,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  12,
  14,
  20,
  22,
  23,
  24,
  26,
  28,
  29,
  30,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::pb::remote::RequestFiles)},
  { 7, 14, sizeof(::pb::remote::Files)},
  { 16, 43, sizeof(::pb::remote::SongMetadata)},
  { 65, 75, sizeof(::pb::remote::Playlist)},
  { 80, 86, sizeof(::pb::remote::RequestPlaylists)},
  { 87, 93, sizeof(::pb::remote::RequestPlaylistSongs)},
  { 94, 101, sizeof(::pb::remote::RequestChangeSong)},
  { 103, 109, sizeof(::pb::remote::RequestSetVolume)},
  { 110, 116, sizeof(::pb::remote::Repeat)},
  { 117, 123, sizeof(::pb::remote::Shuffle)},
  { 124, 131, sizeof(::pb::remote::ResponseClementineInfo)},
  { 133, 139, sizeof(::pb::remote::ResponseCurrentMetadata)},
  { 140, 146, sizeof(::pb::remote::ResponsePlaylists)},
  { 147, 154, sizeof(::pb::remote::ResponsePlaylistSongs)},
  { 156, 162, sizeof(::pb::remote::ResponseEngineStateChanged)},
  { 163, 169, sizeof(::pb::remote::ResponseUpdateTrackPosition)},
  { 170, 178, sizeof(::pb::remote::RequestConnect)},
  { 181, 187, sizeof(::pb::remote::ResponseDisconnect)},
  { 188, 194, sizeof(::pb::remote::ResponseActiveChanged)},
  { 195, 201, sizeof(::pb::remote::RequestSetTrackPosition)},
  { 202, 213, sizeof(::pb::remote::RequestInsertUrls)},
  { 219, 226, sizeof(::pb::remote::RequestRemoveSongs)},
  { 228, 234, sizeof(::pb::remote::RequestOpenPlaylist)},
  { 235, 241, sizeof(::pb::remote::RequestClosePlaylist)},
  { 242, 248, sizeof(::pb::remote::ResponseLyrics)},
  { 249, 257, sizeof(::pb::remote::Lyric)},
  { 260, 268, sizeof(::pb::remote::RequestDownloadSongs)},
  { 271, 284, sizeof(::pb::remote::ResponseSongFileChunk)},
  { 292, 302, sizeof(::pb::remote::ResponseLibraryChunk)},
  { 307, 313, sizeof(::pb::remote::ResponseSongOffer)},
  { 314, 320, sizeof(::pb::remote::RequestRateSong)},
  { 321, 328, sizeof(::pb::remote::ResponseDownloadTotalSize)},
  { 330, 336, sizeof(::pb::remote::RequestGlobalSearch)},
  { 337, 347, sizeof(::pb::remote::ResponseGlobalSearch)},
  { 352, 359, sizeof(::pb::remote::ResponseTranscoderStatus)},
  { 361, 369, sizeof(::pb::remote::ResponseGlobalSearchStatus)},
  { 372, 410, sizeof(::pb::remote::Message)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::remote::_RequestFiles_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::remote::_Files_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::remote::_SongMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::remote::_Playlist_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::remote::_RequestPlaylists_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::remote::_RequestPlaylistSongs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::remote::_RequestChangeSong_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::remote::_RequestSetVolume_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::remote::_Repeat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::remote::_Shuffle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::remote::_ResponseClementineInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::remote::_ResponseCurrentMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::remote::_ResponsePlaylists_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::remote::_ResponsePlaylistSongs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::remote::_ResponseEngineStateChanged_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::remote::_ResponseUpdateTrackPosition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::remote::_RequestConnect_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::remote::_ResponseDisconnect_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::remote::_ResponseActiveChanged_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::remote::_RequestSetTrackPosition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::remote::_RequestInsertUrls_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::remote::_RequestRemoveSongs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::remote::_RequestOpenPlaylist_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::remote::_RequestClosePlaylist_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::remote::_ResponseLyrics_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::remote::_Lyric_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::remote::_RequestDownloadSongs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::remote::_ResponseSongFileChunk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::remote::_ResponseLibraryChunk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::remote::_ResponseSongOffer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::remote::_RequestRateSong_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::remote::_ResponseDownloadTotalSize_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::remote::_RequestGlobalSearch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::remote::_ResponseGlobalSearch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::remote::_ResponseTranscoderStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::remote::_ResponseGlobalSearchStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::remote::_Message_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "remotecontrolmessages.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 37);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\033remotecontrolmessages.proto\022\tpb.remote"
      "\"$\n\014RequestFiles\022\024\n\014relativePath\030\001 \001(\t\"+"
      "\n\005Files\022\024\n\014relativePath\030\001 \001(\t\022\014\n\004file\030\002 "
      "\003(\t\"\373\004\n\014SongMetadata\022\n\n\002id\030\001 \001(\005\022\r\n\005inde"
      "x\030\002 \001(\005\022\r\n\005title\030\003 \001(\t\022\r\n\005album\030\004 \001(\t\022\016\n"
      "\006artist\030\005 \001(\t\022\023\n\013albumartist\030\006 \001(\t\022\r\n\005tr"
      "ack\030\007 \001(\005\022\014\n\004disc\030\010 \001(\005\022\023\n\013pretty_year\030\t"
      " \001(\t\022\r\n\005genre\030\n \001(\t\022\021\n\tplaycount\030\013 \001(\005\022\025"
      "\n\rpretty_length\030\014 \001(\t\022\013\n\003art\030\r \001(\014\022\016\n\006le"
      "ngth\030\016 \001(\005\022\020\n\010is_local\030\017 \001(\010\022\020\n\010filename"
      "\030\020 \001(\t\022\021\n\tfile_size\030\021 \001(\005\022\016\n\006rating\030\022 \001("
      "\002\022\013\n\003url\030\023 \001(\t\022\025\n\rart_automatic\030\024 \001(\t\022\022\n"
      "\nart_manual\030\025 \001(\t\022*\n\004type\030\026 \001(\0162\034.pb.rem"
      "ote.SongMetadata.Type\"\331\001\n\004Type\022\013\n\007UNKNOW"
      "N\020\000\022\007\n\003ASF\020\001\022\010\n\004FLAC\020\002\022\007\n\003MP4\020\003\022\007\n\003MPC\020\004"
      "\022\010\n\004MPEG\020\005\022\013\n\007OGGFLAC\020\006\022\014\n\010OGGSPEEX\020\007\022\r\n"
      "\tOGGVORBIS\020\010\022\010\n\004AIFF\020\t\022\007\n\003WAV\020\n\022\r\n\tTRUEA"
      "UDIO\020\013\022\010\n\004CDDA\020\014\022\013\n\007OGGOPUS\020\r\022\013\n\007WAVPACK"
      "\020\016\022\007\n\003SPC\020\017\022\007\n\003VGM\020\020\022\007\n\003APE\020\021\022\n\n\006STREAM\020"
      "c\"X\n\010Playlist\022\n\n\002id\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022"
      "\022\n\nitem_count\030\003 \001(\005\022\016\n\006active\030\004 \001(\010\022\016\n\006c"
      "losed\030\005 \001(\010\"*\n\020RequestPlaylists\022\026\n\016inclu"
      "de_closed\030\001 \001(\010\"\"\n\024RequestPlaylistSongs\022"
      "\n\n\002id\030\001 \001(\005\"<\n\021RequestChangeSong\022\023\n\013play"
      "list_id\030\001 \001(\005\022\022\n\nsong_index\030\002 \001(\005\"\"\n\020Req"
      "uestSetVolume\022\016\n\006volume\030\001 \001(\005\"4\n\006Repeat\022"
      "*\n\013repeat_mode\030\001 \001(\0162\025.pb.remote.RepeatM"
      "ode\"7\n\007Shuffle\022,\n\014shuffle_mode\030\001 \001(\0162\026.p"
      "b.remote.ShuffleMode\"P\n\026ResponseClementi"
      "neInfo\022\017\n\007version\030\001 \001(\t\022%\n\005state\030\002 \001(\0162\026"
      ".pb.remote.EngineState\"I\n\027ResponseCurren"
      "tMetadata\022.\n\rsong_metadata\030\001 \001(\0132\027.pb.re"
      "mote.SongMetadata\":\n\021ResponsePlaylists\022%"
      "\n\010playlist\030\001 \003(\0132\023.pb.remote.Playlist\"p\n"
      "\025ResponsePlaylistSongs\022/\n\022requested_play"
      "list\030\001 \001(\0132\023.pb.remote.Playlist\022&\n\005songs"
      "\030\002 \003(\0132\027.pb.remote.SongMetadata\"C\n\032Respo"
      "nseEngineStateChanged\022%\n\005state\030\001 \001(\0162\026.p"
      "b.remote.EngineState\"/\n\033ResponseUpdateTr"
      "ackPosition\022\020\n\010position\030\001 \001(\005\"T\n\016Request"
      "Connect\022\021\n\tauth_code\030\001 \001(\005\022\033\n\023send_playl"
      "ist_songs\030\002 \001(\010\022\022\n\ndownloader\030\003 \001(\010\"L\n\022R"
      "esponseDisconnect\0226\n\021reason_disconnect\030\001"
      " \001(\0162\033.pb.remote.ReasonDisconnect\"#\n\025Res"
      "ponseActiveChanged\022\n\n\002id\030\001 \001(\005\"+\n\027Reques"
      "tSetTrackPosition\022\020\n\010position\030\001 \001(\005\"\245\001\n\021"
      "RequestInsertUrls\022\023\n\013playlist_id\030\001 \001(\005\022\014"
      "\n\004urls\030\002 \003(\t\022\024\n\010position\030\003 \001(\005:\002-1\022\027\n\010pl"
      "ay_now\030\004 \001(\010:\005false\022\026\n\007enqueue\030\005 \001(\010:\005fa"
      "lse\022&\n\005songs\030\006 \003(\0132\027.pb.remote.SongMetad"
      "ata\"8\n\022RequestRemoveSongs\022\023\n\013playlist_id"
      "\030\001 \001(\005\022\r\n\005songs\030\002 \003(\005\"*\n\023RequestOpenPlay"
      "list\022\023\n\013playlist_id\030\001 \001(\005\"+\n\024RequestClos"
      "ePlaylist\022\023\n\013playlist_id\030\001 \001(\005\"2\n\016Respon"
      "seLyrics\022 \n\006lyrics\030\001 \003(\0132\020.pb.remote.Lyr"
      "ic\"3\n\005Lyric\022\n\n\002id\030\001 \001(\t\022\r\n\005title\030\002 \001(\t\022\017"
      "\n\007content\030\003 \001(\t\"i\n\024RequestDownloadSongs\022"
      ".\n\rdownload_item\030\001 \001(\0162\027.pb.remote.Downl"
      "oadItem\022\023\n\013playlist_id\030\002 \001(\005\022\014\n\004urls\030\003 \003"
      "(\t\"\312\001\n\025ResponseSongFileChunk\022\024\n\014chunk_nu"
      "mber\030\001 \001(\005\022\023\n\013chunk_count\030\002 \001(\005\022\023\n\013file_"
      "number\030\003 \001(\005\022\022\n\nfile_count\030\004 \001(\005\022.\n\rsong"
      "_metadata\030\006 \001(\0132\027.pb.remote.SongMetadata"
      "\022\014\n\004data\030\007 \001(\014\022\014\n\004size\030\010 \001(\005\022\021\n\tfile_has"
      "h\030\t \001(\014\"p\n\024ResponseLibraryChunk\022\024\n\014chunk"
      "_number\030\001 \001(\005\022\023\n\013chunk_count\030\002 \001(\005\022\014\n\004da"
      "ta\030\003 \001(\014\022\014\n\004size\030\004 \001(\005\022\021\n\tfile_hash\030\005 \001("
      "\014\"%\n\021ResponseSongOffer\022\020\n\010accepted\030\001 \001(\010"
      "\"!\n\017RequestRateSong\022\016\n\006rating\030\001 \001(\002\"C\n\031R"
      "esponseDownloadTotalSize\022\022\n\ntotal_size\030\001"
      " \001(\005\022\022\n\nfile_count\030\002 \001(\005\"$\n\023RequestGloba"
      "lSearch\022\r\n\005query\030\001 \001(\t\"\230\001\n\024ResponseGloba"
      "lSearch\022\n\n\002id\030\001 \001(\005\022\r\n\005query\030\002 \001(\t\022\027\n\017se"
      "arch_provider\030\003 \001(\t\022.\n\rsong_metadata\030\004 \003"
      "(\0132\027.pb.remote.SongMetadata\022\034\n\024search_pr"
      "ovider_icon\030\005 \001(\014\"<\n\030ResponseTranscoderS"
      "tatus\022\021\n\tprocessed\030\001 \001(\005\022\r\n\005total\030\002 \001(\005\""
      "f\n\032ResponseGlobalSearchStatus\022\n\n\002id\030\001 \001("
      "\005\022\r\n\005query\030\002 \001(\t\022-\n\006status\030\003 \001(\0162\035.pb.re"
      "mote.GlobalSearchStatus\"\347\017\n\007Message\022\023\n\007v"
      "ersion\030\001 \001(\005:\00221\022)\n\004type\030\002 \001(\0162\022.pb.remo"
      "te.MsgType:\007UNKNOWN\0222\n\017request_connect\030\025"
      " \001(\0132\031.pb.remote.RequestConnect\0226\n\021reque"
      "st_playlists\030\033 \001(\0132\033.pb.remote.RequestPl"
      "aylists\022\?\n\026request_playlist_songs\030\n \001(\0132"
      "\037.pb.remote.RequestPlaylistSongs\0229\n\023requ"
      "est_change_song\030\013 \001(\0132\034.pb.remote.Reques"
      "tChangeSong\0227\n\022request_set_volume\030\014 \001(\0132"
      "\033.pb.remote.RequestSetVolume\022F\n\032request_"
      "set_track_position\030\027 \001(\0132\".pb.remote.Req"
      "uestSetTrackPosition\0229\n\023request_insert_u"
      "rls\030\031 \001(\0132\034.pb.remote.RequestInsertUrls\022"
      ";\n\024request_remove_songs\030\032 \001(\0132\035.pb.remot"
      "e.RequestRemoveSongs\022=\n\025request_open_pla"
      "ylist\030\034 \001(\0132\036.pb.remote.RequestOpenPlayl"
      "ist\022\?\n\026request_close_playlist\030\035 \001(\0132\037.pb"
      ".remote.RequestClosePlaylist\022\?\n\026request_"
      "download_songs\030\037 \001(\0132\037.pb.remote.Request"
      "DownloadSongs\0225\n\021request_rate_song\030# \001(\013"
      "2\032.pb.remote.RequestRateSong\022=\n\025request_"
      "global_search\030% \001(\0132\036.pb.remote.RequestG"
      "lobalSearch\022!\n\006repeat\030\r \001(\0132\021.pb.remote."
      "Repeat\022#\n\007shuffle\030\016 \001(\0132\022.pb.remote.Shuf"
      "fle\022C\n\030response_clementine_info\030\017 \001(\0132!."
      "pb.remote.ResponseClementineInfo\022E\n\031resp"
      "onse_current_metadata\030\020 \001(\0132\".pb.remote."
      "ResponseCurrentMetadata\0228\n\022response_play"
      "lists\030\021 \001(\0132\034.pb.remote.ResponsePlaylist"
      "s\022A\n\027response_playlist_songs\030\022 \001(\0132 .pb."
      "remote.ResponsePlaylistSongs\022L\n\035response"
      "_engine_state_changed\030\023 \001(\0132%.pb.remote."
      "ResponseEngineStateChanged\022N\n\036response_u"
      "pdate_track_position\030\024 \001(\0132&.pb.remote.R"
      "esponseUpdateTrackPosition\022:\n\023response_d"
      "isconnect\030\026 \001(\0132\035.pb.remote.ResponseDisc"
      "onnect\022A\n\027response_active_changed\030\030 \001(\0132"
      " .pb.remote.ResponseActiveChanged\0222\n\017res"
      "ponse_lyrics\030\036 \001(\0132\031.pb.remote.ResponseL"
      "yrics\022B\n\030response_song_file_chunk\030  \001(\0132"
      " .pb.remote.ResponseSongFileChunk\0229\n\023res"
      "ponse_song_offer\030! \001(\0132\034.pb.remote.Respo"
      "nseSongOffer\022\?\n\026response_library_chunk\030\""
      " \001(\0132\037.pb.remote.ResponseLibraryChunk\022J\n"
      "\034response_download_total_size\030$ \001(\0132$.pb"
      ".remote.ResponseDownloadTotalSize\022\?\n\026res"
      "ponse_global_search\030& \001(\0132\037.pb.remote.Re"
      "sponseGlobalSearch\022G\n\032response_transcode"
      "r_status\030\' \001(\0132#.pb.remote.ResponseTrans"
      "coderStatus\022L\n\035response_global_search_st"
      "atus\030( \001(\0132%.pb.remote.ResponseGlobalSea"
      "rchStatus*\232\007\n\007MsgType\022\013\n\007UNKNOWN\020\000\022\013\n\007CO"
      "NNECT\020\001\022\025\n\021REQUEST_PLAYLISTS\020\003\022\032\n\026REQUES"
      "T_PLAYLIST_SONGS\020\004\022\017\n\013CHANGE_SONG\020\005\022\016\n\nS"
      "ET_VOLUME\020\006\022\026\n\022SET_TRACK_POSITION\020\007\022\017\n\013I"
      "NSERT_URLS\020\010\022\020\n\014REMOVE_SONGS\020\t\022\021\n\rOPEN_P"
      "LAYLIST\020\n\022\022\n\016CLOSE_PLAYLIST\020\013\022\016\n\nGET_LYR"
      "ICS\020\016\022\022\n\016DOWNLOAD_SONGS\020\017\022\027\n\023SONG_OFFER_"
      "RESPONSE\020\020\022\010\n\004LOVE\020\014\022\007\n\003BAN\020\r\022\016\n\nSTOP_AF"
      "TER\020\021\022\017\n\013GET_LIBRARY\020\022\022\r\n\tRATE_SONG\020\023\022\021\n"
      "\rGLOBAL_SEARCH\020d\022\016\n\tGET_FILES\020\310\001\022\021\n\014APPE"
      "ND_FILES\020\311\001\022\016\n\nDISCONNECT\020\002\022\010\n\004PLAY\020\024\022\r\n"
      "\tPLAYPAUSE\020\025\022\t\n\005PAUSE\020\026\022\010\n\004STOP\020\027\022\010\n\004NEX"
      "T\020\030\022\014\n\010PREVIOUS\020\031\022\024\n\020SHUFFLE_PLAYLIST\020\032\022"
      "\n\n\006REPEAT\020\033\022\013\n\007SHUFFLE\020\034\022\010\n\004INFO\020(\022\024\n\020CU"
      "RRENT_METAINFO\020)\022\r\n\tPLAYLISTS\020*\022\022\n\016PLAYL"
      "IST_SONGS\020+\022\030\n\024ENGINE_STATE_CHANGED\020,\022\016\n"
      "\nKEEP_ALIVE\020-\022\031\n\025UPDATE_TRACK_POSITION\020."
      "\022\033\n\027ACTIVE_PLAYLIST_CHANGED\020/\022\034\n\030FIRST_D"
      "ATA_SENT_COMPLETE\0200\022\n\n\006LYRICS\0201\022\023\n\017SONG_"
      "FILE_CHUNK\0202\022\030\n\024DOWNLOAD_QUEUE_EMPTY\0203\022\021"
      "\n\rLIBRARY_CHUNK\0204\022\027\n\023DOWNLOAD_TOTAL_SIZE"
      "\0205\022\030\n\024GLOBAL_SEARCH_RESULT\0206\022\025\n\021TRANSCOD"
      "ING_FILES\0207\022\030\n\024GLOBAL_SEARCH_STATUS\0208\022\017\n"
      "\nFILES_LIST\020\312\001*;\n\013EngineState\022\t\n\005Empty\020\000"
      "\022\010\n\004Idle\020\001\022\013\n\007Playing\020\002\022\n\n\006Paused\020\003*|\n\nR"
      "epeatMode\022\016\n\nRepeat_Off\020\000\022\020\n\014Repeat_Trac"
      "k\020\001\022\020\n\014Repeat_Album\020\002\022\023\n\017Repeat_Playlist"
      "\020\003\022\023\n\017Repeat_OneByOne\020\004\022\020\n\014Repeat_Intro\020"
      "\005*\\\n\013ShuffleMode\022\017\n\013Shuffle_Off\020\000\022\017\n\013Shu"
      "ffle_All\020\001\022\027\n\023Shuffle_InsideAlbum\020\002\022\022\n\016S"
      "huffle_Albums\020\003*k\n\020ReasonDisconnect\022\023\n\017S"
      "erver_Shutdown\020\001\022\023\n\017Wrong_Auth_Code\020\002\022\025\n"
      "\021Not_Authenticated\020\003\022\026\n\022Download_Forbidd"
      "en\020\004*G\n\014DownloadItem\022\017\n\013CurrentItem\020\001\022\r\n"
      "\tItemAlbum\020\002\022\r\n\tAPlaylist\020\003\022\010\n\004Urls\020\004*G\n"
      "\022GlobalSearchStatus\022\027\n\023GlobalSearchStart"
      "ed\020\001\022\030\n\024GlobalSearchFinished\020\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 6670);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "remotecontrolmessages.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_remotecontrolmessages_2eproto
namespace pb {
namespace remote {
const ::google::protobuf::EnumDescriptor* SongMetadata_Type_descriptor() {
  protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_remotecontrolmessages_2eproto::file_level_enum_descriptors[0];
}
bool SongMetadata_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 99:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SongMetadata_Type SongMetadata::UNKNOWN;
const SongMetadata_Type SongMetadata::ASF;
const SongMetadata_Type SongMetadata::FLAC;
const SongMetadata_Type SongMetadata::MP4;
const SongMetadata_Type SongMetadata::MPC;
const SongMetadata_Type SongMetadata::MPEG;
const SongMetadata_Type SongMetadata::OGGFLAC;
const SongMetadata_Type SongMetadata::OGGSPEEX;
const SongMetadata_Type SongMetadata::OGGVORBIS;
const SongMetadata_Type SongMetadata::AIFF;
const SongMetadata_Type SongMetadata::WAV;
const SongMetadata_Type SongMetadata::TRUEAUDIO;
const SongMetadata_Type SongMetadata::CDDA;
const SongMetadata_Type SongMetadata::OGGOPUS;
const SongMetadata_Type SongMetadata::WAVPACK;
const SongMetadata_Type SongMetadata::SPC;
const SongMetadata_Type SongMetadata::VGM;
const SongMetadata_Type SongMetadata::APE;
const SongMetadata_Type SongMetadata::STREAM;
const SongMetadata_Type SongMetadata::Type_MIN;
const SongMetadata_Type SongMetadata::Type_MAX;
const int SongMetadata::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MsgType_descriptor() {
  protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_remotecontrolmessages_2eproto::file_level_enum_descriptors[1];
}
bool MsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 100:
    case 200:
    case 201:
    case 202:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EngineState_descriptor() {
  protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_remotecontrolmessages_2eproto::file_level_enum_descriptors[2];
}
bool EngineState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RepeatMode_descriptor() {
  protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_remotecontrolmessages_2eproto::file_level_enum_descriptors[3];
}
bool RepeatMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ShuffleMode_descriptor() {
  protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_remotecontrolmessages_2eproto::file_level_enum_descriptors[4];
}
bool ShuffleMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ReasonDisconnect_descriptor() {
  protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_remotecontrolmessages_2eproto::file_level_enum_descriptors[5];
}
bool ReasonDisconnect_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DownloadItem_descriptor() {
  protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_remotecontrolmessages_2eproto::file_level_enum_descriptors[6];
}
bool DownloadItem_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GlobalSearchStatus_descriptor() {
  protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_remotecontrolmessages_2eproto::file_level_enum_descriptors[7];
}
bool GlobalSearchStatus_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void RequestFiles::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestFiles::kRelativePathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestFiles::RequestFiles()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_remotecontrolmessages_2eproto::scc_info_RequestFiles.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.RequestFiles)
}
RequestFiles::RequestFiles(const RequestFiles& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  relativepath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_relativepath()) {
    relativepath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.relativepath_);
  }
  // @@protoc_insertion_point(copy_constructor:pb.remote.RequestFiles)
}

void RequestFiles::SharedCtor() {
  relativepath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RequestFiles::~RequestFiles() {
  // @@protoc_insertion_point(destructor:pb.remote.RequestFiles)
  SharedDtor();
}

void RequestFiles::SharedDtor() {
  relativepath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RequestFiles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestFiles::descriptor() {
  ::protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestFiles& RequestFiles::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_remotecontrolmessages_2eproto::scc_info_RequestFiles.base);
  return *internal_default_instance();
}


void RequestFiles::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.RequestFiles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    relativepath_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestFiles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.RequestFiles)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string relativePath = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_relativepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->relativepath().data(), static_cast<int>(this->relativepath().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.remote.RequestFiles.relativePath");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.RequestFiles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.RequestFiles)
  return false;
#undef DO_
}

void RequestFiles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.RequestFiles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string relativePath = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->relativepath().data(), static_cast<int>(this->relativepath().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.RequestFiles.relativePath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->relativepath(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.RequestFiles)
}

::google::protobuf::uint8* RequestFiles::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.RequestFiles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string relativePath = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->relativepath().data(), static_cast<int>(this->relativepath().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.RequestFiles.relativePath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->relativepath(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.RequestFiles)
  return target;
}

size_t RequestFiles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.RequestFiles)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional string relativePath = 1;
  if (has_relativepath()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->relativepath());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestFiles::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.RequestFiles)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestFiles* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestFiles>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.RequestFiles)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.RequestFiles)
    MergeFrom(*source);
  }
}

void RequestFiles::MergeFrom(const RequestFiles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.RequestFiles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_relativepath()) {
    set_has_relativepath();
    relativepath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.relativepath_);
  }
}

void RequestFiles::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.RequestFiles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestFiles::CopyFrom(const RequestFiles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.RequestFiles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestFiles::IsInitialized() const {
  return true;
}

void RequestFiles::Swap(RequestFiles* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestFiles::InternalSwap(RequestFiles* other) {
  using std::swap;
  relativepath_.Swap(&other->relativepath_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestFiles::GetMetadata() const {
  protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Files::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Files::kRelativePathFieldNumber;
const int Files::kFileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Files::Files()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_remotecontrolmessages_2eproto::scc_info_Files.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.Files)
}
Files::Files(const Files& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      file_(from.file_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  relativepath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_relativepath()) {
    relativepath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.relativepath_);
  }
  // @@protoc_insertion_point(copy_constructor:pb.remote.Files)
}

void Files::SharedCtor() {
  relativepath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Files::~Files() {
  // @@protoc_insertion_point(destructor:pb.remote.Files)
  SharedDtor();
}

void Files::SharedDtor() {
  relativepath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Files::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Files::descriptor() {
  ::protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Files& Files::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_remotecontrolmessages_2eproto::scc_info_Files.base);
  return *internal_default_instance();
}


void Files::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.Files)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    relativepath_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Files::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.Files)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string relativePath = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_relativepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->relativepath().data(), static_cast<int>(this->relativepath().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.remote.Files.relativePath");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string file = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file(this->file_size() - 1).data(),
            static_cast<int>(this->file(this->file_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.remote.Files.file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.Files)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.Files)
  return false;
#undef DO_
}

void Files::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.Files)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string relativePath = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->relativepath().data(), static_cast<int>(this->relativepath().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.Files.relativePath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->relativepath(), output);
  }

  // repeated string file = 2;
  for (int i = 0, n = this->file_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file(i).data(), static_cast<int>(this->file(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.Files.file");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->file(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.Files)
}

::google::protobuf::uint8* Files::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.Files)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string relativePath = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->relativepath().data(), static_cast<int>(this->relativepath().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.Files.relativePath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->relativepath(), target);
  }

  // repeated string file = 2;
  for (int i = 0, n = this->file_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file(i).data(), static_cast<int>(this->file(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.Files.file");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->file(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.Files)
  return target;
}

size_t Files::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.Files)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string file = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->file_size());
  for (int i = 0, n = this->file_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->file(i));
  }

  // optional string relativePath = 1;
  if (has_relativepath()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->relativepath());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Files::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.Files)
  GOOGLE_DCHECK_NE(&from, this);
  const Files* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Files>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.Files)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.Files)
    MergeFrom(*source);
  }
}

void Files::MergeFrom(const Files& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.Files)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  file_.MergeFrom(from.file_);
  if (from.has_relativepath()) {
    set_has_relativepath();
    relativepath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.relativepath_);
  }
}

void Files::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.Files)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Files::CopyFrom(const Files& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.Files)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Files::IsInitialized() const {
  return true;
}

void Files::Swap(Files* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Files::InternalSwap(Files* other) {
  using std::swap;
  file_.InternalSwap(CastToBase(&other->file_));
  relativepath_.Swap(&other->relativepath_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Files::GetMetadata() const {
  protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SongMetadata::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SongMetadata::kIdFieldNumber;
const int SongMetadata::kIndexFieldNumber;
const int SongMetadata::kTitleFieldNumber;
const int SongMetadata::kAlbumFieldNumber;
const int SongMetadata::kArtistFieldNumber;
const int SongMetadata::kAlbumartistFieldNumber;
const int SongMetadata::kTrackFieldNumber;
const int SongMetadata::kDiscFieldNumber;
const int SongMetadata::kPrettyYearFieldNumber;
const int SongMetadata::kGenreFieldNumber;
const int SongMetadata::kPlaycountFieldNumber;
const int SongMetadata::kPrettyLengthFieldNumber;
const int SongMetadata::kArtFieldNumber;
const int SongMetadata::kLengthFieldNumber;
const int SongMetadata::kIsLocalFieldNumber;
const int SongMetadata::kFilenameFieldNumber;
const int SongMetadata::kFileSizeFieldNumber;
const int SongMetadata::kRatingFieldNumber;
const int SongMetadata::kUrlFieldNumber;
const int SongMetadata::kArtAutomaticFieldNumber;
const int SongMetadata::kArtManualFieldNumber;
const int SongMetadata::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SongMetadata::SongMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_remotecontrolmessages_2eproto::scc_info_SongMetadata.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.SongMetadata)
}
SongMetadata::SongMetadata(const SongMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  album_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_album()) {
    album_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.album_);
  }
  artist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_artist()) {
    artist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.artist_);
  }
  albumartist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_albumartist()) {
    albumartist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.albumartist_);
  }
  pretty_year_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pretty_year()) {
    pretty_year_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pretty_year_);
  }
  genre_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_genre()) {
    genre_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.genre_);
  }
  pretty_length_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pretty_length()) {
    pretty_length_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pretty_length_);
  }
  art_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_art()) {
    art_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.art_);
  }
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filename()) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  art_automatic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_art_automatic()) {
    art_automatic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.art_automatic_);
  }
  art_manual_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_art_manual()) {
    art_manual_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.art_manual_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:pb.remote.SongMetadata)
}

void SongMetadata::SharedCtor() {
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  album_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  artist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  albumartist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pretty_year_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  genre_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pretty_length_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  art_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  art_automatic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  art_manual_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
}

SongMetadata::~SongMetadata() {
  // @@protoc_insertion_point(destructor:pb.remote.SongMetadata)
  SharedDtor();
}

void SongMetadata::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  album_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  artist_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  albumartist_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pretty_year_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  genre_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pretty_length_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  art_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  art_automatic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  art_manual_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SongMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SongMetadata::descriptor() {
  ::protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SongMetadata& SongMetadata::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_remotecontrolmessages_2eproto::scc_info_SongMetadata.base);
  return *internal_default_instance();
}


void SongMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.SongMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      title_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      album_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      artist_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      albumartist_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      pretty_year_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      genre_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      pretty_length_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      art_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      filename_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000200u) {
      url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000400u) {
      art_automatic_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000800u) {
      art_manual_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 61440u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&disc_) -
        reinterpret_cast<char*>(&id_)) + sizeof(disc_));
  }
  if (cached_has_bits & 4128768u) {
    ::memset(&playcount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&playcount_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SongMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.SongMetadata)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.remote.SongMetadata.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string album = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_album()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->album().data(), static_cast<int>(this->album().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.remote.SongMetadata.album");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string artist = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_artist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->artist().data(), static_cast<int>(this->artist().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.remote.SongMetadata.artist");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string albumartist = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_albumartist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->albumartist().data(), static_cast<int>(this->albumartist().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.remote.SongMetadata.albumartist");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 track = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_track();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &track_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 disc = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_disc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &disc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string pretty_year = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pretty_year()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pretty_year().data(), static_cast<int>(this->pretty_year().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.remote.SongMetadata.pretty_year");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string genre = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_genre()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->genre().data(), static_cast<int>(this->genre().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.remote.SongMetadata.genre");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 playcount = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_playcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string pretty_length = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pretty_length()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pretty_length().data(), static_cast<int>(this->pretty_length().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.remote.SongMetadata.pretty_length");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes art = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_art()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 length = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_local = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_is_local();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_local_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string filename = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.remote.SongMetadata.filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 file_size = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_file_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float rating = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u /* 149 & 0xFF */)) {
          set_has_rating();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rating_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.remote.SongMetadata.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string art_automatic = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_art_automatic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->art_automatic().data(), static_cast<int>(this->art_automatic().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.remote.SongMetadata.art_automatic");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string art_manual = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_art_manual()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->art_manual().data(), static_cast<int>(this->art_manual().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.remote.SongMetadata.art_manual");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pb.remote.SongMetadata.Type type = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::remote::SongMetadata_Type_IsValid(value)) {
            set_type(static_cast< ::pb::remote::SongMetadata_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                22, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.SongMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.SongMetadata)
  return false;
#undef DO_
}

void SongMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.SongMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 index = 2;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  // optional string title = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.SongMetadata.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->title(), output);
  }

  // optional string album = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->album().data(), static_cast<int>(this->album().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.SongMetadata.album");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->album(), output);
  }

  // optional string artist = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->artist().data(), static_cast<int>(this->artist().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.SongMetadata.artist");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->artist(), output);
  }

  // optional string albumartist = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->albumartist().data(), static_cast<int>(this->albumartist().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.SongMetadata.albumartist");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->albumartist(), output);
  }

  // optional int32 track = 7;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->track(), output);
  }

  // optional int32 disc = 8;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->disc(), output);
  }

  // optional string pretty_year = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pretty_year().data(), static_cast<int>(this->pretty_year().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.SongMetadata.pretty_year");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->pretty_year(), output);
  }

  // optional string genre = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->genre().data(), static_cast<int>(this->genre().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.SongMetadata.genre");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->genre(), output);
  }

  // optional int32 playcount = 11;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->playcount(), output);
  }

  // optional string pretty_length = 12;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pretty_length().data(), static_cast<int>(this->pretty_length().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.SongMetadata.pretty_length");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->pretty_length(), output);
  }

  // optional bytes art = 13;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->art(), output);
  }

  // optional int32 length = 14;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->length(), output);
  }

  // optional bool is_local = 15;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->is_local(), output);
  }

  // optional string filename = 16;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.SongMetadata.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->filename(), output);
  }

  // optional int32 file_size = 17;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->file_size(), output);
  }

  // optional float rating = 18;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->rating(), output);
  }

  // optional string url = 19;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.SongMetadata.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->url(), output);
  }

  // optional string art_automatic = 20;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->art_automatic().data(), static_cast<int>(this->art_automatic().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.SongMetadata.art_automatic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->art_automatic(), output);
  }

  // optional string art_manual = 21;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->art_manual().data(), static_cast<int>(this->art_manual().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.SongMetadata.art_manual");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->art_manual(), output);
  }

  // optional .pb.remote.SongMetadata.Type type = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.SongMetadata)
}

::google::protobuf::uint8* SongMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.SongMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 index = 2;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  // optional string title = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.SongMetadata.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }

  // optional string album = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->album().data(), static_cast<int>(this->album().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.SongMetadata.album");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->album(), target);
  }

  // optional string artist = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->artist().data(), static_cast<int>(this->artist().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.SongMetadata.artist");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->artist(), target);
  }

  // optional string albumartist = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->albumartist().data(), static_cast<int>(this->albumartist().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.SongMetadata.albumartist");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->albumartist(), target);
  }

  // optional int32 track = 7;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->track(), target);
  }

  // optional int32 disc = 8;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->disc(), target);
  }

  // optional string pretty_year = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pretty_year().data(), static_cast<int>(this->pretty_year().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.SongMetadata.pretty_year");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->pretty_year(), target);
  }

  // optional string genre = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->genre().data(), static_cast<int>(this->genre().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.SongMetadata.genre");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->genre(), target);
  }

  // optional int32 playcount = 11;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->playcount(), target);
  }

  // optional string pretty_length = 12;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pretty_length().data(), static_cast<int>(this->pretty_length().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.SongMetadata.pretty_length");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->pretty_length(), target);
  }

  // optional bytes art = 13;
  if (cached_has_bits & 0x00000080u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->art(), target);
  }

  // optional int32 length = 14;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->length(), target);
  }

  // optional bool is_local = 15;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->is_local(), target);
  }

  // optional string filename = 16;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.SongMetadata.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->filename(), target);
  }

  // optional int32 file_size = 17;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->file_size(), target);
  }

  // optional float rating = 18;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->rating(), target);
  }

  // optional string url = 19;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.SongMetadata.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->url(), target);
  }

  // optional string art_automatic = 20;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->art_automatic().data(), static_cast<int>(this->art_automatic().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.SongMetadata.art_automatic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->art_automatic(), target);
  }

  // optional string art_manual = 21;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->art_manual().data(), static_cast<int>(this->art_manual().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.SongMetadata.art_manual");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->art_manual(), target);
  }

  // optional .pb.remote.SongMetadata.Type type = 22;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.SongMetadata)
  return target;
}

size_t SongMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.SongMetadata)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string album = 4;
    if (has_album()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->album());
    }

    // optional string artist = 5;
    if (has_artist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->artist());
    }

    // optional string albumartist = 6;
    if (has_albumartist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->albumartist());
    }

    // optional string pretty_year = 9;
    if (has_pretty_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pretty_year());
    }

    // optional string genre = 10;
    if (has_genre()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->genre());
    }

    // optional string pretty_length = 12;
    if (has_pretty_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pretty_length());
    }

    // optional bytes art = 13;
    if (has_art()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->art());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional string filename = 16;
    if (has_filename()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string url = 19;
    if (has_url()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string art_automatic = 20;
    if (has_art_automatic()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->art_automatic());
    }

    // optional string art_manual = 21;
    if (has_art_manual()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->art_manual());
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 track = 7;
    if (has_track()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->track());
    }

    // optional int32 disc = 8;
    if (has_disc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->disc());
    }

  }
  if (_has_bits_[16 / 32] & 4128768u) {
    // optional int32 playcount = 11;
    if (has_playcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playcount());
    }

    // optional int32 length = 14;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->length());
    }

    // optional bool is_local = 15;
    if (has_is_local()) {
      total_size += 1 + 1;
    }

    // optional int32 file_size = 17;
    if (has_file_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->file_size());
    }

    // optional float rating = 18;
    if (has_rating()) {
      total_size += 2 + 4;
    }

    // optional .pb.remote.SongMetadata.Type type = 22;
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SongMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.SongMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const SongMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SongMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.SongMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.SongMetadata)
    MergeFrom(*source);
  }
}

void SongMetadata::MergeFrom(const SongMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.SongMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_album();
      album_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.album_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_artist();
      artist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.artist_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_albumartist();
      albumartist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.albumartist_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_pretty_year();
      pretty_year_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pretty_year_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_genre();
      genre_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.genre_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_pretty_length();
      pretty_length_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pretty_length_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_art();
      art_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.art_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_filename();
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000400u) {
      set_has_art_automatic();
      art_automatic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.art_automatic_);
    }
    if (cached_has_bits & 0x00000800u) {
      set_has_art_manual();
      art_manual_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.art_manual_);
    }
    if (cached_has_bits & 0x00001000u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00002000u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00004000u) {
      track_ = from.track_;
    }
    if (cached_has_bits & 0x00008000u) {
      disc_ = from.disc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4128768u) {
    if (cached_has_bits & 0x00010000u) {
      playcount_ = from.playcount_;
    }
    if (cached_has_bits & 0x00020000u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00040000u) {
      is_local_ = from.is_local_;
    }
    if (cached_has_bits & 0x00080000u) {
      file_size_ = from.file_size_;
    }
    if (cached_has_bits & 0x00100000u) {
      rating_ = from.rating_;
    }
    if (cached_has_bits & 0x00200000u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SongMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.SongMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SongMetadata::CopyFrom(const SongMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.SongMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SongMetadata::IsInitialized() const {
  return true;
}

void SongMetadata::Swap(SongMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SongMetadata::InternalSwap(SongMetadata* other) {
  using std::swap;
  title_.Swap(&other->title_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  album_.Swap(&other->album_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  artist_.Swap(&other->artist_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  albumartist_.Swap(&other->albumartist_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pretty_year_.Swap(&other->pretty_year_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  genre_.Swap(&other->genre_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pretty_length_.Swap(&other->pretty_length_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  art_.Swap(&other->art_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filename_.Swap(&other->filename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  url_.Swap(&other->url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  art_automatic_.Swap(&other->art_automatic_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  art_manual_.Swap(&other->art_manual_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(index_, other->index_);
  swap(track_, other->track_);
  swap(disc_, other->disc_);
  swap(playcount_, other->playcount_);
  swap(length_, other->length_);
  swap(is_local_, other->is_local_);
  swap(file_size_, other->file_size_);
  swap(rating_, other->rating_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SongMetadata::GetMetadata() const {
  protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Playlist::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Playlist::kIdFieldNumber;
const int Playlist::kNameFieldNumber;
const int Playlist::kItemCountFieldNumber;
const int Playlist::kActiveFieldNumber;
const int Playlist::kClosedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Playlist::Playlist()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_remotecontrolmessages_2eproto::scc_info_Playlist.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.Playlist)
}
Playlist::Playlist(const Playlist& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&closed_) -
    reinterpret_cast<char*>(&id_)) + sizeof(closed_));
  // @@protoc_insertion_point(copy_constructor:pb.remote.Playlist)
}

void Playlist::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&closed_) -
      reinterpret_cast<char*>(&id_)) + sizeof(closed_));
}

Playlist::~Playlist() {
  // @@protoc_insertion_point(destructor:pb.remote.Playlist)
  SharedDtor();
}

void Playlist::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Playlist::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Playlist::descriptor() {
  ::protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Playlist& Playlist::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_remotecontrolmessages_2eproto::scc_info_Playlist.base);
  return *internal_default_instance();
}


void Playlist::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.Playlist)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 30u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&closed_) -
        reinterpret_cast<char*>(&id_)) + sizeof(closed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Playlist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.Playlist)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.remote.Playlist.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 item_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_item_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool active = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_active();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool closed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_closed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &closed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.Playlist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.Playlist)
  return false;
#undef DO_
}

void Playlist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.Playlist)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.Playlist.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional int32 item_count = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->item_count(), output);
  }

  // optional bool active = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->active(), output);
  }

  // optional bool closed = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->closed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.Playlist)
}

::google::protobuf::uint8* Playlist::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.Playlist)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.Playlist.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 item_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->item_count(), target);
  }

  // optional bool active = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->active(), target);
  }

  // optional bool closed = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->closed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.Playlist)
  return target;
}

size_t Playlist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.Playlist)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 item_count = 3;
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_count());
    }

    // optional bool active = 4;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional bool closed = 5;
    if (has_closed()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Playlist::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.Playlist)
  GOOGLE_DCHECK_NE(&from, this);
  const Playlist* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Playlist>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.Playlist)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.Playlist)
    MergeFrom(*source);
  }
}

void Playlist::MergeFrom(const Playlist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.Playlist)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      item_count_ = from.item_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      active_ = from.active_;
    }
    if (cached_has_bits & 0x00000010u) {
      closed_ = from.closed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Playlist::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.Playlist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Playlist::CopyFrom(const Playlist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.Playlist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Playlist::IsInitialized() const {
  return true;
}

void Playlist::Swap(Playlist* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Playlist::InternalSwap(Playlist* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(item_count_, other->item_count_);
  swap(active_, other->active_);
  swap(closed_, other->closed_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Playlist::GetMetadata() const {
  protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestPlaylists::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestPlaylists::kIncludeClosedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestPlaylists::RequestPlaylists()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_remotecontrolmessages_2eproto::scc_info_RequestPlaylists.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.RequestPlaylists)
}
RequestPlaylists::RequestPlaylists(const RequestPlaylists& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  include_closed_ = from.include_closed_;
  // @@protoc_insertion_point(copy_constructor:pb.remote.RequestPlaylists)
}

void RequestPlaylists::SharedCtor() {
  include_closed_ = false;
}

RequestPlaylists::~RequestPlaylists() {
  // @@protoc_insertion_point(destructor:pb.remote.RequestPlaylists)
  SharedDtor();
}

void RequestPlaylists::SharedDtor() {
}

void RequestPlaylists::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestPlaylists::descriptor() {
  ::protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestPlaylists& RequestPlaylists::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_remotecontrolmessages_2eproto::scc_info_RequestPlaylists.base);
  return *internal_default_instance();
}


void RequestPlaylists::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.RequestPlaylists)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  include_closed_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestPlaylists::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.RequestPlaylists)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool include_closed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_include_closed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_closed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.RequestPlaylists)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.RequestPlaylists)
  return false;
#undef DO_
}

void RequestPlaylists::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.RequestPlaylists)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool include_closed = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->include_closed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.RequestPlaylists)
}

::google::protobuf::uint8* RequestPlaylists::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.RequestPlaylists)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool include_closed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->include_closed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.RequestPlaylists)
  return target;
}

size_t RequestPlaylists::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.RequestPlaylists)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional bool include_closed = 1;
  if (has_include_closed()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestPlaylists::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.RequestPlaylists)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestPlaylists* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestPlaylists>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.RequestPlaylists)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.RequestPlaylists)
    MergeFrom(*source);
  }
}

void RequestPlaylists::MergeFrom(const RequestPlaylists& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.RequestPlaylists)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_include_closed()) {
    set_include_closed(from.include_closed());
  }
}

void RequestPlaylists::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.RequestPlaylists)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestPlaylists::CopyFrom(const RequestPlaylists& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.RequestPlaylists)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestPlaylists::IsInitialized() const {
  return true;
}

void RequestPlaylists::Swap(RequestPlaylists* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestPlaylists::InternalSwap(RequestPlaylists* other) {
  using std::swap;
  swap(include_closed_, other->include_closed_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestPlaylists::GetMetadata() const {
  protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestPlaylistSongs::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestPlaylistSongs::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestPlaylistSongs::RequestPlaylistSongs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_remotecontrolmessages_2eproto::scc_info_RequestPlaylistSongs.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.RequestPlaylistSongs)
}
RequestPlaylistSongs::RequestPlaylistSongs(const RequestPlaylistSongs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:pb.remote.RequestPlaylistSongs)
}

void RequestPlaylistSongs::SharedCtor() {
  id_ = 0;
}

RequestPlaylistSongs::~RequestPlaylistSongs() {
  // @@protoc_insertion_point(destructor:pb.remote.RequestPlaylistSongs)
  SharedDtor();
}

void RequestPlaylistSongs::SharedDtor() {
}

void RequestPlaylistSongs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestPlaylistSongs::descriptor() {
  ::protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestPlaylistSongs& RequestPlaylistSongs::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_remotecontrolmessages_2eproto::scc_info_RequestPlaylistSongs.base);
  return *internal_default_instance();
}


void RequestPlaylistSongs::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.RequestPlaylistSongs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestPlaylistSongs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.RequestPlaylistSongs)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.RequestPlaylistSongs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.RequestPlaylistSongs)
  return false;
#undef DO_
}

void RequestPlaylistSongs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.RequestPlaylistSongs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.RequestPlaylistSongs)
}

::google::protobuf::uint8* RequestPlaylistSongs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.RequestPlaylistSongs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.RequestPlaylistSongs)
  return target;
}

size_t RequestPlaylistSongs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.RequestPlaylistSongs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestPlaylistSongs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.RequestPlaylistSongs)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestPlaylistSongs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestPlaylistSongs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.RequestPlaylistSongs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.RequestPlaylistSongs)
    MergeFrom(*source);
  }
}

void RequestPlaylistSongs::MergeFrom(const RequestPlaylistSongs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.RequestPlaylistSongs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    set_id(from.id());
  }
}

void RequestPlaylistSongs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.RequestPlaylistSongs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestPlaylistSongs::CopyFrom(const RequestPlaylistSongs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.RequestPlaylistSongs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestPlaylistSongs::IsInitialized() const {
  return true;
}

void RequestPlaylistSongs::Swap(RequestPlaylistSongs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestPlaylistSongs::InternalSwap(RequestPlaylistSongs* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestPlaylistSongs::GetMetadata() const {
  protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestChangeSong::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestChangeSong::kPlaylistIdFieldNumber;
const int RequestChangeSong::kSongIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestChangeSong::RequestChangeSong()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_remotecontrolmessages_2eproto::scc_info_RequestChangeSong.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.RequestChangeSong)
}
RequestChangeSong::RequestChangeSong(const RequestChangeSong& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&playlist_id_, &from.playlist_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&song_index_) -
    reinterpret_cast<char*>(&playlist_id_)) + sizeof(song_index_));
  // @@protoc_insertion_point(copy_constructor:pb.remote.RequestChangeSong)
}

void RequestChangeSong::SharedCtor() {
  ::memset(&playlist_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&song_index_) -
      reinterpret_cast<char*>(&playlist_id_)) + sizeof(song_index_));
}

RequestChangeSong::~RequestChangeSong() {
  // @@protoc_insertion_point(destructor:pb.remote.RequestChangeSong)
  SharedDtor();
}

void RequestChangeSong::SharedDtor() {
}

void RequestChangeSong::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestChangeSong::descriptor() {
  ::protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestChangeSong& RequestChangeSong::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_remotecontrolmessages_2eproto::scc_info_RequestChangeSong.base);
  return *internal_default_instance();
}


void RequestChangeSong::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.RequestChangeSong)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&playlist_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&song_index_) -
        reinterpret_cast<char*>(&playlist_id_)) + sizeof(song_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestChangeSong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.RequestChangeSong)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 playlist_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_playlist_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playlist_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 song_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_song_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &song_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.RequestChangeSong)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.RequestChangeSong)
  return false;
#undef DO_
}

void RequestChangeSong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.RequestChangeSong)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 playlist_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playlist_id(), output);
  }

  // optional int32 song_index = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->song_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.RequestChangeSong)
}

::google::protobuf::uint8* RequestChangeSong::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.RequestChangeSong)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 playlist_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playlist_id(), target);
  }

  // optional int32 song_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->song_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.RequestChangeSong)
  return target;
}

size_t RequestChangeSong::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.RequestChangeSong)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 playlist_id = 1;
    if (has_playlist_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playlist_id());
    }

    // optional int32 song_index = 2;
    if (has_song_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->song_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestChangeSong::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.RequestChangeSong)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestChangeSong* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestChangeSong>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.RequestChangeSong)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.RequestChangeSong)
    MergeFrom(*source);
  }
}

void RequestChangeSong::MergeFrom(const RequestChangeSong& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.RequestChangeSong)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      playlist_id_ = from.playlist_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      song_index_ = from.song_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RequestChangeSong::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.RequestChangeSong)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestChangeSong::CopyFrom(const RequestChangeSong& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.RequestChangeSong)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestChangeSong::IsInitialized() const {
  return true;
}

void RequestChangeSong::Swap(RequestChangeSong* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestChangeSong::InternalSwap(RequestChangeSong* other) {
  using std::swap;
  swap(playlist_id_, other->playlist_id_);
  swap(song_index_, other->song_index_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestChangeSong::GetMetadata() const {
  protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestSetVolume::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestSetVolume::kVolumeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestSetVolume::RequestSetVolume()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_remotecontrolmessages_2eproto::scc_info_RequestSetVolume.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.RequestSetVolume)
}
RequestSetVolume::RequestSetVolume(const RequestSetVolume& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  volume_ = from.volume_;
  // @@protoc_insertion_point(copy_constructor:pb.remote.RequestSetVolume)
}

void RequestSetVolume::SharedCtor() {
  volume_ = 0;
}

RequestSetVolume::~RequestSetVolume() {
  // @@protoc_insertion_point(destructor:pb.remote.RequestSetVolume)
  SharedDtor();
}

void RequestSetVolume::SharedDtor() {
}

void RequestSetVolume::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestSetVolume::descriptor() {
  ::protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestSetVolume& RequestSetVolume::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_remotecontrolmessages_2eproto::scc_info_RequestSetVolume.base);
  return *internal_default_instance();
}


void RequestSetVolume::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.RequestSetVolume)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  volume_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestSetVolume::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.RequestSetVolume)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 volume = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.RequestSetVolume)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.RequestSetVolume)
  return false;
#undef DO_
}

void RequestSetVolume::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.RequestSetVolume)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 volume = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->volume(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.RequestSetVolume)
}

::google::protobuf::uint8* RequestSetVolume::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.RequestSetVolume)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 volume = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->volume(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.RequestSetVolume)
  return target;
}

size_t RequestSetVolume::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.RequestSetVolume)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int32 volume = 1;
  if (has_volume()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volume());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestSetVolume::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.RequestSetVolume)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestSetVolume* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestSetVolume>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.RequestSetVolume)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.RequestSetVolume)
    MergeFrom(*source);
  }
}

void RequestSetVolume::MergeFrom(const RequestSetVolume& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.RequestSetVolume)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_volume()) {
    set_volume(from.volume());
  }
}

void RequestSetVolume::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.RequestSetVolume)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestSetVolume::CopyFrom(const RequestSetVolume& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.RequestSetVolume)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSetVolume::IsInitialized() const {
  return true;
}

void RequestSetVolume::Swap(RequestSetVolume* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestSetVolume::InternalSwap(RequestSetVolume* other) {
  using std::swap;
  swap(volume_, other->volume_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestSetVolume::GetMetadata() const {
  protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Repeat::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Repeat::kRepeatModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Repeat::Repeat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_remotecontrolmessages_2eproto::scc_info_Repeat.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.Repeat)
}
Repeat::Repeat(const Repeat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  repeat_mode_ = from.repeat_mode_;
  // @@protoc_insertion_point(copy_constructor:pb.remote.Repeat)
}

void Repeat::SharedCtor() {
  repeat_mode_ = 0;
}

Repeat::~Repeat() {
  // @@protoc_insertion_point(destructor:pb.remote.Repeat)
  SharedDtor();
}

void Repeat::SharedDtor() {
}

void Repeat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Repeat::descriptor() {
  ::protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Repeat& Repeat::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_remotecontrolmessages_2eproto::scc_info_Repeat.base);
  return *internal_default_instance();
}


void Repeat::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.Repeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repeat_mode_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Repeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.Repeat)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.remote.RepeatMode repeat_mode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::remote::RepeatMode_IsValid(value)) {
            set_repeat_mode(static_cast< ::pb::remote::RepeatMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.Repeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.Repeat)
  return false;
#undef DO_
}

void Repeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.Repeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pb.remote.RepeatMode repeat_mode = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->repeat_mode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.Repeat)
}

::google::protobuf::uint8* Repeat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.Repeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pb.remote.RepeatMode repeat_mode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->repeat_mode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.Repeat)
  return target;
}

size_t Repeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.Repeat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .pb.remote.RepeatMode repeat_mode = 1;
  if (has_repeat_mode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->repeat_mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Repeat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.Repeat)
  GOOGLE_DCHECK_NE(&from, this);
  const Repeat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Repeat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.Repeat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.Repeat)
    MergeFrom(*source);
  }
}

void Repeat::MergeFrom(const Repeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.Repeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_repeat_mode()) {
    set_repeat_mode(from.repeat_mode());
  }
}

void Repeat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.Repeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Repeat::CopyFrom(const Repeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.Repeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Repeat::IsInitialized() const {
  return true;
}

void Repeat::Swap(Repeat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Repeat::InternalSwap(Repeat* other) {
  using std::swap;
  swap(repeat_mode_, other->repeat_mode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Repeat::GetMetadata() const {
  protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Shuffle::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Shuffle::kShuffleModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Shuffle::Shuffle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_remotecontrolmessages_2eproto::scc_info_Shuffle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.Shuffle)
}
Shuffle::Shuffle(const Shuffle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  shuffle_mode_ = from.shuffle_mode_;
  // @@protoc_insertion_point(copy_constructor:pb.remote.Shuffle)
}

void Shuffle::SharedCtor() {
  shuffle_mode_ = 0;
}

Shuffle::~Shuffle() {
  // @@protoc_insertion_point(destructor:pb.remote.Shuffle)
  SharedDtor();
}

void Shuffle::SharedDtor() {
}

void Shuffle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Shuffle::descriptor() {
  ::protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Shuffle& Shuffle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_remotecontrolmessages_2eproto::scc_info_Shuffle.base);
  return *internal_default_instance();
}


void Shuffle::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.Shuffle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shuffle_mode_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Shuffle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.Shuffle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.remote.ShuffleMode shuffle_mode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::remote::ShuffleMode_IsValid(value)) {
            set_shuffle_mode(static_cast< ::pb::remote::ShuffleMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.Shuffle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.Shuffle)
  return false;
#undef DO_
}

void Shuffle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.Shuffle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pb.remote.ShuffleMode shuffle_mode = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->shuffle_mode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.Shuffle)
}

::google::protobuf::uint8* Shuffle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.Shuffle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pb.remote.ShuffleMode shuffle_mode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->shuffle_mode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.Shuffle)
  return target;
}

size_t Shuffle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.Shuffle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .pb.remote.ShuffleMode shuffle_mode = 1;
  if (has_shuffle_mode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->shuffle_mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Shuffle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.Shuffle)
  GOOGLE_DCHECK_NE(&from, this);
  const Shuffle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Shuffle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.Shuffle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.Shuffle)
    MergeFrom(*source);
  }
}

void Shuffle::MergeFrom(const Shuffle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.Shuffle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_shuffle_mode()) {
    set_shuffle_mode(from.shuffle_mode());
  }
}

void Shuffle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.Shuffle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shuffle::CopyFrom(const Shuffle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.Shuffle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shuffle::IsInitialized() const {
  return true;
}

void Shuffle::Swap(Shuffle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Shuffle::InternalSwap(Shuffle* other) {
  using std::swap;
  swap(shuffle_mode_, other->shuffle_mode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Shuffle::GetMetadata() const {
  protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseClementineInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseClementineInfo::kVersionFieldNumber;
const int ResponseClementineInfo::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseClementineInfo::ResponseClementineInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_remotecontrolmessages_2eproto::scc_info_ResponseClementineInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.ResponseClementineInfo)
}
ResponseClementineInfo::ResponseClementineInfo(const ResponseClementineInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_version()) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:pb.remote.ResponseClementineInfo)
}

void ResponseClementineInfo::SharedCtor() {
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
}

ResponseClementineInfo::~ResponseClementineInfo() {
  // @@protoc_insertion_point(destructor:pb.remote.ResponseClementineInfo)
  SharedDtor();
}

void ResponseClementineInfo::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResponseClementineInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ResponseClementineInfo::descriptor() {
  ::protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseClementineInfo& ResponseClementineInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_remotecontrolmessages_2eproto::scc_info_ResponseClementineInfo.base);
  return *internal_default_instance();
}


void ResponseClementineInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.ResponseClementineInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    version_.ClearNonDefaultToEmptyNoArena();
  }
  state_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResponseClementineInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.ResponseClementineInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.remote.ResponseClementineInfo.version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pb.remote.EngineState state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::remote::EngineState_IsValid(value)) {
            set_state(static_cast< ::pb::remote::EngineState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.ResponseClementineInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.ResponseClementineInfo)
  return false;
#undef DO_
}

void ResponseClementineInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.ResponseClementineInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.ResponseClementineInfo.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version(), output);
  }

  // optional .pb.remote.EngineState state = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.ResponseClementineInfo)
}

::google::protobuf::uint8* ResponseClementineInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.ResponseClementineInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.ResponseClementineInfo.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  // optional .pb.remote.EngineState state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.ResponseClementineInfo)
  return target;
}

size_t ResponseClementineInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.ResponseClementineInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional .pb.remote.EngineState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseClementineInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.ResponseClementineInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseClementineInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseClementineInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.ResponseClementineInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.ResponseClementineInfo)
    MergeFrom(*source);
  }
}

void ResponseClementineInfo::MergeFrom(const ResponseClementineInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.ResponseClementineInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_version();
      version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
    }
    if (cached_has_bits & 0x00000002u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResponseClementineInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.ResponseClementineInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseClementineInfo::CopyFrom(const ResponseClementineInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.ResponseClementineInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseClementineInfo::IsInitialized() const {
  return true;
}

void ResponseClementineInfo::Swap(ResponseClementineInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseClementineInfo::InternalSwap(ResponseClementineInfo* other) {
  using std::swap;
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(state_, other->state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ResponseClementineInfo::GetMetadata() const {
  protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseCurrentMetadata::InitAsDefaultInstance() {
  ::pb::remote::_ResponseCurrentMetadata_default_instance_._instance.get_mutable()->song_metadata_ = const_cast< ::pb::remote::SongMetadata*>(
      ::pb::remote::SongMetadata::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseCurrentMetadata::kSongMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseCurrentMetadata::ResponseCurrentMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_remotecontrolmessages_2eproto::scc_info_ResponseCurrentMetadata.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.ResponseCurrentMetadata)
}
ResponseCurrentMetadata::ResponseCurrentMetadata(const ResponseCurrentMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_song_metadata()) {
    song_metadata_ = new ::pb::remote::SongMetadata(*from.song_metadata_);
  } else {
    song_metadata_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pb.remote.ResponseCurrentMetadata)
}

void ResponseCurrentMetadata::SharedCtor() {
  song_metadata_ = NULL;
}

ResponseCurrentMetadata::~ResponseCurrentMetadata() {
  // @@protoc_insertion_point(destructor:pb.remote.ResponseCurrentMetadata)
  SharedDtor();
}

void ResponseCurrentMetadata::SharedDtor() {
  if (this != internal_default_instance()) delete song_metadata_;
}

void ResponseCurrentMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ResponseCurrentMetadata::descriptor() {
  ::protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseCurrentMetadata& ResponseCurrentMetadata::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_remotecontrolmessages_2eproto::scc_info_ResponseCurrentMetadata.base);
  return *internal_default_instance();
}


void ResponseCurrentMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.ResponseCurrentMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(song_metadata_ != NULL);
    song_metadata_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResponseCurrentMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.ResponseCurrentMetadata)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.remote.SongMetadata song_metadata = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_song_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.ResponseCurrentMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.ResponseCurrentMetadata)
  return false;
#undef DO_
}

void ResponseCurrentMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.ResponseCurrentMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pb.remote.SongMetadata song_metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_song_metadata(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.ResponseCurrentMetadata)
}

::google::protobuf::uint8* ResponseCurrentMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.ResponseCurrentMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pb.remote.SongMetadata song_metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_song_metadata(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.ResponseCurrentMetadata)
  return target;
}

size_t ResponseCurrentMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.ResponseCurrentMetadata)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .pb.remote.SongMetadata song_metadata = 1;
  if (has_song_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *song_metadata_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseCurrentMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.ResponseCurrentMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseCurrentMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseCurrentMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.ResponseCurrentMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.ResponseCurrentMetadata)
    MergeFrom(*source);
  }
}

void ResponseCurrentMetadata::MergeFrom(const ResponseCurrentMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.ResponseCurrentMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_song_metadata()) {
    mutable_song_metadata()->::pb::remote::SongMetadata::MergeFrom(from.song_metadata());
  }
}

void ResponseCurrentMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.ResponseCurrentMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseCurrentMetadata::CopyFrom(const ResponseCurrentMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.ResponseCurrentMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseCurrentMetadata::IsInitialized() const {
  return true;
}

void ResponseCurrentMetadata::Swap(ResponseCurrentMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseCurrentMetadata::InternalSwap(ResponseCurrentMetadata* other) {
  using std::swap;
  swap(song_metadata_, other->song_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ResponseCurrentMetadata::GetMetadata() const {
  protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponsePlaylists::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponsePlaylists::kPlaylistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponsePlaylists::ResponsePlaylists()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_remotecontrolmessages_2eproto::scc_info_ResponsePlaylists.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.ResponsePlaylists)
}
ResponsePlaylists::ResponsePlaylists(const ResponsePlaylists& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      playlist_(from.playlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.remote.ResponsePlaylists)
}

void ResponsePlaylists::SharedCtor() {
}

ResponsePlaylists::~ResponsePlaylists() {
  // @@protoc_insertion_point(destructor:pb.remote.ResponsePlaylists)
  SharedDtor();
}

void ResponsePlaylists::SharedDtor() {
}

void ResponsePlaylists::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ResponsePlaylists::descriptor() {
  ::protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponsePlaylists& ResponsePlaylists::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_remotecontrolmessages_2eproto::scc_info_ResponsePlaylists.base);
  return *internal_default_instance();
}


void ResponsePlaylists::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.ResponsePlaylists)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playlist_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResponsePlaylists::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.ResponsePlaylists)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.remote.Playlist playlist = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_playlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.ResponsePlaylists)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.ResponsePlaylists)
  return false;
#undef DO_
}

void ResponsePlaylists::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.ResponsePlaylists)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.remote.Playlist playlist = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->playlist_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->playlist(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.ResponsePlaylists)
}

::google::protobuf::uint8* ResponsePlaylists::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.ResponsePlaylists)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.remote.Playlist playlist = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->playlist_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->playlist(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.ResponsePlaylists)
  return target;
}

size_t ResponsePlaylists::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.ResponsePlaylists)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .pb.remote.Playlist playlist = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->playlist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->playlist(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponsePlaylists::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.ResponsePlaylists)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponsePlaylists* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponsePlaylists>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.ResponsePlaylists)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.ResponsePlaylists)
    MergeFrom(*source);
  }
}

void ResponsePlaylists::MergeFrom(const ResponsePlaylists& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.ResponsePlaylists)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  playlist_.MergeFrom(from.playlist_);
}

void ResponsePlaylists::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.ResponsePlaylists)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponsePlaylists::CopyFrom(const ResponsePlaylists& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.ResponsePlaylists)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponsePlaylists::IsInitialized() const {
  return true;
}

void ResponsePlaylists::Swap(ResponsePlaylists* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponsePlaylists::InternalSwap(ResponsePlaylists* other) {
  using std::swap;
  CastToBase(&playlist_)->InternalSwap(CastToBase(&other->playlist_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ResponsePlaylists::GetMetadata() const {
  protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponsePlaylistSongs::InitAsDefaultInstance() {
  ::pb::remote::_ResponsePlaylistSongs_default_instance_._instance.get_mutable()->requested_playlist_ = const_cast< ::pb::remote::Playlist*>(
      ::pb::remote::Playlist::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponsePlaylistSongs::kRequestedPlaylistFieldNumber;
const int ResponsePlaylistSongs::kSongsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponsePlaylistSongs::ResponsePlaylistSongs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_remotecontrolmessages_2eproto::scc_info_ResponsePlaylistSongs.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.ResponsePlaylistSongs)
}
ResponsePlaylistSongs::ResponsePlaylistSongs(const ResponsePlaylistSongs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      songs_(from.songs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_requested_playlist()) {
    requested_playlist_ = new ::pb::remote::Playlist(*from.requested_playlist_);
  } else {
    requested_playlist_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pb.remote.ResponsePlaylistSongs)
}

void ResponsePlaylistSongs::SharedCtor() {
  requested_playlist_ = NULL;
}

ResponsePlaylistSongs::~ResponsePlaylistSongs() {
  // @@protoc_insertion_point(destructor:pb.remote.ResponsePlaylistSongs)
  SharedDtor();
}

void ResponsePlaylistSongs::SharedDtor() {
  if (this != internal_default_instance()) delete requested_playlist_;
}

void ResponsePlaylistSongs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ResponsePlaylistSongs::descriptor() {
  ::protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponsePlaylistSongs& ResponsePlaylistSongs::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_remotecontrolmessages_2eproto::scc_info_ResponsePlaylistSongs.base);
  return *internal_default_instance();
}


void ResponsePlaylistSongs::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.ResponsePlaylistSongs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  songs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(requested_playlist_ != NULL);
    requested_playlist_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResponsePlaylistSongs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.ResponsePlaylistSongs)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.remote.Playlist requested_playlist = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_requested_playlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.remote.SongMetadata songs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_songs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.ResponsePlaylistSongs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.ResponsePlaylistSongs)
  return false;
#undef DO_
}

void ResponsePlaylistSongs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.ResponsePlaylistSongs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pb.remote.Playlist requested_playlist = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_requested_playlist(), output);
  }

  // repeated .pb.remote.SongMetadata songs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->songs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->songs(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.ResponsePlaylistSongs)
}

::google::protobuf::uint8* ResponsePlaylistSongs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.ResponsePlaylistSongs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pb.remote.Playlist requested_playlist = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_requested_playlist(), deterministic, target);
  }

  // repeated .pb.remote.SongMetadata songs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->songs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->songs(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.ResponsePlaylistSongs)
  return target;
}

size_t ResponsePlaylistSongs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.ResponsePlaylistSongs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .pb.remote.SongMetadata songs = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->songs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->songs(static_cast<int>(i)));
    }
  }

  // optional .pb.remote.Playlist requested_playlist = 1;
  if (has_requested_playlist()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *requested_playlist_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponsePlaylistSongs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.ResponsePlaylistSongs)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponsePlaylistSongs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponsePlaylistSongs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.ResponsePlaylistSongs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.ResponsePlaylistSongs)
    MergeFrom(*source);
  }
}

void ResponsePlaylistSongs::MergeFrom(const ResponsePlaylistSongs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.ResponsePlaylistSongs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  songs_.MergeFrom(from.songs_);
  if (from.has_requested_playlist()) {
    mutable_requested_playlist()->::pb::remote::Playlist::MergeFrom(from.requested_playlist());
  }
}

void ResponsePlaylistSongs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.ResponsePlaylistSongs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponsePlaylistSongs::CopyFrom(const ResponsePlaylistSongs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.ResponsePlaylistSongs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponsePlaylistSongs::IsInitialized() const {
  return true;
}

void ResponsePlaylistSongs::Swap(ResponsePlaylistSongs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponsePlaylistSongs::InternalSwap(ResponsePlaylistSongs* other) {
  using std::swap;
  CastToBase(&songs_)->InternalSwap(CastToBase(&other->songs_));
  swap(requested_playlist_, other->requested_playlist_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ResponsePlaylistSongs::GetMetadata() const {
  protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseEngineStateChanged::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseEngineStateChanged::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseEngineStateChanged::ResponseEngineStateChanged()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_remotecontrolmessages_2eproto::scc_info_ResponseEngineStateChanged.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.ResponseEngineStateChanged)
}
ResponseEngineStateChanged::ResponseEngineStateChanged(const ResponseEngineStateChanged& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:pb.remote.ResponseEngineStateChanged)
}

void ResponseEngineStateChanged::SharedCtor() {
  state_ = 0;
}

ResponseEngineStateChanged::~ResponseEngineStateChanged() {
  // @@protoc_insertion_point(destructor:pb.remote.ResponseEngineStateChanged)
  SharedDtor();
}

void ResponseEngineStateChanged::SharedDtor() {
}

void ResponseEngineStateChanged::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ResponseEngineStateChanged::descriptor() {
  ::protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseEngineStateChanged& ResponseEngineStateChanged::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_remotecontrolmessages_2eproto::scc_info_ResponseEngineStateChanged.base);
  return *internal_default_instance();
}


void ResponseEngineStateChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.ResponseEngineStateChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResponseEngineStateChanged::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.ResponseEngineStateChanged)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.remote.EngineState state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::remote::EngineState_IsValid(value)) {
            set_state(static_cast< ::pb::remote::EngineState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.ResponseEngineStateChanged)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.ResponseEngineStateChanged)
  return false;
#undef DO_
}

void ResponseEngineStateChanged::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.ResponseEngineStateChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pb.remote.EngineState state = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.ResponseEngineStateChanged)
}

::google::protobuf::uint8* ResponseEngineStateChanged::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.ResponseEngineStateChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pb.remote.EngineState state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.ResponseEngineStateChanged)
  return target;
}

size_t ResponseEngineStateChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.ResponseEngineStateChanged)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .pb.remote.EngineState state = 1;
  if (has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseEngineStateChanged::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.ResponseEngineStateChanged)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseEngineStateChanged* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseEngineStateChanged>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.ResponseEngineStateChanged)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.ResponseEngineStateChanged)
    MergeFrom(*source);
  }
}

void ResponseEngineStateChanged::MergeFrom(const ResponseEngineStateChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.ResponseEngineStateChanged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    set_state(from.state());
  }
}

void ResponseEngineStateChanged::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.ResponseEngineStateChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseEngineStateChanged::CopyFrom(const ResponseEngineStateChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.ResponseEngineStateChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseEngineStateChanged::IsInitialized() const {
  return true;
}

void ResponseEngineStateChanged::Swap(ResponseEngineStateChanged* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseEngineStateChanged::InternalSwap(ResponseEngineStateChanged* other) {
  using std::swap;
  swap(state_, other->state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ResponseEngineStateChanged::GetMetadata() const {
  protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseUpdateTrackPosition::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseUpdateTrackPosition::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseUpdateTrackPosition::ResponseUpdateTrackPosition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_remotecontrolmessages_2eproto::scc_info_ResponseUpdateTrackPosition.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.ResponseUpdateTrackPosition)
}
ResponseUpdateTrackPosition::ResponseUpdateTrackPosition(const ResponseUpdateTrackPosition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  position_ = from.position_;
  // @@protoc_insertion_point(copy_constructor:pb.remote.ResponseUpdateTrackPosition)
}

void ResponseUpdateTrackPosition::SharedCtor() {
  position_ = 0;
}

ResponseUpdateTrackPosition::~ResponseUpdateTrackPosition() {
  // @@protoc_insertion_point(destructor:pb.remote.ResponseUpdateTrackPosition)
  SharedDtor();
}

void ResponseUpdateTrackPosition::SharedDtor() {
}

void ResponseUpdateTrackPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ResponseUpdateTrackPosition::descriptor() {
  ::protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseUpdateTrackPosition& ResponseUpdateTrackPosition::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_remotecontrolmessages_2eproto::scc_info_ResponseUpdateTrackPosition.base);
  return *internal_default_instance();
}


void ResponseUpdateTrackPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.ResponseUpdateTrackPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResponseUpdateTrackPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.ResponseUpdateTrackPosition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.ResponseUpdateTrackPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.ResponseUpdateTrackPosition)
  return false;
#undef DO_
}

void ResponseUpdateTrackPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.ResponseUpdateTrackPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 position = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->position(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.ResponseUpdateTrackPosition)
}

::google::protobuf::uint8* ResponseUpdateTrackPosition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.ResponseUpdateTrackPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->position(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.ResponseUpdateTrackPosition)
  return target;
}

size_t ResponseUpdateTrackPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.ResponseUpdateTrackPosition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int32 position = 1;
  if (has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->position());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseUpdateTrackPosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.ResponseUpdateTrackPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseUpdateTrackPosition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseUpdateTrackPosition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.ResponseUpdateTrackPosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.ResponseUpdateTrackPosition)
    MergeFrom(*source);
  }
}

void ResponseUpdateTrackPosition::MergeFrom(const ResponseUpdateTrackPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.ResponseUpdateTrackPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    set_position(from.position());
  }
}

void ResponseUpdateTrackPosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.ResponseUpdateTrackPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseUpdateTrackPosition::CopyFrom(const ResponseUpdateTrackPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.ResponseUpdateTrackPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseUpdateTrackPosition::IsInitialized() const {
  return true;
}

void ResponseUpdateTrackPosition::Swap(ResponseUpdateTrackPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseUpdateTrackPosition::InternalSwap(ResponseUpdateTrackPosition* other) {
  using std::swap;
  swap(position_, other->position_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ResponseUpdateTrackPosition::GetMetadata() const {
  protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestConnect::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestConnect::kAuthCodeFieldNumber;
const int RequestConnect::kSendPlaylistSongsFieldNumber;
const int RequestConnect::kDownloaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestConnect::RequestConnect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_remotecontrolmessages_2eproto::scc_info_RequestConnect.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.RequestConnect)
}
RequestConnect::RequestConnect(const RequestConnect& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&auth_code_, &from.auth_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&downloader_) -
    reinterpret_cast<char*>(&auth_code_)) + sizeof(downloader_));
  // @@protoc_insertion_point(copy_constructor:pb.remote.RequestConnect)
}

void RequestConnect::SharedCtor() {
  ::memset(&auth_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&downloader_) -
      reinterpret_cast<char*>(&auth_code_)) + sizeof(downloader_));
}

RequestConnect::~RequestConnect() {
  // @@protoc_insertion_point(destructor:pb.remote.RequestConnect)
  SharedDtor();
}

void RequestConnect::SharedDtor() {
}

void RequestConnect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestConnect::descriptor() {
  ::protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestConnect& RequestConnect::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_remotecontrolmessages_2eproto::scc_info_RequestConnect.base);
  return *internal_default_instance();
}


void RequestConnect::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.RequestConnect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&auth_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&downloader_) -
        reinterpret_cast<char*>(&auth_code_)) + sizeof(downloader_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestConnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.RequestConnect)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 auth_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_auth_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auth_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool send_playlist_songs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_send_playlist_songs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &send_playlist_songs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool downloader = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_downloader();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &downloader_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.RequestConnect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.RequestConnect)
  return false;
#undef DO_
}

void RequestConnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.RequestConnect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 auth_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->auth_code(), output);
  }

  // optional bool send_playlist_songs = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->send_playlist_songs(), output);
  }

  // optional bool downloader = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->downloader(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.RequestConnect)
}

::google::protobuf::uint8* RequestConnect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.RequestConnect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 auth_code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->auth_code(), target);
  }

  // optional bool send_playlist_songs = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->send_playlist_songs(), target);
  }

  // optional bool downloader = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->downloader(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.RequestConnect)
  return target;
}

size_t RequestConnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.RequestConnect)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 auth_code = 1;
    if (has_auth_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->auth_code());
    }

    // optional bool send_playlist_songs = 2;
    if (has_send_playlist_songs()) {
      total_size += 1 + 1;
    }

    // optional bool downloader = 3;
    if (has_downloader()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestConnect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.RequestConnect)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestConnect* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestConnect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.RequestConnect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.RequestConnect)
    MergeFrom(*source);
  }
}

void RequestConnect::MergeFrom(const RequestConnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.RequestConnect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      auth_code_ = from.auth_code_;
    }
    if (cached_has_bits & 0x00000002u) {
      send_playlist_songs_ = from.send_playlist_songs_;
    }
    if (cached_has_bits & 0x00000004u) {
      downloader_ = from.downloader_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RequestConnect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.RequestConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestConnect::CopyFrom(const RequestConnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.RequestConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestConnect::IsInitialized() const {
  return true;
}

void RequestConnect::Swap(RequestConnect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestConnect::InternalSwap(RequestConnect* other) {
  using std::swap;
  swap(auth_code_, other->auth_code_);
  swap(send_playlist_songs_, other->send_playlist_songs_);
  swap(downloader_, other->downloader_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestConnect::GetMetadata() const {
  protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseDisconnect::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseDisconnect::kReasonDisconnectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseDisconnect::ResponseDisconnect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_remotecontrolmessages_2eproto::scc_info_ResponseDisconnect.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.ResponseDisconnect)
}
ResponseDisconnect::ResponseDisconnect(const ResponseDisconnect& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_disconnect_ = from.reason_disconnect_;
  // @@protoc_insertion_point(copy_constructor:pb.remote.ResponseDisconnect)
}

void ResponseDisconnect::SharedCtor() {
  reason_disconnect_ = 1;
}

ResponseDisconnect::~ResponseDisconnect() {
  // @@protoc_insertion_point(destructor:pb.remote.ResponseDisconnect)
  SharedDtor();
}

void ResponseDisconnect::SharedDtor() {
}

void ResponseDisconnect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ResponseDisconnect::descriptor() {
  ::protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseDisconnect& ResponseDisconnect::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_remotecontrolmessages_2eproto::scc_info_ResponseDisconnect.base);
  return *internal_default_instance();
}


void ResponseDisconnect::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.ResponseDisconnect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_disconnect_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResponseDisconnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.ResponseDisconnect)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.remote.ReasonDisconnect reason_disconnect = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::remote::ReasonDisconnect_IsValid(value)) {
            set_reason_disconnect(static_cast< ::pb::remote::ReasonDisconnect >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.ResponseDisconnect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.ResponseDisconnect)
  return false;
#undef DO_
}

void ResponseDisconnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.ResponseDisconnect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pb.remote.ReasonDisconnect reason_disconnect = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->reason_disconnect(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.ResponseDisconnect)
}

::google::protobuf::uint8* ResponseDisconnect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.ResponseDisconnect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pb.remote.ReasonDisconnect reason_disconnect = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->reason_disconnect(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.ResponseDisconnect)
  return target;
}

size_t ResponseDisconnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.ResponseDisconnect)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .pb.remote.ReasonDisconnect reason_disconnect = 1;
  if (has_reason_disconnect()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason_disconnect());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseDisconnect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.ResponseDisconnect)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseDisconnect* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseDisconnect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.ResponseDisconnect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.ResponseDisconnect)
    MergeFrom(*source);
  }
}

void ResponseDisconnect::MergeFrom(const ResponseDisconnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.ResponseDisconnect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_reason_disconnect()) {
    set_reason_disconnect(from.reason_disconnect());
  }
}

void ResponseDisconnect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.ResponseDisconnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseDisconnect::CopyFrom(const ResponseDisconnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.ResponseDisconnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseDisconnect::IsInitialized() const {
  return true;
}

void ResponseDisconnect::Swap(ResponseDisconnect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseDisconnect::InternalSwap(ResponseDisconnect* other) {
  using std::swap;
  swap(reason_disconnect_, other->reason_disconnect_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ResponseDisconnect::GetMetadata() const {
  protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseActiveChanged::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseActiveChanged::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseActiveChanged::ResponseActiveChanged()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_remotecontrolmessages_2eproto::scc_info_ResponseActiveChanged.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.ResponseActiveChanged)
}
ResponseActiveChanged::ResponseActiveChanged(const ResponseActiveChanged& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:pb.remote.ResponseActiveChanged)
}

void ResponseActiveChanged::SharedCtor() {
  id_ = 0;
}

ResponseActiveChanged::~ResponseActiveChanged() {
  // @@protoc_insertion_point(destructor:pb.remote.ResponseActiveChanged)
  SharedDtor();
}

void ResponseActiveChanged::SharedDtor() {
}

void ResponseActiveChanged::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ResponseActiveChanged::descriptor() {
  ::protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseActiveChanged& ResponseActiveChanged::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_remotecontrolmessages_2eproto::scc_info_ResponseActiveChanged.base);
  return *internal_default_instance();
}


void ResponseActiveChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.ResponseActiveChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResponseActiveChanged::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.ResponseActiveChanged)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.ResponseActiveChanged)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.ResponseActiveChanged)
  return false;
#undef DO_
}

void ResponseActiveChanged::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.ResponseActiveChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.ResponseActiveChanged)
}

::google::protobuf::uint8* ResponseActiveChanged::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.ResponseActiveChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.ResponseActiveChanged)
  return target;
}

size_t ResponseActiveChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.ResponseActiveChanged)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseActiveChanged::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.ResponseActiveChanged)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseActiveChanged* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseActiveChanged>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.ResponseActiveChanged)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.ResponseActiveChanged)
    MergeFrom(*source);
  }
}

void ResponseActiveChanged::MergeFrom(const ResponseActiveChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.ResponseActiveChanged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    set_id(from.id());
  }
}

void ResponseActiveChanged::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.ResponseActiveChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseActiveChanged::CopyFrom(const ResponseActiveChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.ResponseActiveChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseActiveChanged::IsInitialized() const {
  return true;
}

void ResponseActiveChanged::Swap(ResponseActiveChanged* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseActiveChanged::InternalSwap(ResponseActiveChanged* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ResponseActiveChanged::GetMetadata() const {
  protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestSetTrackPosition::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestSetTrackPosition::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestSetTrackPosition::RequestSetTrackPosition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_remotecontrolmessages_2eproto::scc_info_RequestSetTrackPosition.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.RequestSetTrackPosition)
}
RequestSetTrackPosition::RequestSetTrackPosition(const RequestSetTrackPosition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  position_ = from.position_;
  // @@protoc_insertion_point(copy_constructor:pb.remote.RequestSetTrackPosition)
}

void RequestSetTrackPosition::SharedCtor() {
  position_ = 0;
}

RequestSetTrackPosition::~RequestSetTrackPosition() {
  // @@protoc_insertion_point(destructor:pb.remote.RequestSetTrackPosition)
  SharedDtor();
}

void RequestSetTrackPosition::SharedDtor() {
}

void RequestSetTrackPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestSetTrackPosition::descriptor() {
  ::protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestSetTrackPosition& RequestSetTrackPosition::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_remotecontrolmessages_2eproto::scc_info_RequestSetTrackPosition.base);
  return *internal_default_instance();
}


void RequestSetTrackPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.RequestSetTrackPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestSetTrackPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.RequestSetTrackPosition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.RequestSetTrackPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.RequestSetTrackPosition)
  return false;
#undef DO_
}

void RequestSetTrackPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.RequestSetTrackPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 position = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->position(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.RequestSetTrackPosition)
}

::google::protobuf::uint8* RequestSetTrackPosition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.RequestSetTrackPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->position(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.RequestSetTrackPosition)
  return target;
}

size_t RequestSetTrackPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.RequestSetTrackPosition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int32 position = 1;
  if (has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->position());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestSetTrackPosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.RequestSetTrackPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestSetTrackPosition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestSetTrackPosition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.RequestSetTrackPosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.RequestSetTrackPosition)
    MergeFrom(*source);
  }
}

void RequestSetTrackPosition::MergeFrom(const RequestSetTrackPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.RequestSetTrackPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    set_position(from.position());
  }
}

void RequestSetTrackPosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.RequestSetTrackPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestSetTrackPosition::CopyFrom(const RequestSetTrackPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.RequestSetTrackPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSetTrackPosition::IsInitialized() const {
  return true;
}

void RequestSetTrackPosition::Swap(RequestSetTrackPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestSetTrackPosition::InternalSwap(RequestSetTrackPosition* other) {
  using std::swap;
  swap(position_, other->position_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestSetTrackPosition::GetMetadata() const {
  protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestInsertUrls::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestInsertUrls::kPlaylistIdFieldNumber;
const int RequestInsertUrls::kUrlsFieldNumber;
const int RequestInsertUrls::kPositionFieldNumber;
const int RequestInsertUrls::kPlayNowFieldNumber;
const int RequestInsertUrls::kEnqueueFieldNumber;
const int RequestInsertUrls::kSongsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestInsertUrls::RequestInsertUrls()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_remotecontrolmessages_2eproto::scc_info_RequestInsertUrls.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.RequestInsertUrls)
}
RequestInsertUrls::RequestInsertUrls(const RequestInsertUrls& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      urls_(from.urls_),
      songs_(from.songs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&playlist_id_, &from.playlist_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&position_) -
    reinterpret_cast<char*>(&playlist_id_)) + sizeof(position_));
  // @@protoc_insertion_point(copy_constructor:pb.remote.RequestInsertUrls)
}

void RequestInsertUrls::SharedCtor() {
  ::memset(&playlist_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enqueue_) -
      reinterpret_cast<char*>(&playlist_id_)) + sizeof(enqueue_));
  position_ = -1;
}

RequestInsertUrls::~RequestInsertUrls() {
  // @@protoc_insertion_point(destructor:pb.remote.RequestInsertUrls)
  SharedDtor();
}

void RequestInsertUrls::SharedDtor() {
}

void RequestInsertUrls::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestInsertUrls::descriptor() {
  ::protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestInsertUrls& RequestInsertUrls::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_remotecontrolmessages_2eproto::scc_info_RequestInsertUrls.base);
  return *internal_default_instance();
}


void RequestInsertUrls::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.RequestInsertUrls)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  urls_.Clear();
  songs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&playlist_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enqueue_) -
        reinterpret_cast<char*>(&playlist_id_)) + sizeof(enqueue_));
    position_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestInsertUrls::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.RequestInsertUrls)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 playlist_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_playlist_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playlist_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string urls = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_urls()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->urls(this->urls_size() - 1).data(),
            static_cast<int>(this->urls(this->urls_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.remote.RequestInsertUrls.urls");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 position = 3 [default = -1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool play_now = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_play_now();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &play_now_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enqueue = 5 [default = false];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_enqueue();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enqueue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.remote.SongMetadata songs = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_songs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.RequestInsertUrls)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.RequestInsertUrls)
  return false;
#undef DO_
}

void RequestInsertUrls::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.RequestInsertUrls)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 playlist_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playlist_id(), output);
  }

  // repeated string urls = 2;
  for (int i = 0, n = this->urls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->urls(i).data(), static_cast<int>(this->urls(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.RequestInsertUrls.urls");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->urls(i), output);
  }

  // optional int32 position = 3 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->position(), output);
  }

  // optional bool play_now = 4 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->play_now(), output);
  }

  // optional bool enqueue = 5 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->enqueue(), output);
  }

  // repeated .pb.remote.SongMetadata songs = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->songs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->songs(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.RequestInsertUrls)
}

::google::protobuf::uint8* RequestInsertUrls::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.RequestInsertUrls)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 playlist_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playlist_id(), target);
  }

  // repeated string urls = 2;
  for (int i = 0, n = this->urls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->urls(i).data(), static_cast<int>(this->urls(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.RequestInsertUrls.urls");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->urls(i), target);
  }

  // optional int32 position = 3 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->position(), target);
  }

  // optional bool play_now = 4 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->play_now(), target);
  }

  // optional bool enqueue = 5 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->enqueue(), target);
  }

  // repeated .pb.remote.SongMetadata songs = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->songs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->songs(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.RequestInsertUrls)
  return target;
}

size_t RequestInsertUrls::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.RequestInsertUrls)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string urls = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->urls_size());
  for (int i = 0, n = this->urls_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->urls(i));
  }

  // repeated .pb.remote.SongMetadata songs = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->songs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->songs(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 playlist_id = 1;
    if (has_playlist_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playlist_id());
    }

    // optional bool play_now = 4 [default = false];
    if (has_play_now()) {
      total_size += 1 + 1;
    }

    // optional bool enqueue = 5 [default = false];
    if (has_enqueue()) {
      total_size += 1 + 1;
    }

    // optional int32 position = 3 [default = -1];
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestInsertUrls::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.RequestInsertUrls)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestInsertUrls* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestInsertUrls>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.RequestInsertUrls)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.RequestInsertUrls)
    MergeFrom(*source);
  }
}

void RequestInsertUrls::MergeFrom(const RequestInsertUrls& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.RequestInsertUrls)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  urls_.MergeFrom(from.urls_);
  songs_.MergeFrom(from.songs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      playlist_id_ = from.playlist_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      play_now_ = from.play_now_;
    }
    if (cached_has_bits & 0x00000004u) {
      enqueue_ = from.enqueue_;
    }
    if (cached_has_bits & 0x00000008u) {
      position_ = from.position_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RequestInsertUrls::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.RequestInsertUrls)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestInsertUrls::CopyFrom(const RequestInsertUrls& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.RequestInsertUrls)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestInsertUrls::IsInitialized() const {
  return true;
}

void RequestInsertUrls::Swap(RequestInsertUrls* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestInsertUrls::InternalSwap(RequestInsertUrls* other) {
  using std::swap;
  urls_.InternalSwap(CastToBase(&other->urls_));
  CastToBase(&songs_)->InternalSwap(CastToBase(&other->songs_));
  swap(playlist_id_, other->playlist_id_);
  swap(play_now_, other->play_now_);
  swap(enqueue_, other->enqueue_);
  swap(position_, other->position_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestInsertUrls::GetMetadata() const {
  protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestRemoveSongs::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestRemoveSongs::kPlaylistIdFieldNumber;
const int RequestRemoveSongs::kSongsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestRemoveSongs::RequestRemoveSongs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_remotecontrolmessages_2eproto::scc_info_RequestRemoveSongs.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.RequestRemoveSongs)
}
RequestRemoveSongs::RequestRemoveSongs(const RequestRemoveSongs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      songs_(from.songs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  playlist_id_ = from.playlist_id_;
  // @@protoc_insertion_point(copy_constructor:pb.remote.RequestRemoveSongs)
}

void RequestRemoveSongs::SharedCtor() {
  playlist_id_ = 0;
}

RequestRemoveSongs::~RequestRemoveSongs() {
  // @@protoc_insertion_point(destructor:pb.remote.RequestRemoveSongs)
  SharedDtor();
}

void RequestRemoveSongs::SharedDtor() {
}

void RequestRemoveSongs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestRemoveSongs::descriptor() {
  ::protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestRemoveSongs& RequestRemoveSongs::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_remotecontrolmessages_2eproto::scc_info_RequestRemoveSongs.base);
  return *internal_default_instance();
}


void RequestRemoveSongs::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.RequestRemoveSongs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  songs_.Clear();
  playlist_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestRemoveSongs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.RequestRemoveSongs)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 playlist_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_playlist_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playlist_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 songs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16u, input, this->mutable_songs())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_songs())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.RequestRemoveSongs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.RequestRemoveSongs)
  return false;
#undef DO_
}

void RequestRemoveSongs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.RequestRemoveSongs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 playlist_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playlist_id(), output);
  }

  // repeated int32 songs = 2;
  for (int i = 0, n = this->songs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->songs(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.RequestRemoveSongs)
}

::google::protobuf::uint8* RequestRemoveSongs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.RequestRemoveSongs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 playlist_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playlist_id(), target);
  }

  // repeated int32 songs = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(2, this->songs_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.RequestRemoveSongs)
  return target;
}

size_t RequestRemoveSongs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.RequestRemoveSongs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated int32 songs = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->songs_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->songs_size());
    total_size += data_size;
  }

  // optional int32 playlist_id = 1;
  if (has_playlist_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->playlist_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestRemoveSongs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.RequestRemoveSongs)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestRemoveSongs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestRemoveSongs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.RequestRemoveSongs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.RequestRemoveSongs)
    MergeFrom(*source);
  }
}

void RequestRemoveSongs::MergeFrom(const RequestRemoveSongs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.RequestRemoveSongs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  songs_.MergeFrom(from.songs_);
  if (from.has_playlist_id()) {
    set_playlist_id(from.playlist_id());
  }
}

void RequestRemoveSongs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.RequestRemoveSongs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestRemoveSongs::CopyFrom(const RequestRemoveSongs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.RequestRemoveSongs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRemoveSongs::IsInitialized() const {
  return true;
}

void RequestRemoveSongs::Swap(RequestRemoveSongs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestRemoveSongs::InternalSwap(RequestRemoveSongs* other) {
  using std::swap;
  songs_.InternalSwap(&other->songs_);
  swap(playlist_id_, other->playlist_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestRemoveSongs::GetMetadata() const {
  protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestOpenPlaylist::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestOpenPlaylist::kPlaylistIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestOpenPlaylist::RequestOpenPlaylist()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_remotecontrolmessages_2eproto::scc_info_RequestOpenPlaylist.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.RequestOpenPlaylist)
}
RequestOpenPlaylist::RequestOpenPlaylist(const RequestOpenPlaylist& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  playlist_id_ = from.playlist_id_;
  // @@protoc_insertion_point(copy_constructor:pb.remote.RequestOpenPlaylist)
}

void RequestOpenPlaylist::SharedCtor() {
  playlist_id_ = 0;
}

RequestOpenPlaylist::~RequestOpenPlaylist() {
  // @@protoc_insertion_point(destructor:pb.remote.RequestOpenPlaylist)
  SharedDtor();
}

void RequestOpenPlaylist::SharedDtor() {
}

void RequestOpenPlaylist::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestOpenPlaylist::descriptor() {
  ::protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestOpenPlaylist& RequestOpenPlaylist::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_remotecontrolmessages_2eproto::scc_info_RequestOpenPlaylist.base);
  return *internal_default_instance();
}


void RequestOpenPlaylist::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.RequestOpenPlaylist)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playlist_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestOpenPlaylist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.RequestOpenPlaylist)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 playlist_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_playlist_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playlist_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.RequestOpenPlaylist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.RequestOpenPlaylist)
  return false;
#undef DO_
}

void RequestOpenPlaylist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.RequestOpenPlaylist)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 playlist_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playlist_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.RequestOpenPlaylist)
}

::google::protobuf::uint8* RequestOpenPlaylist::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.RequestOpenPlaylist)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 playlist_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playlist_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.RequestOpenPlaylist)
  return target;
}

size_t RequestOpenPlaylist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.RequestOpenPlaylist)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int32 playlist_id = 1;
  if (has_playlist_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->playlist_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestOpenPlaylist::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.RequestOpenPlaylist)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestOpenPlaylist* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestOpenPlaylist>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.RequestOpenPlaylist)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.RequestOpenPlaylist)
    MergeFrom(*source);
  }
}

void RequestOpenPlaylist::MergeFrom(const RequestOpenPlaylist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.RequestOpenPlaylist)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_playlist_id()) {
    set_playlist_id(from.playlist_id());
  }
}

void RequestOpenPlaylist::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.RequestOpenPlaylist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestOpenPlaylist::CopyFrom(const RequestOpenPlaylist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.RequestOpenPlaylist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestOpenPlaylist::IsInitialized() const {
  return true;
}

void RequestOpenPlaylist::Swap(RequestOpenPlaylist* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestOpenPlaylist::InternalSwap(RequestOpenPlaylist* other) {
  using std::swap;
  swap(playlist_id_, other->playlist_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestOpenPlaylist::GetMetadata() const {
  protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestClosePlaylist::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestClosePlaylist::kPlaylistIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestClosePlaylist::RequestClosePlaylist()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_remotecontrolmessages_2eproto::scc_info_RequestClosePlaylist.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.RequestClosePlaylist)
}
RequestClosePlaylist::RequestClosePlaylist(const RequestClosePlaylist& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  playlist_id_ = from.playlist_id_;
  // @@protoc_insertion_point(copy_constructor:pb.remote.RequestClosePlaylist)
}

void RequestClosePlaylist::SharedCtor() {
  playlist_id_ = 0;
}

RequestClosePlaylist::~RequestClosePlaylist() {
  // @@protoc_insertion_point(destructor:pb.remote.RequestClosePlaylist)
  SharedDtor();
}

void RequestClosePlaylist::SharedDtor() {
}

void RequestClosePlaylist::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestClosePlaylist::descriptor() {
  ::protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestClosePlaylist& RequestClosePlaylist::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_remotecontrolmessages_2eproto::scc_info_RequestClosePlaylist.base);
  return *internal_default_instance();
}


void RequestClosePlaylist::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.RequestClosePlaylist)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playlist_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestClosePlaylist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.RequestClosePlaylist)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 playlist_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_playlist_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playlist_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.RequestClosePlaylist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.RequestClosePlaylist)
  return false;
#undef DO_
}

void RequestClosePlaylist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.RequestClosePlaylist)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 playlist_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playlist_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.RequestClosePlaylist)
}

::google::protobuf::uint8* RequestClosePlaylist::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.RequestClosePlaylist)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 playlist_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playlist_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.RequestClosePlaylist)
  return target;
}

size_t RequestClosePlaylist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.RequestClosePlaylist)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int32 playlist_id = 1;
  if (has_playlist_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->playlist_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestClosePlaylist::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.RequestClosePlaylist)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestClosePlaylist* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestClosePlaylist>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.RequestClosePlaylist)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.RequestClosePlaylist)
    MergeFrom(*source);
  }
}

void RequestClosePlaylist::MergeFrom(const RequestClosePlaylist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.RequestClosePlaylist)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_playlist_id()) {
    set_playlist_id(from.playlist_id());
  }
}

void RequestClosePlaylist::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.RequestClosePlaylist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestClosePlaylist::CopyFrom(const RequestClosePlaylist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.RequestClosePlaylist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestClosePlaylist::IsInitialized() const {
  return true;
}

void RequestClosePlaylist::Swap(RequestClosePlaylist* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestClosePlaylist::InternalSwap(RequestClosePlaylist* other) {
  using std::swap;
  swap(playlist_id_, other->playlist_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestClosePlaylist::GetMetadata() const {
  protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseLyrics::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseLyrics::kLyricsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseLyrics::ResponseLyrics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_remotecontrolmessages_2eproto::scc_info_ResponseLyrics.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.ResponseLyrics)
}
ResponseLyrics::ResponseLyrics(const ResponseLyrics& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      lyrics_(from.lyrics_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.remote.ResponseLyrics)
}

void ResponseLyrics::SharedCtor() {
}

ResponseLyrics::~ResponseLyrics() {
  // @@protoc_insertion_point(destructor:pb.remote.ResponseLyrics)
  SharedDtor();
}

void ResponseLyrics::SharedDtor() {
}

void ResponseLyrics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ResponseLyrics::descriptor() {
  ::protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseLyrics& ResponseLyrics::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_remotecontrolmessages_2eproto::scc_info_ResponseLyrics.base);
  return *internal_default_instance();
}


void ResponseLyrics::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.ResponseLyrics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lyrics_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResponseLyrics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.ResponseLyrics)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.remote.Lyric lyrics = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_lyrics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.ResponseLyrics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.ResponseLyrics)
  return false;
#undef DO_
}

void ResponseLyrics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.ResponseLyrics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.remote.Lyric lyrics = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lyrics_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->lyrics(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.ResponseLyrics)
}

::google::protobuf::uint8* ResponseLyrics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.ResponseLyrics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.remote.Lyric lyrics = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lyrics_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->lyrics(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.ResponseLyrics)
  return target;
}

size_t ResponseLyrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.ResponseLyrics)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .pb.remote.Lyric lyrics = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->lyrics_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lyrics(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseLyrics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.ResponseLyrics)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseLyrics* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseLyrics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.ResponseLyrics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.ResponseLyrics)
    MergeFrom(*source);
  }
}

void ResponseLyrics::MergeFrom(const ResponseLyrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.ResponseLyrics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lyrics_.MergeFrom(from.lyrics_);
}

void ResponseLyrics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.ResponseLyrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseLyrics::CopyFrom(const ResponseLyrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.ResponseLyrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseLyrics::IsInitialized() const {
  return true;
}

void ResponseLyrics::Swap(ResponseLyrics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseLyrics::InternalSwap(ResponseLyrics* other) {
  using std::swap;
  CastToBase(&lyrics_)->InternalSwap(CastToBase(&other->lyrics_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ResponseLyrics::GetMetadata() const {
  protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Lyric::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Lyric::kIdFieldNumber;
const int Lyric::kTitleFieldNumber;
const int Lyric::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Lyric::Lyric()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_remotecontrolmessages_2eproto::scc_info_Lyric.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.Lyric)
}
Lyric::Lyric(const Lyric& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content()) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  // @@protoc_insertion_point(copy_constructor:pb.remote.Lyric)
}

void Lyric::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Lyric::~Lyric() {
  // @@protoc_insertion_point(destructor:pb.remote.Lyric)
  SharedDtor();
}

void Lyric::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Lyric::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Lyric::descriptor() {
  ::protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Lyric& Lyric::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_remotecontrolmessages_2eproto::scc_info_Lyric.base);
  return *internal_default_instance();
}


void Lyric::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.Lyric)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      title_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      content_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Lyric::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.Lyric)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.remote.Lyric.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.remote.Lyric.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string content = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), static_cast<int>(this->content().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.remote.Lyric.content");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.Lyric)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.Lyric)
  return false;
#undef DO_
}

void Lyric::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.Lyric)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.Lyric.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.Lyric.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // optional string content = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.Lyric.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->content(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.Lyric)
}

::google::protobuf::uint8* Lyric::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.Lyric)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.Lyric.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.Lyric.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // optional string content = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.Lyric.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.Lyric)
  return target;
}

size_t Lyric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.Lyric)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Lyric::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.Lyric)
  GOOGLE_DCHECK_NE(&from, this);
  const Lyric* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Lyric>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.Lyric)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.Lyric)
    MergeFrom(*source);
  }
}

void Lyric::MergeFrom(const Lyric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.Lyric)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_content();
      content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
  }
}

void Lyric::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.Lyric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lyric::CopyFrom(const Lyric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.Lyric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lyric::IsInitialized() const {
  return true;
}

void Lyric::Swap(Lyric* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Lyric::InternalSwap(Lyric* other) {
  using std::swap;
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  title_.Swap(&other->title_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  content_.Swap(&other->content_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Lyric::GetMetadata() const {
  protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestDownloadSongs::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestDownloadSongs::kDownloadItemFieldNumber;
const int RequestDownloadSongs::kPlaylistIdFieldNumber;
const int RequestDownloadSongs::kUrlsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestDownloadSongs::RequestDownloadSongs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_remotecontrolmessages_2eproto::scc_info_RequestDownloadSongs.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.RequestDownloadSongs)
}
RequestDownloadSongs::RequestDownloadSongs(const RequestDownloadSongs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      urls_(from.urls_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&playlist_id_, &from.playlist_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&download_item_) -
    reinterpret_cast<char*>(&playlist_id_)) + sizeof(download_item_));
  // @@protoc_insertion_point(copy_constructor:pb.remote.RequestDownloadSongs)
}

void RequestDownloadSongs::SharedCtor() {
  playlist_id_ = 0;
  download_item_ = 1;
}

RequestDownloadSongs::~RequestDownloadSongs() {
  // @@protoc_insertion_point(destructor:pb.remote.RequestDownloadSongs)
  SharedDtor();
}

void RequestDownloadSongs::SharedDtor() {
}

void RequestDownloadSongs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestDownloadSongs::descriptor() {
  ::protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestDownloadSongs& RequestDownloadSongs::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_remotecontrolmessages_2eproto::scc_info_RequestDownloadSongs.base);
  return *internal_default_instance();
}


void RequestDownloadSongs::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.RequestDownloadSongs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  urls_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    playlist_id_ = 0;
    download_item_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestDownloadSongs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.RequestDownloadSongs)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.remote.DownloadItem download_item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::remote::DownloadItem_IsValid(value)) {
            set_download_item(static_cast< ::pb::remote::DownloadItem >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 playlist_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_playlist_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playlist_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string urls = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_urls()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->urls(this->urls_size() - 1).data(),
            static_cast<int>(this->urls(this->urls_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.remote.RequestDownloadSongs.urls");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.RequestDownloadSongs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.RequestDownloadSongs)
  return false;
#undef DO_
}

void RequestDownloadSongs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.RequestDownloadSongs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pb.remote.DownloadItem download_item = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->download_item(), output);
  }

  // optional int32 playlist_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->playlist_id(), output);
  }

  // repeated string urls = 3;
  for (int i = 0, n = this->urls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->urls(i).data(), static_cast<int>(this->urls(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.RequestDownloadSongs.urls");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->urls(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.RequestDownloadSongs)
}

::google::protobuf::uint8* RequestDownloadSongs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.RequestDownloadSongs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pb.remote.DownloadItem download_item = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->download_item(), target);
  }

  // optional int32 playlist_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->playlist_id(), target);
  }

  // repeated string urls = 3;
  for (int i = 0, n = this->urls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->urls(i).data(), static_cast<int>(this->urls(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.RequestDownloadSongs.urls");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->urls(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.RequestDownloadSongs)
  return target;
}

size_t RequestDownloadSongs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.RequestDownloadSongs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string urls = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->urls_size());
  for (int i = 0, n = this->urls_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->urls(i));
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 playlist_id = 2;
    if (has_playlist_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playlist_id());
    }

    // optional .pb.remote.DownloadItem download_item = 1;
    if (has_download_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->download_item());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestDownloadSongs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.RequestDownloadSongs)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestDownloadSongs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestDownloadSongs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.RequestDownloadSongs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.RequestDownloadSongs)
    MergeFrom(*source);
  }
}

void RequestDownloadSongs::MergeFrom(const RequestDownloadSongs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.RequestDownloadSongs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  urls_.MergeFrom(from.urls_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      playlist_id_ = from.playlist_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      download_item_ = from.download_item_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RequestDownloadSongs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.RequestDownloadSongs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestDownloadSongs::CopyFrom(const RequestDownloadSongs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.RequestDownloadSongs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestDownloadSongs::IsInitialized() const {
  return true;
}

void RequestDownloadSongs::Swap(RequestDownloadSongs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestDownloadSongs::InternalSwap(RequestDownloadSongs* other) {
  using std::swap;
  urls_.InternalSwap(CastToBase(&other->urls_));
  swap(playlist_id_, other->playlist_id_);
  swap(download_item_, other->download_item_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestDownloadSongs::GetMetadata() const {
  protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseSongFileChunk::InitAsDefaultInstance() {
  ::pb::remote::_ResponseSongFileChunk_default_instance_._instance.get_mutable()->song_metadata_ = const_cast< ::pb::remote::SongMetadata*>(
      ::pb::remote::SongMetadata::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseSongFileChunk::kChunkNumberFieldNumber;
const int ResponseSongFileChunk::kChunkCountFieldNumber;
const int ResponseSongFileChunk::kFileNumberFieldNumber;
const int ResponseSongFileChunk::kFileCountFieldNumber;
const int ResponseSongFileChunk::kSongMetadataFieldNumber;
const int ResponseSongFileChunk::kDataFieldNumber;
const int ResponseSongFileChunk::kSizeFieldNumber;
const int ResponseSongFileChunk::kFileHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseSongFileChunk::ResponseSongFileChunk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_remotecontrolmessages_2eproto::scc_info_ResponseSongFileChunk.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.ResponseSongFileChunk)
}
ResponseSongFileChunk::ResponseSongFileChunk(const ResponseSongFileChunk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  file_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_hash()) {
    file_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_hash_);
  }
  if (from.has_song_metadata()) {
    song_metadata_ = new ::pb::remote::SongMetadata(*from.song_metadata_);
  } else {
    song_metadata_ = NULL;
  }
  ::memcpy(&chunk_number_, &from.chunk_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&chunk_number_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:pb.remote.ResponseSongFileChunk)
}

void ResponseSongFileChunk::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&song_metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&song_metadata_)) + sizeof(size_));
}

ResponseSongFileChunk::~ResponseSongFileChunk() {
  // @@protoc_insertion_point(destructor:pb.remote.ResponseSongFileChunk)
  SharedDtor();
}

void ResponseSongFileChunk::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete song_metadata_;
}

void ResponseSongFileChunk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ResponseSongFileChunk::descriptor() {
  ::protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseSongFileChunk& ResponseSongFileChunk::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_remotecontrolmessages_2eproto::scc_info_ResponseSongFileChunk.base);
  return *internal_default_instance();
}


void ResponseSongFileChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.ResponseSongFileChunk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      file_hash_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(song_metadata_ != NULL);
      song_metadata_->Clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&chunk_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&size_) -
        reinterpret_cast<char*>(&chunk_number_)) + sizeof(size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResponseSongFileChunk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.ResponseSongFileChunk)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chunk_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_chunk_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chunk_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 chunk_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_chunk_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chunk_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 file_number = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_file_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &file_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 file_count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_file_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &file_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pb.remote.SongMetadata song_metadata = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_song_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 size = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes file_hash = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.ResponseSongFileChunk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.ResponseSongFileChunk)
  return false;
#undef DO_
}

void ResponseSongFileChunk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.ResponseSongFileChunk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 chunk_number = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chunk_number(), output);
  }

  // optional int32 chunk_count = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chunk_count(), output);
  }

  // optional int32 file_number = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->file_number(), output);
  }

  // optional int32 file_count = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->file_count(), output);
  }

  // optional .pb.remote.SongMetadata song_metadata = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_song_metadata(), output);
  }

  // optional bytes data = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->data(), output);
  }

  // optional int32 size = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->size(), output);
  }

  // optional bytes file_hash = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->file_hash(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.ResponseSongFileChunk)
}

::google::protobuf::uint8* ResponseSongFileChunk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.ResponseSongFileChunk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 chunk_number = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chunk_number(), target);
  }

  // optional int32 chunk_count = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chunk_count(), target);
  }

  // optional int32 file_number = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->file_number(), target);
  }

  // optional int32 file_count = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->file_count(), target);
  }

  // optional .pb.remote.SongMetadata song_metadata = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_song_metadata(), deterministic, target);
  }

  // optional bytes data = 7;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->data(), target);
  }

  // optional int32 size = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->size(), target);
  }

  // optional bytes file_hash = 9;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->file_hash(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.ResponseSongFileChunk)
  return target;
}

size_t ResponseSongFileChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.ResponseSongFileChunk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes data = 7;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional bytes file_hash = 9;
    if (has_file_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->file_hash());
    }

    // optional .pb.remote.SongMetadata song_metadata = 6;
    if (has_song_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *song_metadata_);
    }

    // optional int32 chunk_number = 1;
    if (has_chunk_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chunk_number());
    }

    // optional int32 chunk_count = 2;
    if (has_chunk_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chunk_count());
    }

    // optional int32 file_number = 3;
    if (has_file_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->file_number());
    }

    // optional int32 file_count = 4;
    if (has_file_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->file_count());
    }

    // optional int32 size = 8;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseSongFileChunk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.ResponseSongFileChunk)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseSongFileChunk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseSongFileChunk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.ResponseSongFileChunk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.ResponseSongFileChunk)
    MergeFrom(*source);
  }
}

void ResponseSongFileChunk::MergeFrom(const ResponseSongFileChunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.ResponseSongFileChunk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_file_hash();
      file_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_hash_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_song_metadata()->::pb::remote::SongMetadata::MergeFrom(from.song_metadata());
    }
    if (cached_has_bits & 0x00000008u) {
      chunk_number_ = from.chunk_number_;
    }
    if (cached_has_bits & 0x00000010u) {
      chunk_count_ = from.chunk_count_;
    }
    if (cached_has_bits & 0x00000020u) {
      file_number_ = from.file_number_;
    }
    if (cached_has_bits & 0x00000040u) {
      file_count_ = from.file_count_;
    }
    if (cached_has_bits & 0x00000080u) {
      size_ = from.size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResponseSongFileChunk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.ResponseSongFileChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseSongFileChunk::CopyFrom(const ResponseSongFileChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.ResponseSongFileChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseSongFileChunk::IsInitialized() const {
  return true;
}

void ResponseSongFileChunk::Swap(ResponseSongFileChunk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseSongFileChunk::InternalSwap(ResponseSongFileChunk* other) {
  using std::swap;
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  file_hash_.Swap(&other->file_hash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(song_metadata_, other->song_metadata_);
  swap(chunk_number_, other->chunk_number_);
  swap(chunk_count_, other->chunk_count_);
  swap(file_number_, other->file_number_);
  swap(file_count_, other->file_count_);
  swap(size_, other->size_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ResponseSongFileChunk::GetMetadata() const {
  protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseLibraryChunk::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseLibraryChunk::kChunkNumberFieldNumber;
const int ResponseLibraryChunk::kChunkCountFieldNumber;
const int ResponseLibraryChunk::kDataFieldNumber;
const int ResponseLibraryChunk::kSizeFieldNumber;
const int ResponseLibraryChunk::kFileHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseLibraryChunk::ResponseLibraryChunk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_remotecontrolmessages_2eproto::scc_info_ResponseLibraryChunk.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.ResponseLibraryChunk)
}
ResponseLibraryChunk::ResponseLibraryChunk(const ResponseLibraryChunk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  file_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_hash()) {
    file_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_hash_);
  }
  ::memcpy(&chunk_number_, &from.chunk_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&chunk_number_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:pb.remote.ResponseLibraryChunk)
}

void ResponseLibraryChunk::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&chunk_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&chunk_number_)) + sizeof(size_));
}

ResponseLibraryChunk::~ResponseLibraryChunk() {
  // @@protoc_insertion_point(destructor:pb.remote.ResponseLibraryChunk)
  SharedDtor();
}

void ResponseLibraryChunk::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResponseLibraryChunk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ResponseLibraryChunk::descriptor() {
  ::protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseLibraryChunk& ResponseLibraryChunk::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_remotecontrolmessages_2eproto::scc_info_ResponseLibraryChunk.base);
  return *internal_default_instance();
}


void ResponseLibraryChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.ResponseLibraryChunk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      file_hash_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&chunk_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&size_) -
        reinterpret_cast<char*>(&chunk_number_)) + sizeof(size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResponseLibraryChunk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.ResponseLibraryChunk)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chunk_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_chunk_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chunk_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 chunk_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_chunk_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chunk_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes file_hash = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.ResponseLibraryChunk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.ResponseLibraryChunk)
  return false;
#undef DO_
}

void ResponseLibraryChunk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.ResponseLibraryChunk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 chunk_number = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chunk_number(), output);
  }

  // optional int32 chunk_count = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chunk_count(), output);
  }

  // optional bytes data = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // optional int32 size = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->size(), output);
  }

  // optional bytes file_hash = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->file_hash(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.ResponseLibraryChunk)
}

::google::protobuf::uint8* ResponseLibraryChunk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.ResponseLibraryChunk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 chunk_number = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chunk_number(), target);
  }

  // optional int32 chunk_count = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chunk_count(), target);
  }

  // optional bytes data = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // optional int32 size = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->size(), target);
  }

  // optional bytes file_hash = 5;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->file_hash(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.ResponseLibraryChunk)
  return target;
}

size_t ResponseLibraryChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.ResponseLibraryChunk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional bytes file_hash = 5;
    if (has_file_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->file_hash());
    }

    // optional int32 chunk_number = 1;
    if (has_chunk_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chunk_number());
    }

    // optional int32 chunk_count = 2;
    if (has_chunk_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chunk_count());
    }

    // optional int32 size = 4;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseLibraryChunk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.ResponseLibraryChunk)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseLibraryChunk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseLibraryChunk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.ResponseLibraryChunk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.ResponseLibraryChunk)
    MergeFrom(*source);
  }
}

void ResponseLibraryChunk::MergeFrom(const ResponseLibraryChunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.ResponseLibraryChunk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_file_hash();
      file_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_hash_);
    }
    if (cached_has_bits & 0x00000004u) {
      chunk_number_ = from.chunk_number_;
    }
    if (cached_has_bits & 0x00000008u) {
      chunk_count_ = from.chunk_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      size_ = from.size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResponseLibraryChunk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.ResponseLibraryChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseLibraryChunk::CopyFrom(const ResponseLibraryChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.ResponseLibraryChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseLibraryChunk::IsInitialized() const {
  return true;
}

void ResponseLibraryChunk::Swap(ResponseLibraryChunk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseLibraryChunk::InternalSwap(ResponseLibraryChunk* other) {
  using std::swap;
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  file_hash_.Swap(&other->file_hash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(chunk_number_, other->chunk_number_);
  swap(chunk_count_, other->chunk_count_);
  swap(size_, other->size_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ResponseLibraryChunk::GetMetadata() const {
  protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseSongOffer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseSongOffer::kAcceptedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseSongOffer::ResponseSongOffer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_remotecontrolmessages_2eproto::scc_info_ResponseSongOffer.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.ResponseSongOffer)
}
ResponseSongOffer::ResponseSongOffer(const ResponseSongOffer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  accepted_ = from.accepted_;
  // @@protoc_insertion_point(copy_constructor:pb.remote.ResponseSongOffer)
}

void ResponseSongOffer::SharedCtor() {
  accepted_ = false;
}

ResponseSongOffer::~ResponseSongOffer() {
  // @@protoc_insertion_point(destructor:pb.remote.ResponseSongOffer)
  SharedDtor();
}

void ResponseSongOffer::SharedDtor() {
}

void ResponseSongOffer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ResponseSongOffer::descriptor() {
  ::protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseSongOffer& ResponseSongOffer::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_remotecontrolmessages_2eproto::scc_info_ResponseSongOffer.base);
  return *internal_default_instance();
}


void ResponseSongOffer::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.ResponseSongOffer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accepted_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResponseSongOffer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.ResponseSongOffer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool accepted = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_accepted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accepted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.ResponseSongOffer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.ResponseSongOffer)
  return false;
#undef DO_
}

void ResponseSongOffer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.ResponseSongOffer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool accepted = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->accepted(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.ResponseSongOffer)
}

::google::protobuf::uint8* ResponseSongOffer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.ResponseSongOffer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool accepted = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->accepted(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.ResponseSongOffer)
  return target;
}

size_t ResponseSongOffer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.ResponseSongOffer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional bool accepted = 1;
  if (has_accepted()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseSongOffer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.ResponseSongOffer)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseSongOffer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseSongOffer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.ResponseSongOffer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.ResponseSongOffer)
    MergeFrom(*source);
  }
}

void ResponseSongOffer::MergeFrom(const ResponseSongOffer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.ResponseSongOffer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_accepted()) {
    set_accepted(from.accepted());
  }
}

void ResponseSongOffer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.ResponseSongOffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseSongOffer::CopyFrom(const ResponseSongOffer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.ResponseSongOffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseSongOffer::IsInitialized() const {
  return true;
}

void ResponseSongOffer::Swap(ResponseSongOffer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseSongOffer::InternalSwap(ResponseSongOffer* other) {
  using std::swap;
  swap(accepted_, other->accepted_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ResponseSongOffer::GetMetadata() const {
  protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestRateSong::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestRateSong::kRatingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestRateSong::RequestRateSong()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_remotecontrolmessages_2eproto::scc_info_RequestRateSong.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.RequestRateSong)
}
RequestRateSong::RequestRateSong(const RequestRateSong& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rating_ = from.rating_;
  // @@protoc_insertion_point(copy_constructor:pb.remote.RequestRateSong)
}

void RequestRateSong::SharedCtor() {
  rating_ = 0;
}

RequestRateSong::~RequestRateSong() {
  // @@protoc_insertion_point(destructor:pb.remote.RequestRateSong)
  SharedDtor();
}

void RequestRateSong::SharedDtor() {
}

void RequestRateSong::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestRateSong::descriptor() {
  ::protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestRateSong& RequestRateSong::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_remotecontrolmessages_2eproto::scc_info_RequestRateSong.base);
  return *internal_default_instance();
}


void RequestRateSong::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.RequestRateSong)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rating_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestRateSong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.RequestRateSong)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float rating = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_rating();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rating_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.RequestRateSong)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.RequestRateSong)
  return false;
#undef DO_
}

void RequestRateSong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.RequestRateSong)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float rating = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->rating(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.RequestRateSong)
}

::google::protobuf::uint8* RequestRateSong::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.RequestRateSong)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float rating = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->rating(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.RequestRateSong)
  return target;
}

size_t RequestRateSong::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.RequestRateSong)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional float rating = 1;
  if (has_rating()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestRateSong::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.RequestRateSong)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestRateSong* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestRateSong>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.RequestRateSong)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.RequestRateSong)
    MergeFrom(*source);
  }
}

void RequestRateSong::MergeFrom(const RequestRateSong& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.RequestRateSong)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_rating()) {
    set_rating(from.rating());
  }
}

void RequestRateSong::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.RequestRateSong)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestRateSong::CopyFrom(const RequestRateSong& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.RequestRateSong)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRateSong::IsInitialized() const {
  return true;
}

void RequestRateSong::Swap(RequestRateSong* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestRateSong::InternalSwap(RequestRateSong* other) {
  using std::swap;
  swap(rating_, other->rating_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestRateSong::GetMetadata() const {
  protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseDownloadTotalSize::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseDownloadTotalSize::kTotalSizeFieldNumber;
const int ResponseDownloadTotalSize::kFileCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseDownloadTotalSize::ResponseDownloadTotalSize()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_remotecontrolmessages_2eproto::scc_info_ResponseDownloadTotalSize.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.ResponseDownloadTotalSize)
}
ResponseDownloadTotalSize::ResponseDownloadTotalSize(const ResponseDownloadTotalSize& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&total_size_, &from.total_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&file_count_) -
    reinterpret_cast<char*>(&total_size_)) + sizeof(file_count_));
  // @@protoc_insertion_point(copy_constructor:pb.remote.ResponseDownloadTotalSize)
}

void ResponseDownloadTotalSize::SharedCtor() {
  ::memset(&total_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&file_count_) -
      reinterpret_cast<char*>(&total_size_)) + sizeof(file_count_));
}

ResponseDownloadTotalSize::~ResponseDownloadTotalSize() {
  // @@protoc_insertion_point(destructor:pb.remote.ResponseDownloadTotalSize)
  SharedDtor();
}

void ResponseDownloadTotalSize::SharedDtor() {
}

void ResponseDownloadTotalSize::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ResponseDownloadTotalSize::descriptor() {
  ::protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseDownloadTotalSize& ResponseDownloadTotalSize::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_remotecontrolmessages_2eproto::scc_info_ResponseDownloadTotalSize.base);
  return *internal_default_instance();
}


void ResponseDownloadTotalSize::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.ResponseDownloadTotalSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&total_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&file_count_) -
        reinterpret_cast<char*>(&total_size_)) + sizeof(file_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResponseDownloadTotalSize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.ResponseDownloadTotalSize)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 total_size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_total_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 file_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_file_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &file_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.ResponseDownloadTotalSize)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.ResponseDownloadTotalSize)
  return false;
#undef DO_
}

void ResponseDownloadTotalSize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.ResponseDownloadTotalSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 total_size = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->total_size(), output);
  }

  // optional int32 file_count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->file_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.ResponseDownloadTotalSize)
}

::google::protobuf::uint8* ResponseDownloadTotalSize::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.ResponseDownloadTotalSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 total_size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->total_size(), target);
  }

  // optional int32 file_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->file_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.ResponseDownloadTotalSize)
  return target;
}

size_t ResponseDownloadTotalSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.ResponseDownloadTotalSize)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 total_size = 1;
    if (has_total_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_size());
    }

    // optional int32 file_count = 2;
    if (has_file_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->file_count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseDownloadTotalSize::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.ResponseDownloadTotalSize)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseDownloadTotalSize* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseDownloadTotalSize>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.ResponseDownloadTotalSize)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.ResponseDownloadTotalSize)
    MergeFrom(*source);
  }
}

void ResponseDownloadTotalSize::MergeFrom(const ResponseDownloadTotalSize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.ResponseDownloadTotalSize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      total_size_ = from.total_size_;
    }
    if (cached_has_bits & 0x00000002u) {
      file_count_ = from.file_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResponseDownloadTotalSize::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.ResponseDownloadTotalSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseDownloadTotalSize::CopyFrom(const ResponseDownloadTotalSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.ResponseDownloadTotalSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseDownloadTotalSize::IsInitialized() const {
  return true;
}

void ResponseDownloadTotalSize::Swap(ResponseDownloadTotalSize* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseDownloadTotalSize::InternalSwap(ResponseDownloadTotalSize* other) {
  using std::swap;
  swap(total_size_, other->total_size_);
  swap(file_count_, other->file_count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ResponseDownloadTotalSize::GetMetadata() const {
  protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestGlobalSearch::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestGlobalSearch::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestGlobalSearch::RequestGlobalSearch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_remotecontrolmessages_2eproto::scc_info_RequestGlobalSearch.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.RequestGlobalSearch)
}
RequestGlobalSearch::RequestGlobalSearch(const RequestGlobalSearch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_query()) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  // @@protoc_insertion_point(copy_constructor:pb.remote.RequestGlobalSearch)
}

void RequestGlobalSearch::SharedCtor() {
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RequestGlobalSearch::~RequestGlobalSearch() {
  // @@protoc_insertion_point(destructor:pb.remote.RequestGlobalSearch)
  SharedDtor();
}

void RequestGlobalSearch::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RequestGlobalSearch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestGlobalSearch::descriptor() {
  ::protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestGlobalSearch& RequestGlobalSearch::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_remotecontrolmessages_2eproto::scc_info_RequestGlobalSearch.base);
  return *internal_default_instance();
}


void RequestGlobalSearch::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.RequestGlobalSearch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    query_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestGlobalSearch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.RequestGlobalSearch)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string query = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query().data(), static_cast<int>(this->query().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.remote.RequestGlobalSearch.query");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.RequestGlobalSearch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.RequestGlobalSearch)
  return false;
#undef DO_
}

void RequestGlobalSearch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.RequestGlobalSearch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string query = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.RequestGlobalSearch.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.RequestGlobalSearch)
}

::google::protobuf::uint8* RequestGlobalSearch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.RequestGlobalSearch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string query = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.RequestGlobalSearch.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.RequestGlobalSearch)
  return target;
}

size_t RequestGlobalSearch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.RequestGlobalSearch)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional string query = 1;
  if (has_query()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestGlobalSearch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.RequestGlobalSearch)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestGlobalSearch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestGlobalSearch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.RequestGlobalSearch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.RequestGlobalSearch)
    MergeFrom(*source);
  }
}

void RequestGlobalSearch::MergeFrom(const RequestGlobalSearch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.RequestGlobalSearch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_query()) {
    set_has_query();
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
}

void RequestGlobalSearch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.RequestGlobalSearch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestGlobalSearch::CopyFrom(const RequestGlobalSearch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.RequestGlobalSearch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGlobalSearch::IsInitialized() const {
  return true;
}

void RequestGlobalSearch::Swap(RequestGlobalSearch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestGlobalSearch::InternalSwap(RequestGlobalSearch* other) {
  using std::swap;
  query_.Swap(&other->query_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestGlobalSearch::GetMetadata() const {
  protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseGlobalSearch::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseGlobalSearch::kIdFieldNumber;
const int ResponseGlobalSearch::kQueryFieldNumber;
const int ResponseGlobalSearch::kSearchProviderFieldNumber;
const int ResponseGlobalSearch::kSongMetadataFieldNumber;
const int ResponseGlobalSearch::kSearchProviderIconFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseGlobalSearch::ResponseGlobalSearch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_remotecontrolmessages_2eproto::scc_info_ResponseGlobalSearch.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.ResponseGlobalSearch)
}
ResponseGlobalSearch::ResponseGlobalSearch(const ResponseGlobalSearch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      song_metadata_(from.song_metadata_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_query()) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  search_provider_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_search_provider()) {
    search_provider_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_provider_);
  }
  search_provider_icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_search_provider_icon()) {
    search_provider_icon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_provider_icon_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:pb.remote.ResponseGlobalSearch)
}

void ResponseGlobalSearch::SharedCtor() {
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  search_provider_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  search_provider_icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

ResponseGlobalSearch::~ResponseGlobalSearch() {
  // @@protoc_insertion_point(destructor:pb.remote.ResponseGlobalSearch)
  SharedDtor();
}

void ResponseGlobalSearch::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  search_provider_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  search_provider_icon_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResponseGlobalSearch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ResponseGlobalSearch::descriptor() {
  ::protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseGlobalSearch& ResponseGlobalSearch::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_remotecontrolmessages_2eproto::scc_info_ResponseGlobalSearch.base);
  return *internal_default_instance();
}


void ResponseGlobalSearch::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.ResponseGlobalSearch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  song_metadata_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      query_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      search_provider_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      search_provider_icon_.ClearNonDefaultToEmptyNoArena();
    }
  }
  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResponseGlobalSearch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.ResponseGlobalSearch)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string query = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query().data(), static_cast<int>(this->query().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.remote.ResponseGlobalSearch.query");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string search_provider = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_search_provider()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->search_provider().data(), static_cast<int>(this->search_provider().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.remote.ResponseGlobalSearch.search_provider");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.remote.SongMetadata song_metadata = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_song_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes search_provider_icon = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_search_provider_icon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.ResponseGlobalSearch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.ResponseGlobalSearch)
  return false;
#undef DO_
}

void ResponseGlobalSearch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.ResponseGlobalSearch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string query = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.ResponseGlobalSearch.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->query(), output);
  }

  // optional string search_provider = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_provider().data(), static_cast<int>(this->search_provider().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.ResponseGlobalSearch.search_provider");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->search_provider(), output);
  }

  // repeated .pb.remote.SongMetadata song_metadata = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->song_metadata_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->song_metadata(static_cast<int>(i)),
      output);
  }

  // optional bytes search_provider_icon = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->search_provider_icon(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.ResponseGlobalSearch)
}

::google::protobuf::uint8* ResponseGlobalSearch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.ResponseGlobalSearch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string query = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.ResponseGlobalSearch.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->query(), target);
  }

  // optional string search_provider = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_provider().data(), static_cast<int>(this->search_provider().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.ResponseGlobalSearch.search_provider");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->search_provider(), target);
  }

  // repeated .pb.remote.SongMetadata song_metadata = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->song_metadata_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->song_metadata(static_cast<int>(i)), deterministic, target);
  }

  // optional bytes search_provider_icon = 5;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->search_provider_icon(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.ResponseGlobalSearch)
  return target;
}

size_t ResponseGlobalSearch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.ResponseGlobalSearch)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .pb.remote.SongMetadata song_metadata = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->song_metadata_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->song_metadata(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional string query = 2;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query());
    }

    // optional string search_provider = 3;
    if (has_search_provider()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->search_provider());
    }

    // optional bytes search_provider_icon = 5;
    if (has_search_provider_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->search_provider_icon());
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseGlobalSearch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.ResponseGlobalSearch)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseGlobalSearch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseGlobalSearch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.ResponseGlobalSearch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.ResponseGlobalSearch)
    MergeFrom(*source);
  }
}

void ResponseGlobalSearch::MergeFrom(const ResponseGlobalSearch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.ResponseGlobalSearch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  song_metadata_.MergeFrom(from.song_metadata_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_query();
      query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_search_provider();
      search_provider_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_provider_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_search_provider_icon();
      search_provider_icon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_provider_icon_);
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResponseGlobalSearch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.ResponseGlobalSearch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseGlobalSearch::CopyFrom(const ResponseGlobalSearch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.ResponseGlobalSearch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseGlobalSearch::IsInitialized() const {
  return true;
}

void ResponseGlobalSearch::Swap(ResponseGlobalSearch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseGlobalSearch::InternalSwap(ResponseGlobalSearch* other) {
  using std::swap;
  CastToBase(&song_metadata_)->InternalSwap(CastToBase(&other->song_metadata_));
  query_.Swap(&other->query_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  search_provider_.Swap(&other->search_provider_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  search_provider_icon_.Swap(&other->search_provider_icon_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ResponseGlobalSearch::GetMetadata() const {
  protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseTranscoderStatus::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseTranscoderStatus::kProcessedFieldNumber;
const int ResponseTranscoderStatus::kTotalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseTranscoderStatus::ResponseTranscoderStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_remotecontrolmessages_2eproto::scc_info_ResponseTranscoderStatus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.ResponseTranscoderStatus)
}
ResponseTranscoderStatus::ResponseTranscoderStatus(const ResponseTranscoderStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&processed_, &from.processed_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_) -
    reinterpret_cast<char*>(&processed_)) + sizeof(total_));
  // @@protoc_insertion_point(copy_constructor:pb.remote.ResponseTranscoderStatus)
}

void ResponseTranscoderStatus::SharedCtor() {
  ::memset(&processed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_) -
      reinterpret_cast<char*>(&processed_)) + sizeof(total_));
}

ResponseTranscoderStatus::~ResponseTranscoderStatus() {
  // @@protoc_insertion_point(destructor:pb.remote.ResponseTranscoderStatus)
  SharedDtor();
}

void ResponseTranscoderStatus::SharedDtor() {
}

void ResponseTranscoderStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ResponseTranscoderStatus::descriptor() {
  ::protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseTranscoderStatus& ResponseTranscoderStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_remotecontrolmessages_2eproto::scc_info_ResponseTranscoderStatus.base);
  return *internal_default_instance();
}


void ResponseTranscoderStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.ResponseTranscoderStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&processed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_) -
        reinterpret_cast<char*>(&processed_)) + sizeof(total_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResponseTranscoderStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.ResponseTranscoderStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 processed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_processed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &processed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 total = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_total();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.ResponseTranscoderStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.ResponseTranscoderStatus)
  return false;
#undef DO_
}

void ResponseTranscoderStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.ResponseTranscoderStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 processed = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->processed(), output);
  }

  // optional int32 total = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.ResponseTranscoderStatus)
}

::google::protobuf::uint8* ResponseTranscoderStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.ResponseTranscoderStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 processed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->processed(), target);
  }

  // optional int32 total = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.ResponseTranscoderStatus)
  return target;
}

size_t ResponseTranscoderStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.ResponseTranscoderStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 processed = 1;
    if (has_processed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->processed());
    }

    // optional int32 total = 2;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseTranscoderStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.ResponseTranscoderStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseTranscoderStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseTranscoderStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.ResponseTranscoderStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.ResponseTranscoderStatus)
    MergeFrom(*source);
  }
}

void ResponseTranscoderStatus::MergeFrom(const ResponseTranscoderStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.ResponseTranscoderStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      processed_ = from.processed_;
    }
    if (cached_has_bits & 0x00000002u) {
      total_ = from.total_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResponseTranscoderStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.ResponseTranscoderStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseTranscoderStatus::CopyFrom(const ResponseTranscoderStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.ResponseTranscoderStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseTranscoderStatus::IsInitialized() const {
  return true;
}

void ResponseTranscoderStatus::Swap(ResponseTranscoderStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseTranscoderStatus::InternalSwap(ResponseTranscoderStatus* other) {
  using std::swap;
  swap(processed_, other->processed_);
  swap(total_, other->total_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ResponseTranscoderStatus::GetMetadata() const {
  protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseGlobalSearchStatus::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseGlobalSearchStatus::kIdFieldNumber;
const int ResponseGlobalSearchStatus::kQueryFieldNumber;
const int ResponseGlobalSearchStatus::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseGlobalSearchStatus::ResponseGlobalSearchStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_remotecontrolmessages_2eproto::scc_info_ResponseGlobalSearchStatus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.ResponseGlobalSearchStatus)
}
ResponseGlobalSearchStatus::ResponseGlobalSearchStatus(const ResponseGlobalSearchStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_query()) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:pb.remote.ResponseGlobalSearchStatus)
}

void ResponseGlobalSearchStatus::SharedCtor() {
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  status_ = 1;
}

ResponseGlobalSearchStatus::~ResponseGlobalSearchStatus() {
  // @@protoc_insertion_point(destructor:pb.remote.ResponseGlobalSearchStatus)
  SharedDtor();
}

void ResponseGlobalSearchStatus::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResponseGlobalSearchStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ResponseGlobalSearchStatus::descriptor() {
  ::protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseGlobalSearchStatus& ResponseGlobalSearchStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_remotecontrolmessages_2eproto::scc_info_ResponseGlobalSearchStatus.base);
  return *internal_default_instance();
}


void ResponseGlobalSearchStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.ResponseGlobalSearchStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    query_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    id_ = 0;
    status_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResponseGlobalSearchStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.ResponseGlobalSearchStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string query = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query().data(), static_cast<int>(this->query().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.remote.ResponseGlobalSearchStatus.query");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pb.remote.GlobalSearchStatus status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::remote::GlobalSearchStatus_IsValid(value)) {
            set_status(static_cast< ::pb::remote::GlobalSearchStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.ResponseGlobalSearchStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.ResponseGlobalSearchStatus)
  return false;
#undef DO_
}

void ResponseGlobalSearchStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.ResponseGlobalSearchStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string query = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.ResponseGlobalSearchStatus.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->query(), output);
  }

  // optional .pb.remote.GlobalSearchStatus status = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.ResponseGlobalSearchStatus)
}

::google::protobuf::uint8* ResponseGlobalSearchStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.ResponseGlobalSearchStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string query = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.remote.ResponseGlobalSearchStatus.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->query(), target);
  }

  // optional .pb.remote.GlobalSearchStatus status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.ResponseGlobalSearchStatus)
  return target;
}

size_t ResponseGlobalSearchStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.ResponseGlobalSearchStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string query = 2;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query());
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .pb.remote.GlobalSearchStatus status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseGlobalSearchStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.ResponseGlobalSearchStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseGlobalSearchStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseGlobalSearchStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.ResponseGlobalSearchStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.ResponseGlobalSearchStatus)
    MergeFrom(*source);
  }
}

void ResponseGlobalSearchStatus::MergeFrom(const ResponseGlobalSearchStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.ResponseGlobalSearchStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_query();
      query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResponseGlobalSearchStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.ResponseGlobalSearchStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseGlobalSearchStatus::CopyFrom(const ResponseGlobalSearchStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.ResponseGlobalSearchStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseGlobalSearchStatus::IsInitialized() const {
  return true;
}

void ResponseGlobalSearchStatus::Swap(ResponseGlobalSearchStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseGlobalSearchStatus::InternalSwap(ResponseGlobalSearchStatus* other) {
  using std::swap;
  query_.Swap(&other->query_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ResponseGlobalSearchStatus::GetMetadata() const {
  protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Message::InitAsDefaultInstance() {
  ::pb::remote::_Message_default_instance_._instance.get_mutable()->request_connect_ = const_cast< ::pb::remote::RequestConnect*>(
      ::pb::remote::RequestConnect::internal_default_instance());
  ::pb::remote::_Message_default_instance_._instance.get_mutable()->request_playlists_ = const_cast< ::pb::remote::RequestPlaylists*>(
      ::pb::remote::RequestPlaylists::internal_default_instance());
  ::pb::remote::_Message_default_instance_._instance.get_mutable()->request_playlist_songs_ = const_cast< ::pb::remote::RequestPlaylistSongs*>(
      ::pb::remote::RequestPlaylistSongs::internal_default_instance());
  ::pb::remote::_Message_default_instance_._instance.get_mutable()->request_change_song_ = const_cast< ::pb::remote::RequestChangeSong*>(
      ::pb::remote::RequestChangeSong::internal_default_instance());
  ::pb::remote::_Message_default_instance_._instance.get_mutable()->request_set_volume_ = const_cast< ::pb::remote::RequestSetVolume*>(
      ::pb::remote::RequestSetVolume::internal_default_instance());
  ::pb::remote::_Message_default_instance_._instance.get_mutable()->request_set_track_position_ = const_cast< ::pb::remote::RequestSetTrackPosition*>(
      ::pb::remote::RequestSetTrackPosition::internal_default_instance());
  ::pb::remote::_Message_default_instance_._instance.get_mutable()->request_insert_urls_ = const_cast< ::pb::remote::RequestInsertUrls*>(
      ::pb::remote::RequestInsertUrls::internal_default_instance());
  ::pb::remote::_Message_default_instance_._instance.get_mutable()->request_remove_songs_ = const_cast< ::pb::remote::RequestRemoveSongs*>(
      ::pb::remote::RequestRemoveSongs::internal_default_instance());
  ::pb::remote::_Message_default_instance_._instance.get_mutable()->request_open_playlist_ = const_cast< ::pb::remote::RequestOpenPlaylist*>(
      ::pb::remote::RequestOpenPlaylist::internal_default_instance());
  ::pb::remote::_Message_default_instance_._instance.get_mutable()->request_close_playlist_ = const_cast< ::pb::remote::RequestClosePlaylist*>(
      ::pb::remote::RequestClosePlaylist::internal_default_instance());
  ::pb::remote::_Message_default_instance_._instance.get_mutable()->request_download_songs_ = const_cast< ::pb::remote::RequestDownloadSongs*>(
      ::pb::remote::RequestDownloadSongs::internal_default_instance());
  ::pb::remote::_Message_default_instance_._instance.get_mutable()->request_rate_song_ = const_cast< ::pb::remote::RequestRateSong*>(
      ::pb::remote::RequestRateSong::internal_default_instance());
  ::pb::remote::_Message_default_instance_._instance.get_mutable()->request_global_search_ = const_cast< ::pb::remote::RequestGlobalSearch*>(
      ::pb::remote::RequestGlobalSearch::internal_default_instance());
  ::pb::remote::_Message_default_instance_._instance.get_mutable()->repeat_ = const_cast< ::pb::remote::Repeat*>(
      ::pb::remote::Repeat::internal_default_instance());
  ::pb::remote::_Message_default_instance_._instance.get_mutable()->shuffle_ = const_cast< ::pb::remote::Shuffle*>(
      ::pb::remote::Shuffle::internal_default_instance());
  ::pb::remote::_Message_default_instance_._instance.get_mutable()->response_clementine_info_ = const_cast< ::pb::remote::ResponseClementineInfo*>(
      ::pb::remote::ResponseClementineInfo::internal_default_instance());
  ::pb::remote::_Message_default_instance_._instance.get_mutable()->response_current_metadata_ = const_cast< ::pb::remote::ResponseCurrentMetadata*>(
      ::pb::remote::ResponseCurrentMetadata::internal_default_instance());
  ::pb::remote::_Message_default_instance_._instance.get_mutable()->response_playlists_ = const_cast< ::pb::remote::ResponsePlaylists*>(
      ::pb::remote::ResponsePlaylists::internal_default_instance());
  ::pb::remote::_Message_default_instance_._instance.get_mutable()->response_playlist_songs_ = const_cast< ::pb::remote::ResponsePlaylistSongs*>(
      ::pb::remote::ResponsePlaylistSongs::internal_default_instance());
  ::pb::remote::_Message_default_instance_._instance.get_mutable()->response_engine_state_changed_ = const_cast< ::pb::remote::ResponseEngineStateChanged*>(
      ::pb::remote::ResponseEngineStateChanged::internal_default_instance());
  ::pb::remote::_Message_default_instance_._instance.get_mutable()->response_update_track_position_ = const_cast< ::pb::remote::ResponseUpdateTrackPosition*>(
      ::pb::remote::ResponseUpdateTrackPosition::internal_default_instance());
  ::pb::remote::_Message_default_instance_._instance.get_mutable()->response_disconnect_ = const_cast< ::pb::remote::ResponseDisconnect*>(
      ::pb::remote::ResponseDisconnect::internal_default_instance());
  ::pb::remote::_Message_default_instance_._instance.get_mutable()->response_active_changed_ = const_cast< ::pb::remote::ResponseActiveChanged*>(
      ::pb::remote::ResponseActiveChanged::internal_default_instance());
  ::pb::remote::_Message_default_instance_._instance.get_mutable()->response_lyrics_ = const_cast< ::pb::remote::ResponseLyrics*>(
      ::pb::remote::ResponseLyrics::internal_default_instance());
  ::pb::remote::_Message_default_instance_._instance.get_mutable()->response_song_file_chunk_ = const_cast< ::pb::remote::ResponseSongFileChunk*>(
      ::pb::remote::ResponseSongFileChunk::internal_default_instance());
  ::pb::remote::_Message_default_instance_._instance.get_mutable()->response_song_offer_ = const_cast< ::pb::remote::ResponseSongOffer*>(
      ::pb::remote::ResponseSongOffer::internal_default_instance());
  ::pb::remote::_Message_default_instance_._instance.get_mutable()->response_library_chunk_ = const_cast< ::pb::remote::ResponseLibraryChunk*>(
      ::pb::remote::ResponseLibraryChunk::internal_default_instance());
  ::pb::remote::_Message_default_instance_._instance.get_mutable()->response_download_total_size_ = const_cast< ::pb::remote::ResponseDownloadTotalSize*>(
      ::pb::remote::ResponseDownloadTotalSize::internal_default_instance());
  ::pb::remote::_Message_default_instance_._instance.get_mutable()->response_global_search_ = const_cast< ::pb::remote::ResponseGlobalSearch*>(
      ::pb::remote::ResponseGlobalSearch::internal_default_instance());
  ::pb::remote::_Message_default_instance_._instance.get_mutable()->response_transcoder_status_ = const_cast< ::pb::remote::ResponseTranscoderStatus*>(
      ::pb::remote::ResponseTranscoderStatus::internal_default_instance());
  ::pb::remote::_Message_default_instance_._instance.get_mutable()->response_global_search_status_ = const_cast< ::pb::remote::ResponseGlobalSearchStatus*>(
      ::pb::remote::ResponseGlobalSearchStatus::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message::kVersionFieldNumber;
const int Message::kTypeFieldNumber;
const int Message::kRequestConnectFieldNumber;
const int Message::kRequestPlaylistsFieldNumber;
const int Message::kRequestPlaylistSongsFieldNumber;
const int Message::kRequestChangeSongFieldNumber;
const int Message::kRequestSetVolumeFieldNumber;
const int Message::kRequestSetTrackPositionFieldNumber;
const int Message::kRequestInsertUrlsFieldNumber;
const int Message::kRequestRemoveSongsFieldNumber;
const int Message::kRequestOpenPlaylistFieldNumber;
const int Message::kRequestClosePlaylistFieldNumber;
const int Message::kRequestDownloadSongsFieldNumber;
const int Message::kRequestRateSongFieldNumber;
const int Message::kRequestGlobalSearchFieldNumber;
const int Message::kRepeatFieldNumber;
const int Message::kShuffleFieldNumber;
const int Message::kResponseClementineInfoFieldNumber;
const int Message::kResponseCurrentMetadataFieldNumber;
const int Message::kResponsePlaylistsFieldNumber;
const int Message::kResponsePlaylistSongsFieldNumber;
const int Message::kResponseEngineStateChangedFieldNumber;
const int Message::kResponseUpdateTrackPositionFieldNumber;
const int Message::kResponseDisconnectFieldNumber;
const int Message::kResponseActiveChangedFieldNumber;
const int Message::kResponseLyricsFieldNumber;
const int Message::kResponseSongFileChunkFieldNumber;
const int Message::kResponseSongOfferFieldNumber;
const int Message::kResponseLibraryChunkFieldNumber;
const int Message::kResponseDownloadTotalSizeFieldNumber;
const int Message::kResponseGlobalSearchFieldNumber;
const int Message::kResponseTranscoderStatusFieldNumber;
const int Message::kResponseGlobalSearchStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message::Message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_remotecontrolmessages_2eproto::scc_info_Message.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.remote.Message)
}
Message::Message(const Message& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_request_playlist_songs()) {
    request_playlist_songs_ = new ::pb::remote::RequestPlaylistSongs(*from.request_playlist_songs_);
  } else {
    request_playlist_songs_ = NULL;
  }
  if (from.has_request_change_song()) {
    request_change_song_ = new ::pb::remote::RequestChangeSong(*from.request_change_song_);
  } else {
    request_change_song_ = NULL;
  }
  if (from.has_request_set_volume()) {
    request_set_volume_ = new ::pb::remote::RequestSetVolume(*from.request_set_volume_);
  } else {
    request_set_volume_ = NULL;
  }
  if (from.has_repeat()) {
    repeat_ = new ::pb::remote::Repeat(*from.repeat_);
  } else {
    repeat_ = NULL;
  }
  if (from.has_shuffle()) {
    shuffle_ = new ::pb::remote::Shuffle(*from.shuffle_);
  } else {
    shuffle_ = NULL;
  }
  if (from.has_response_clementine_info()) {
    response_clementine_info_ = new ::pb::remote::ResponseClementineInfo(*from.response_clementine_info_);
  } else {
    response_clementine_info_ = NULL;
  }
  if (from.has_response_current_metadata()) {
    response_current_metadata_ = new ::pb::remote::ResponseCurrentMetadata(*from.response_current_metadata_);
  } else {
    response_current_metadata_ = NULL;
  }
  if (from.has_response_playlists()) {
    response_playlists_ = new ::pb::remote::ResponsePlaylists(*from.response_playlists_);
  } else {
    response_playlists_ = NULL;
  }
  if (from.has_response_playlist_songs()) {
    response_playlist_songs_ = new ::pb::remote::ResponsePlaylistSongs(*from.response_playlist_songs_);
  } else {
    response_playlist_songs_ = NULL;
  }
  if (from.has_response_engine_state_changed()) {
    response_engine_state_changed_ = new ::pb::remote::ResponseEngineStateChanged(*from.response_engine_state_changed_);
  } else {
    response_engine_state_changed_ = NULL;
  }
  if (from.has_response_update_track_position()) {
    response_update_track_position_ = new ::pb::remote::ResponseUpdateTrackPosition(*from.response_update_track_position_);
  } else {
    response_update_track_position_ = NULL;
  }
  if (from.has_request_connect()) {
    request_connect_ = new ::pb::remote::RequestConnect(*from.request_connect_);
  } else {
    request_connect_ = NULL;
  }
  if (from.has_response_disconnect()) {
    response_disconnect_ = new ::pb::remote::ResponseDisconnect(*from.response_disconnect_);
  } else {
    response_disconnect_ = NULL;
  }
  if (from.has_request_set_track_position()) {
    request_set_track_position_ = new ::pb::remote::RequestSetTrackPosition(*from.request_set_track_position_);
  } else {
    request_set_track_position_ = NULL;
  }
  if (from.has_response_active_changed()) {
    response_active_changed_ = new ::pb::remote::ResponseActiveChanged(*from.response_active_changed_);
  } else {
    response_active_changed_ = NULL;
  }
  if (from.has_request_insert_urls()) {
    request_insert_urls_ = new ::pb::remote::RequestInsertUrls(*from.request_insert_urls_);
  } else {
    request_insert_urls_ = NULL;
  }
  if (from.has_request_remove_songs()) {
    request_remove_songs_ = new ::pb::remote::RequestRemoveSongs(*from.request_remove_songs_);
  } else {
    request_remove_songs_ = NULL;
  }
  if (from.has_request_playlists()) {
    request_playlists_ = new ::pb::remote::RequestPlaylists(*from.request_playlists_);
  } else {
    request_playlists_ = NULL;
  }
  if (from.has_request_open_playlist()) {
    request_open_playlist_ = new ::pb::remote::RequestOpenPlaylist(*from.request_open_playlist_);
  } else {
    request_open_playlist_ = NULL;
  }
  if (from.has_request_close_playlist()) {
    request_close_playlist_ = new ::pb::remote::RequestClosePlaylist(*from.request_close_playlist_);
  } else {
    request_close_playlist_ = NULL;
  }
  if (from.has_response_lyrics()) {
    response_lyrics_ = new ::pb::remote::ResponseLyrics(*from.response_lyrics_);
  } else {
    response_lyrics_ = NULL;
  }
  if (from.has_request_download_songs()) {
    request_download_songs_ = new ::pb::remote::RequestDownloadSongs(*from.request_download_songs_);
  } else {
    request_download_songs_ = NULL;
  }
  if (from.has_response_song_file_chunk()) {
    response_song_file_chunk_ = new ::pb::remote::ResponseSongFileChunk(*from.response_song_file_chunk_);
  } else {
    response_song_file_chunk_ = NULL;
  }
  if (from.has_response_song_offer()) {
    response_song_offer_ = new ::pb::remote::ResponseSongOffer(*from.response_song_offer_);
  } else {
    response_song_offer_ = NULL;
  }
  if (from.has_response_library_chunk()) {
    response_library_chunk_ = new ::pb::remote::ResponseLibraryChunk(*from.response_library_chunk_);
  } else {
    response_library_chunk_ = NULL;
  }
  if (from.has_request_rate_song()) {
    request_rate_song_ = new ::pb::remote::RequestRateSong(*from.request_rate_song_);
  } else {
    request_rate_song_ = NULL;
  }
  if (from.has_response_download_total_size()) {
    response_download_total_size_ = new ::pb::remote::ResponseDownloadTotalSize(*from.response_download_total_size_);
  } else {
    response_download_total_size_ = NULL;
  }
  if (from.has_request_global_search()) {
    request_global_search_ = new ::pb::remote::RequestGlobalSearch(*from.request_global_search_);
  } else {
    request_global_search_ = NULL;
  }
  if (from.has_response_global_search()) {
    response_global_search_ = new ::pb::remote::ResponseGlobalSearch(*from.response_global_search_);
  } else {
    response_global_search_ = NULL;
  }
  if (from.has_response_transcoder_status()) {
    response_transcoder_status_ = new ::pb::remote::ResponseTranscoderStatus(*from.response_transcoder_status_);
  } else {
    response_transcoder_status_ = NULL;
  }
  if (from.has_response_global_search_status()) {
    response_global_search_status_ = new ::pb::remote::ResponseGlobalSearchStatus(*from.response_global_search_status_);
  } else {
    response_global_search_status_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&type_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:pb.remote.Message)
}

void Message::SharedCtor() {
  ::memset(&request_playlist_songs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&request_playlist_songs_)) + sizeof(type_));
  version_ = 21;
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:pb.remote.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  if (this != internal_default_instance()) delete request_playlist_songs_;
  if (this != internal_default_instance()) delete request_change_song_;
  if (this != internal_default_instance()) delete request_set_volume_;
  if (this != internal_default_instance()) delete repeat_;
  if (this != internal_default_instance()) delete shuffle_;
  if (this != internal_default_instance()) delete response_clementine_info_;
  if (this != internal_default_instance()) delete response_current_metadata_;
  if (this != internal_default_instance()) delete response_playlists_;
  if (this != internal_default_instance()) delete response_playlist_songs_;
  if (this != internal_default_instance()) delete response_engine_state_changed_;
  if (this != internal_default_instance()) delete response_update_track_position_;
  if (this != internal_default_instance()) delete request_connect_;
  if (this != internal_default_instance()) delete response_disconnect_;
  if (this != internal_default_instance()) delete request_set_track_position_;
  if (this != internal_default_instance()) delete response_active_changed_;
  if (this != internal_default_instance()) delete request_insert_urls_;
  if (this != internal_default_instance()) delete request_remove_songs_;
  if (this != internal_default_instance()) delete request_playlists_;
  if (this != internal_default_instance()) delete request_open_playlist_;
  if (this != internal_default_instance()) delete request_close_playlist_;
  if (this != internal_default_instance()) delete response_lyrics_;
  if (this != internal_default_instance()) delete request_download_songs_;
  if (this != internal_default_instance()) delete response_song_file_chunk_;
  if (this != internal_default_instance()) delete response_song_offer_;
  if (this != internal_default_instance()) delete response_library_chunk_;
  if (this != internal_default_instance()) delete request_rate_song_;
  if (this != internal_default_instance()) delete response_download_total_size_;
  if (this != internal_default_instance()) delete request_global_search_;
  if (this != internal_default_instance()) delete response_global_search_;
  if (this != internal_default_instance()) delete response_transcoder_status_;
  if (this != internal_default_instance()) delete response_global_search_status_;
}

void Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  ::protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Message& Message::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_remotecontrolmessages_2eproto::scc_info_Message.base);
  return *internal_default_instance();
}


void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.remote.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(request_playlist_songs_ != NULL);
      request_playlist_songs_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(request_change_song_ != NULL);
      request_change_song_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(request_set_volume_ != NULL);
      request_set_volume_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(repeat_ != NULL);
      repeat_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(shuffle_ != NULL);
      shuffle_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(response_clementine_info_ != NULL);
      response_clementine_info_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(response_current_metadata_ != NULL);
      response_current_metadata_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(response_playlists_ != NULL);
      response_playlists_->Clear();
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(response_playlist_songs_ != NULL);
      response_playlist_songs_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(response_engine_state_changed_ != NULL);
      response_engine_state_changed_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(response_update_track_position_ != NULL);
      response_update_track_position_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(request_connect_ != NULL);
      request_connect_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(response_disconnect_ != NULL);
      response_disconnect_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(request_set_track_position_ != NULL);
      request_set_track_position_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(response_active_changed_ != NULL);
      response_active_changed_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(request_insert_urls_ != NULL);
      request_insert_urls_->Clear();
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(request_remove_songs_ != NULL);
      request_remove_songs_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(request_playlists_ != NULL);
      request_playlists_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(request_open_playlist_ != NULL);
      request_open_playlist_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(request_close_playlist_ != NULL);
      request_close_playlist_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(response_lyrics_ != NULL);
      response_lyrics_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(request_download_songs_ != NULL);
      request_download_songs_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(response_song_file_chunk_ != NULL);
      response_song_file_chunk_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(response_song_offer_ != NULL);
      response_song_offer_->Clear();
    }
  }
  if (cached_has_bits & 2130706432u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(response_library_chunk_ != NULL);
      response_library_chunk_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(request_rate_song_ != NULL);
      request_rate_song_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(response_download_total_size_ != NULL);
      response_download_total_size_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(request_global_search_ != NULL);
      request_global_search_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(response_global_search_ != NULL);
      response_global_search_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(response_transcoder_status_ != NULL);
      response_transcoder_status_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(response_global_search_status_ != NULL);
      response_global_search_status_->Clear();
    }
  }
  type_ = 0;
  version_ = 21;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.remote.Message)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 version = 1 [default = 21];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pb.remote.MsgType type = 2 [default = UNKNOWN];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::remote::MsgType_IsValid(value)) {
            set_type(static_cast< ::pb::remote::MsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pb.remote.RequestPlaylistSongs request_playlist_songs = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_request_playlist_songs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pb.remote.RequestChangeSong request_change_song = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_request_change_song()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pb.remote.RequestSetVolume request_set_volume = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_request_set_volume()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pb.remote.Repeat repeat = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_repeat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pb.remote.Shuffle shuffle = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_shuffle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pb.remote.ResponseClementineInfo response_clementine_info = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_response_clementine_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pb.remote.ResponseCurrentMetadata response_current_metadata = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_response_current_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pb.remote.ResponsePlaylists response_playlists = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_response_playlists()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pb.remote.ResponsePlaylistSongs response_playlist_songs = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_response_playlist_songs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pb.remote.ResponseEngineStateChanged response_engine_state_changed = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_response_engine_state_changed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pb.remote.ResponseUpdateTrackPosition response_update_track_position = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_response_update_track_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pb.remote.RequestConnect request_connect = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_request_connect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pb.remote.ResponseDisconnect response_disconnect = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_response_disconnect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pb.remote.RequestSetTrackPosition request_set_track_position = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_request_set_track_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pb.remote.ResponseActiveChanged response_active_changed = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_response_active_changed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pb.remote.RequestInsertUrls request_insert_urls = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_request_insert_urls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pb.remote.RequestRemoveSongs request_remove_songs = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_request_remove_songs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pb.remote.RequestPlaylists request_playlists = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_request_playlists()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pb.remote.RequestOpenPlaylist request_open_playlist = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_request_open_playlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pb.remote.RequestClosePlaylist request_close_playlist = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 234 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_request_close_playlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pb.remote.ResponseLyrics response_lyrics = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_response_lyrics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pb.remote.RequestDownloadSongs request_download_songs = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 250 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_request_download_songs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pb.remote.ResponseSongFileChunk response_song_file_chunk = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 258 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_response_song_file_chunk()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pb.remote.ResponseSongOffer response_song_offer = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 266 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_response_song_offer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pb.remote.ResponseLibraryChunk response_library_chunk = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 274 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_response_library_chunk()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pb.remote.RequestRateSong request_rate_song = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 282 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_request_rate_song()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pb.remote.ResponseDownloadTotalSize response_download_total_size = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 290 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_response_download_total_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pb.remote.RequestGlobalSearch request_global_search = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 298 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_request_global_search()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pb.remote.ResponseGlobalSearch response_global_search = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 306 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_response_global_search()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pb.remote.ResponseTranscoderStatus response_transcoder_status = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 314 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_response_transcoder_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pb.remote.ResponseGlobalSearchStatus response_global_search_status = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 322 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_response_global_search_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.remote.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.remote.Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.remote.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[1];
  // optional int32 version = 1 [default = 21];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .pb.remote.MsgType type = 2 [default = UNKNOWN];
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .pb.remote.RequestPlaylistSongs request_playlist_songs = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_request_playlist_songs(), output);
  }

  // optional .pb.remote.RequestChangeSong request_change_song = 11;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_request_change_song(), output);
  }

  // optional .pb.remote.RequestSetVolume request_set_volume = 12;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_request_set_volume(), output);
  }

  // optional .pb.remote.Repeat repeat = 13;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->_internal_repeat(), output);
  }

  // optional .pb.remote.Shuffle shuffle = 14;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->_internal_shuffle(), output);
  }

  // optional .pb.remote.ResponseClementineInfo response_clementine_info = 15;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->_internal_response_clementine_info(), output);
  }

  // optional .pb.remote.ResponseCurrentMetadata response_current_metadata = 16;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->_internal_response_current_metadata(), output);
  }

  // optional .pb.remote.ResponsePlaylists response_playlists = 17;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->_internal_response_playlists(), output);
  }

  // optional .pb.remote.ResponsePlaylistSongs response_playlist_songs = 18;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->_internal_response_playlist_songs(), output);
  }

  // optional .pb.remote.ResponseEngineStateChanged response_engine_state_changed = 19;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->_internal_response_engine_state_changed(), output);
  }

  // optional .pb.remote.ResponseUpdateTrackPosition response_update_track_position = 20;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->_internal_response_update_track_position(), output);
  }

  // optional .pb.remote.RequestConnect request_connect = 21;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->_internal_request_connect(), output);
  }

  // optional .pb.remote.ResponseDisconnect response_disconnect = 22;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->_internal_response_disconnect(), output);
  }

  // optional .pb.remote.RequestSetTrackPosition request_set_track_position = 23;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->_internal_request_set_track_position(), output);
  }

  // optional .pb.remote.ResponseActiveChanged response_active_changed = 24;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->_internal_response_active_changed(), output);
  }

  // optional .pb.remote.RequestInsertUrls request_insert_urls = 25;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->_internal_request_insert_urls(), output);
  }

  // optional .pb.remote.RequestRemoveSongs request_remove_songs = 26;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->_internal_request_remove_songs(), output);
  }

  // optional .pb.remote.RequestPlaylists request_playlists = 27;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->_internal_request_playlists(), output);
  }

  // optional .pb.remote.RequestOpenPlaylist request_open_playlist = 28;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->_internal_request_open_playlist(), output);
  }

  // optional .pb.remote.RequestClosePlaylist request_close_playlist = 29;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->_internal_request_close_playlist(), output);
  }

  // optional .pb.remote.ResponseLyrics response_lyrics = 30;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->_internal_response_lyrics(), output);
  }

  // optional .pb.remote.RequestDownloadSongs request_download_songs = 31;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->_internal_request_download_songs(), output);
  }

  // optional .pb.remote.ResponseSongFileChunk response_song_file_chunk = 32;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->_internal_response_song_file_chunk(), output);
  }

  // optional .pb.remote.ResponseSongOffer response_song_offer = 33;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->_internal_response_song_offer(), output);
  }

  // optional .pb.remote.ResponseLibraryChunk response_library_chunk = 34;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->_internal_response_library_chunk(), output);
  }

  // optional .pb.remote.RequestRateSong request_rate_song = 35;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->_internal_request_rate_song(), output);
  }

  // optional .pb.remote.ResponseDownloadTotalSize response_download_total_size = 36;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, this->_internal_response_download_total_size(), output);
  }

  // optional .pb.remote.RequestGlobalSearch request_global_search = 37;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, this->_internal_request_global_search(), output);
  }

  // optional .pb.remote.ResponseGlobalSearch response_global_search = 38;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, this->_internal_response_global_search(), output);
  }

  // optional .pb.remote.ResponseTranscoderStatus response_transcoder_status = 39;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, this->_internal_response_transcoder_status(), output);
  }

  // optional .pb.remote.ResponseGlobalSearchStatus response_global_search_status = 40;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->_internal_response_global_search_status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.remote.Message)
}

::google::protobuf::uint8* Message::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.remote.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[1];
  // optional int32 version = 1 [default = 21];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .pb.remote.MsgType type = 2 [default = UNKNOWN];
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .pb.remote.RequestPlaylistSongs request_playlist_songs = 10;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_request_playlist_songs(), deterministic, target);
  }

  // optional .pb.remote.RequestChangeSong request_change_song = 11;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_request_change_song(), deterministic, target);
  }

  // optional .pb.remote.RequestSetVolume request_set_volume = 12;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_request_set_volume(), deterministic, target);
  }

  // optional .pb.remote.Repeat repeat = 13;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->_internal_repeat(), deterministic, target);
  }

  // optional .pb.remote.Shuffle shuffle = 14;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->_internal_shuffle(), deterministic, target);
  }

  // optional .pb.remote.ResponseClementineInfo response_clementine_info = 15;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->_internal_response_clementine_info(), deterministic, target);
  }

  // optional .pb.remote.ResponseCurrentMetadata response_current_metadata = 16;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, this->_internal_response_current_metadata(), deterministic, target);
  }

  // optional .pb.remote.ResponsePlaylists response_playlists = 17;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, this->_internal_response_playlists(), deterministic, target);
  }

  // optional .pb.remote.ResponsePlaylistSongs response_playlist_songs = 18;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, this->_internal_response_playlist_songs(), deterministic, target);
  }

  // optional .pb.remote.ResponseEngineStateChanged response_engine_state_changed = 19;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, this->_internal_response_engine_state_changed(), deterministic, target);
  }

  // optional .pb.remote.ResponseUpdateTrackPosition response_update_track_position = 20;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->_internal_response_update_track_position(), deterministic, target);
  }

  // optional .pb.remote.RequestConnect request_connect = 21;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, this->_internal_request_connect(), deterministic, target);
  }

  // optional .pb.remote.ResponseDisconnect response_disconnect = 22;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, this->_internal_response_disconnect(), deterministic, target);
  }

  // optional .pb.remote.RequestSetTrackPosition request_set_track_position = 23;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        23, this->_internal_request_set_track_position(), deterministic, target);
  }

  // optional .pb.remote.ResponseActiveChanged response_active_changed = 24;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        24, this->_internal_response_active_changed(), deterministic, target);
  }

  // optional .pb.remote.RequestInsertUrls request_insert_urls = 25;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        25, this->_internal_request_insert_urls(), deterministic, target);
  }

  // optional .pb.remote.RequestRemoveSongs request_remove_songs = 26;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        26, this->_internal_request_remove_songs(), deterministic, target);
  }

  // optional .pb.remote.RequestPlaylists request_playlists = 27;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        27, this->_internal_request_playlists(), deterministic, target);
  }

  // optional .pb.remote.RequestOpenPlaylist request_open_playlist = 28;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        28, this->_internal_request_open_playlist(), deterministic, target);
  }

  // optional .pb.remote.RequestClosePlaylist request_close_playlist = 29;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        29, this->_internal_request_close_playlist(), deterministic, target);
  }

  // optional .pb.remote.ResponseLyrics response_lyrics = 30;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        30, this->_internal_response_lyrics(), deterministic, target);
  }

  // optional .pb.remote.RequestDownloadSongs request_download_songs = 31;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        31, this->_internal_request_download_songs(), deterministic, target);
  }

  // optional .pb.remote.ResponseSongFileChunk response_song_file_chunk = 32;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        32, this->_internal_response_song_file_chunk(), deterministic, target);
  }

  // optional .pb.remote.ResponseSongOffer response_song_offer = 33;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        33, this->_internal_response_song_offer(), deterministic, target);
  }

  // optional .pb.remote.ResponseLibraryChunk response_library_chunk = 34;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        34, this->_internal_response_library_chunk(), deterministic, target);
  }

  // optional .pb.remote.RequestRateSong request_rate_song = 35;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        35, this->_internal_request_rate_song(), deterministic, target);
  }

  // optional .pb.remote.ResponseDownloadTotalSize response_download_total_size = 36;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        36, this->_internal_response_download_total_size(), deterministic, target);
  }

  // optional .pb.remote.RequestGlobalSearch request_global_search = 37;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        37, this->_internal_request_global_search(), deterministic, target);
  }

  // optional .pb.remote.ResponseGlobalSearch response_global_search = 38;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        38, this->_internal_response_global_search(), deterministic, target);
  }

  // optional .pb.remote.ResponseTranscoderStatus response_transcoder_status = 39;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        39, this->_internal_response_transcoder_status(), deterministic, target);
  }

  // optional .pb.remote.ResponseGlobalSearchStatus response_global_search_status = 40;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        40, this->_internal_response_global_search_status(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.remote.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.remote.Message)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .pb.remote.RequestPlaylistSongs request_playlist_songs = 10;
    if (has_request_playlist_songs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_playlist_songs_);
    }

    // optional .pb.remote.RequestChangeSong request_change_song = 11;
    if (has_request_change_song()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_change_song_);
    }

    // optional .pb.remote.RequestSetVolume request_set_volume = 12;
    if (has_request_set_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_set_volume_);
    }

    // optional .pb.remote.Repeat repeat = 13;
    if (has_repeat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *repeat_);
    }

    // optional .pb.remote.Shuffle shuffle = 14;
    if (has_shuffle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *shuffle_);
    }

    // optional .pb.remote.ResponseClementineInfo response_clementine_info = 15;
    if (has_response_clementine_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_clementine_info_);
    }

    // optional .pb.remote.ResponseCurrentMetadata response_current_metadata = 16;
    if (has_response_current_metadata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_current_metadata_);
    }

    // optional .pb.remote.ResponsePlaylists response_playlists = 17;
    if (has_response_playlists()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_playlists_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .pb.remote.ResponsePlaylistSongs response_playlist_songs = 18;
    if (has_response_playlist_songs()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_playlist_songs_);
    }

    // optional .pb.remote.ResponseEngineStateChanged response_engine_state_changed = 19;
    if (has_response_engine_state_changed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_engine_state_changed_);
    }

    // optional .pb.remote.ResponseUpdateTrackPosition response_update_track_position = 20;
    if (has_response_update_track_position()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_update_track_position_);
    }

    // optional .pb.remote.RequestConnect request_connect = 21;
    if (has_request_connect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_connect_);
    }

    // optional .pb.remote.ResponseDisconnect response_disconnect = 22;
    if (has_response_disconnect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_disconnect_);
    }

    // optional .pb.remote.RequestSetTrackPosition request_set_track_position = 23;
    if (has_request_set_track_position()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_set_track_position_);
    }

    // optional .pb.remote.ResponseActiveChanged response_active_changed = 24;
    if (has_response_active_changed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_active_changed_);
    }

    // optional .pb.remote.RequestInsertUrls request_insert_urls = 25;
    if (has_request_insert_urls()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_insert_urls_);
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional .pb.remote.RequestRemoveSongs request_remove_songs = 26;
    if (has_request_remove_songs()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_remove_songs_);
    }

    // optional .pb.remote.RequestPlaylists request_playlists = 27;
    if (has_request_playlists()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_playlists_);
    }

    // optional .pb.remote.RequestOpenPlaylist request_open_playlist = 28;
    if (has_request_open_playlist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_open_playlist_);
    }

    // optional .pb.remote.RequestClosePlaylist request_close_playlist = 29;
    if (has_request_close_playlist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_close_playlist_);
    }

    // optional .pb.remote.ResponseLyrics response_lyrics = 30;
    if (has_response_lyrics()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_lyrics_);
    }

    // optional .pb.remote.RequestDownloadSongs request_download_songs = 31;
    if (has_request_download_songs()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_download_songs_);
    }

    // optional .pb.remote.ResponseSongFileChunk response_song_file_chunk = 32;
    if (has_response_song_file_chunk()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_song_file_chunk_);
    }

    // optional .pb.remote.ResponseSongOffer response_song_offer = 33;
    if (has_response_song_offer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_song_offer_);
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional .pb.remote.ResponseLibraryChunk response_library_chunk = 34;
    if (has_response_library_chunk()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_library_chunk_);
    }

    // optional .pb.remote.RequestRateSong request_rate_song = 35;
    if (has_request_rate_song()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_rate_song_);
    }

    // optional .pb.remote.ResponseDownloadTotalSize response_download_total_size = 36;
    if (has_response_download_total_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_download_total_size_);
    }

    // optional .pb.remote.RequestGlobalSearch request_global_search = 37;
    if (has_request_global_search()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_global_search_);
    }

    // optional .pb.remote.ResponseGlobalSearch response_global_search = 38;
    if (has_response_global_search()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_global_search_);
    }

    // optional .pb.remote.ResponseTranscoderStatus response_transcoder_status = 39;
    if (has_response_transcoder_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_transcoder_status_);
    }

    // optional .pb.remote.ResponseGlobalSearchStatus response_global_search_status = 40;
    if (has_response_global_search_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_global_search_status_);
    }

    // optional .pb.remote.MsgType type = 2 [default = UNKNOWN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // optional int32 version = 1 [default = 21];
  if (has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.remote.Message)
  GOOGLE_DCHECK_NE(&from, this);
  const Message* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Message>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.remote.Message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.remote.Message)
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.remote.Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_request_playlist_songs()->::pb::remote::RequestPlaylistSongs::MergeFrom(from.request_playlist_songs());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_request_change_song()->::pb::remote::RequestChangeSong::MergeFrom(from.request_change_song());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_request_set_volume()->::pb::remote::RequestSetVolume::MergeFrom(from.request_set_volume());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_repeat()->::pb::remote::Repeat::MergeFrom(from.repeat());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_shuffle()->::pb::remote::Shuffle::MergeFrom(from.shuffle());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_response_clementine_info()->::pb::remote::ResponseClementineInfo::MergeFrom(from.response_clementine_info());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_response_current_metadata()->::pb::remote::ResponseCurrentMetadata::MergeFrom(from.response_current_metadata());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_response_playlists()->::pb::remote::ResponsePlaylists::MergeFrom(from.response_playlists());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_response_playlist_songs()->::pb::remote::ResponsePlaylistSongs::MergeFrom(from.response_playlist_songs());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_response_engine_state_changed()->::pb::remote::ResponseEngineStateChanged::MergeFrom(from.response_engine_state_changed());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_response_update_track_position()->::pb::remote::ResponseUpdateTrackPosition::MergeFrom(from.response_update_track_position());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_request_connect()->::pb::remote::RequestConnect::MergeFrom(from.request_connect());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_response_disconnect()->::pb::remote::ResponseDisconnect::MergeFrom(from.response_disconnect());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_request_set_track_position()->::pb::remote::RequestSetTrackPosition::MergeFrom(from.request_set_track_position());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_response_active_changed()->::pb::remote::ResponseActiveChanged::MergeFrom(from.response_active_changed());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_request_insert_urls()->::pb::remote::RequestInsertUrls::MergeFrom(from.request_insert_urls());
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_request_remove_songs()->::pb::remote::RequestRemoveSongs::MergeFrom(from.request_remove_songs());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_request_playlists()->::pb::remote::RequestPlaylists::MergeFrom(from.request_playlists());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_request_open_playlist()->::pb::remote::RequestOpenPlaylist::MergeFrom(from.request_open_playlist());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_request_close_playlist()->::pb::remote::RequestClosePlaylist::MergeFrom(from.request_close_playlist());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_response_lyrics()->::pb::remote::ResponseLyrics::MergeFrom(from.response_lyrics());
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_request_download_songs()->::pb::remote::RequestDownloadSongs::MergeFrom(from.request_download_songs());
    }
    if (cached_has_bits & 0x00400000u) {
      mutable_response_song_file_chunk()->::pb::remote::ResponseSongFileChunk::MergeFrom(from.response_song_file_chunk());
    }
    if (cached_has_bits & 0x00800000u) {
      mutable_response_song_offer()->::pb::remote::ResponseSongOffer::MergeFrom(from.response_song_offer());
    }
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      mutable_response_library_chunk()->::pb::remote::ResponseLibraryChunk::MergeFrom(from.response_library_chunk());
    }
    if (cached_has_bits & 0x02000000u) {
      mutable_request_rate_song()->::pb::remote::RequestRateSong::MergeFrom(from.request_rate_song());
    }
    if (cached_has_bits & 0x04000000u) {
      mutable_response_download_total_size()->::pb::remote::ResponseDownloadTotalSize::MergeFrom(from.response_download_total_size());
    }
    if (cached_has_bits & 0x08000000u) {
      mutable_request_global_search()->::pb::remote::RequestGlobalSearch::MergeFrom(from.request_global_search());
    }
    if (cached_has_bits & 0x10000000u) {
      mutable_response_global_search()->::pb::remote::ResponseGlobalSearch::MergeFrom(from.response_global_search());
    }
    if (cached_has_bits & 0x20000000u) {
      mutable_response_transcoder_status()->::pb::remote::ResponseTranscoderStatus::MergeFrom(from.response_transcoder_status());
    }
    if (cached_has_bits & 0x40000000u) {
      mutable_response_global_search_status()->::pb::remote::ResponseGlobalSearchStatus::MergeFrom(from.response_global_search_status());
    }
    if (cached_has_bits & 0x80000000u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (from.has_version()) {
    set_version(from.version());
  }
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.remote.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.remote.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::Swap(Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message::InternalSwap(Message* other) {
  using std::swap;
  swap(request_playlist_songs_, other->request_playlist_songs_);
  swap(request_change_song_, other->request_change_song_);
  swap(request_set_volume_, other->request_set_volume_);
  swap(repeat_, other->repeat_);
  swap(shuffle_, other->shuffle_);
  swap(response_clementine_info_, other->response_clementine_info_);
  swap(response_current_metadata_, other->response_current_metadata_);
  swap(response_playlists_, other->response_playlists_);
  swap(response_playlist_songs_, other->response_playlist_songs_);
  swap(response_engine_state_changed_, other->response_engine_state_changed_);
  swap(response_update_track_position_, other->response_update_track_position_);
  swap(request_connect_, other->request_connect_);
  swap(response_disconnect_, other->response_disconnect_);
  swap(request_set_track_position_, other->request_set_track_position_);
  swap(response_active_changed_, other->response_active_changed_);
  swap(request_insert_urls_, other->request_insert_urls_);
  swap(request_remove_songs_, other->request_remove_songs_);
  swap(request_playlists_, other->request_playlists_);
  swap(request_open_playlist_, other->request_open_playlist_);
  swap(request_close_playlist_, other->request_close_playlist_);
  swap(response_lyrics_, other->response_lyrics_);
  swap(request_download_songs_, other->request_download_songs_);
  swap(response_song_file_chunk_, other->response_song_file_chunk_);
  swap(response_song_offer_, other->response_song_offer_);
  swap(response_library_chunk_, other->response_library_chunk_);
  swap(request_rate_song_, other->request_rate_song_);
  swap(response_download_total_size_, other->response_download_total_size_);
  swap(request_global_search_, other->request_global_search_);
  swap(response_global_search_, other->response_global_search_);
  swap(response_transcoder_status_, other->response_transcoder_status_);
  swap(response_global_search_status_, other->response_global_search_status_);
  swap(type_, other->type_);
  swap(version_, other->version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_remotecontrolmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_remotecontrolmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace remote
}  // namespace pb
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::remote::RequestFiles* Arena::CreateMaybeMessage< ::pb::remote::RequestFiles >(Arena* arena) {
  return Arena::CreateInternal< ::pb::remote::RequestFiles >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::remote::Files* Arena::CreateMaybeMessage< ::pb::remote::Files >(Arena* arena) {
  return Arena::CreateInternal< ::pb::remote::Files >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::remote::SongMetadata* Arena::CreateMaybeMessage< ::pb::remote::SongMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::pb::remote::SongMetadata >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::remote::Playlist* Arena::CreateMaybeMessage< ::pb::remote::Playlist >(Arena* arena) {
  return Arena::CreateInternal< ::pb::remote::Playlist >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::remote::RequestPlaylists* Arena::CreateMaybeMessage< ::pb::remote::RequestPlaylists >(Arena* arena) {
  return Arena::CreateInternal< ::pb::remote::RequestPlaylists >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::remote::RequestPlaylistSongs* Arena::CreateMaybeMessage< ::pb::remote::RequestPlaylistSongs >(Arena* arena) {
  return Arena::CreateInternal< ::pb::remote::RequestPlaylistSongs >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::remote::RequestChangeSong* Arena::CreateMaybeMessage< ::pb::remote::RequestChangeSong >(Arena* arena) {
  return Arena::CreateInternal< ::pb::remote::RequestChangeSong >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::remote::RequestSetVolume* Arena::CreateMaybeMessage< ::pb::remote::RequestSetVolume >(Arena* arena) {
  return Arena::CreateInternal< ::pb::remote::RequestSetVolume >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::remote::Repeat* Arena::CreateMaybeMessage< ::pb::remote::Repeat >(Arena* arena) {
  return Arena::CreateInternal< ::pb::remote::Repeat >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::remote::Shuffle* Arena::CreateMaybeMessage< ::pb::remote::Shuffle >(Arena* arena) {
  return Arena::CreateInternal< ::pb::remote::Shuffle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::remote::ResponseClementineInfo* Arena::CreateMaybeMessage< ::pb::remote::ResponseClementineInfo >(Arena* arena) {
  return Arena::CreateInternal< ::pb::remote::ResponseClementineInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::remote::ResponseCurrentMetadata* Arena::CreateMaybeMessage< ::pb::remote::ResponseCurrentMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::pb::remote::ResponseCurrentMetadata >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::remote::ResponsePlaylists* Arena::CreateMaybeMessage< ::pb::remote::ResponsePlaylists >(Arena* arena) {
  return Arena::CreateInternal< ::pb::remote::ResponsePlaylists >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::remote::ResponsePlaylistSongs* Arena::CreateMaybeMessage< ::pb::remote::ResponsePlaylistSongs >(Arena* arena) {
  return Arena::CreateInternal< ::pb::remote::ResponsePlaylistSongs >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::remote::ResponseEngineStateChanged* Arena::CreateMaybeMessage< ::pb::remote::ResponseEngineStateChanged >(Arena* arena) {
  return Arena::CreateInternal< ::pb::remote::ResponseEngineStateChanged >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::remote::ResponseUpdateTrackPosition* Arena::CreateMaybeMessage< ::pb::remote::ResponseUpdateTrackPosition >(Arena* arena) {
  return Arena::CreateInternal< ::pb::remote::ResponseUpdateTrackPosition >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::remote::RequestConnect* Arena::CreateMaybeMessage< ::pb::remote::RequestConnect >(Arena* arena) {
  return Arena::CreateInternal< ::pb::remote::RequestConnect >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::remote::ResponseDisconnect* Arena::CreateMaybeMessage< ::pb::remote::ResponseDisconnect >(Arena* arena) {
  return Arena::CreateInternal< ::pb::remote::ResponseDisconnect >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::remote::ResponseActiveChanged* Arena::CreateMaybeMessage< ::pb::remote::ResponseActiveChanged >(Arena* arena) {
  return Arena::CreateInternal< ::pb::remote::ResponseActiveChanged >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::remote::RequestSetTrackPosition* Arena::CreateMaybeMessage< ::pb::remote::RequestSetTrackPosition >(Arena* arena) {
  return Arena::CreateInternal< ::pb::remote::RequestSetTrackPosition >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::remote::RequestInsertUrls* Arena::CreateMaybeMessage< ::pb::remote::RequestInsertUrls >(Arena* arena) {
  return Arena::CreateInternal< ::pb::remote::RequestInsertUrls >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::remote::RequestRemoveSongs* Arena::CreateMaybeMessage< ::pb::remote::RequestRemoveSongs >(Arena* arena) {
  return Arena::CreateInternal< ::pb::remote::RequestRemoveSongs >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::remote::RequestOpenPlaylist* Arena::CreateMaybeMessage< ::pb::remote::RequestOpenPlaylist >(Arena* arena) {
  return Arena::CreateInternal< ::pb::remote::RequestOpenPlaylist >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::remote::RequestClosePlaylist* Arena::CreateMaybeMessage< ::pb::remote::RequestClosePlaylist >(Arena* arena) {
  return Arena::CreateInternal< ::pb::remote::RequestClosePlaylist >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::remote::ResponseLyrics* Arena::CreateMaybeMessage< ::pb::remote::ResponseLyrics >(Arena* arena) {
  return Arena::CreateInternal< ::pb::remote::ResponseLyrics >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::remote::Lyric* Arena::CreateMaybeMessage< ::pb::remote::Lyric >(Arena* arena) {
  return Arena::CreateInternal< ::pb::remote::Lyric >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::remote::RequestDownloadSongs* Arena::CreateMaybeMessage< ::pb::remote::RequestDownloadSongs >(Arena* arena) {
  return Arena::CreateInternal< ::pb::remote::RequestDownloadSongs >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::remote::ResponseSongFileChunk* Arena::CreateMaybeMessage< ::pb::remote::ResponseSongFileChunk >(Arena* arena) {
  return Arena::CreateInternal< ::pb::remote::ResponseSongFileChunk >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::remote::ResponseLibraryChunk* Arena::CreateMaybeMessage< ::pb::remote::ResponseLibraryChunk >(Arena* arena) {
  return Arena::CreateInternal< ::pb::remote::ResponseLibraryChunk >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::remote::ResponseSongOffer* Arena::CreateMaybeMessage< ::pb::remote::ResponseSongOffer >(Arena* arena) {
  return Arena::CreateInternal< ::pb::remote::ResponseSongOffer >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::remote::RequestRateSong* Arena::CreateMaybeMessage< ::pb::remote::RequestRateSong >(Arena* arena) {
  return Arena::CreateInternal< ::pb::remote::RequestRateSong >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::remote::ResponseDownloadTotalSize* Arena::CreateMaybeMessage< ::pb::remote::ResponseDownloadTotalSize >(Arena* arena) {
  return Arena::CreateInternal< ::pb::remote::ResponseDownloadTotalSize >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::remote::RequestGlobalSearch* Arena::CreateMaybeMessage< ::pb::remote::RequestGlobalSearch >(Arena* arena) {
  return Arena::CreateInternal< ::pb::remote::RequestGlobalSearch >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::remote::ResponseGlobalSearch* Arena::CreateMaybeMessage< ::pb::remote::ResponseGlobalSearch >(Arena* arena) {
  return Arena::CreateInternal< ::pb::remote::ResponseGlobalSearch >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::remote::ResponseTranscoderStatus* Arena::CreateMaybeMessage< ::pb::remote::ResponseTranscoderStatus >(Arena* arena) {
  return Arena::CreateInternal< ::pb::remote::ResponseTranscoderStatus >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::remote::ResponseGlobalSearchStatus* Arena::CreateMaybeMessage< ::pb::remote::ResponseGlobalSearchStatus >(Arena* arena) {
  return Arena::CreateInternal< ::pb::remote::ResponseGlobalSearchStatus >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::remote::Message* Arena::CreateMaybeMessage< ::pb::remote::Message >(Arena* arena) {
  return Arena::CreateInternal< ::pb::remote::Message >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
