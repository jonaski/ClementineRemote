// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: remotecontrolmessages.proto

#ifndef PROTOBUF_remotecontrolmessages_2eproto__INCLUDED
#define PROTOBUF_remotecontrolmessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {
namespace remote {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_remotecontrolmessages_2eproto();
void protobuf_AssignDesc_remotecontrolmessages_2eproto();
void protobuf_ShutdownFile_remotecontrolmessages_2eproto();

class Files;
class Lyric;
class Message;
class Playlist;
class Repeat;
class RequestChangeSong;
class RequestClosePlaylist;
class RequestConnect;
class RequestDownloadSongs;
class RequestFiles;
class RequestGlobalSearch;
class RequestInsertUrls;
class RequestOpenPlaylist;
class RequestPlaylistSongs;
class RequestPlaylists;
class RequestRateSong;
class RequestRemoveSongs;
class RequestSetTrackPosition;
class RequestSetVolume;
class ResponseActiveChanged;
class ResponseClementineInfo;
class ResponseCurrentMetadata;
class ResponseDisconnect;
class ResponseDownloadTotalSize;
class ResponseEngineStateChanged;
class ResponseGlobalSearch;
class ResponseGlobalSearchStatus;
class ResponseLibraryChunk;
class ResponseLyrics;
class ResponsePlaylistSongs;
class ResponsePlaylists;
class ResponseSongFileChunk;
class ResponseSongOffer;
class ResponseTranscoderStatus;
class ResponseUpdateTrackPosition;
class Shuffle;
class SongMetadata;

enum SongMetadata_Type {
  SongMetadata_Type_UNKNOWN = 0,
  SongMetadata_Type_ASF = 1,
  SongMetadata_Type_FLAC = 2,
  SongMetadata_Type_MP4 = 3,
  SongMetadata_Type_MPC = 4,
  SongMetadata_Type_MPEG = 5,
  SongMetadata_Type_OGGFLAC = 6,
  SongMetadata_Type_OGGSPEEX = 7,
  SongMetadata_Type_OGGVORBIS = 8,
  SongMetadata_Type_AIFF = 9,
  SongMetadata_Type_WAV = 10,
  SongMetadata_Type_TRUEAUDIO = 11,
  SongMetadata_Type_CDDA = 12,
  SongMetadata_Type_OGGOPUS = 13,
  SongMetadata_Type_WAVPACK = 14,
  SongMetadata_Type_SPC = 15,
  SongMetadata_Type_VGM = 16,
  SongMetadata_Type_APE = 17,
  SongMetadata_Type_STREAM = 99
};
bool SongMetadata_Type_IsValid(int value);
const SongMetadata_Type SongMetadata_Type_Type_MIN = SongMetadata_Type_UNKNOWN;
const SongMetadata_Type SongMetadata_Type_Type_MAX = SongMetadata_Type_STREAM;
const int SongMetadata_Type_Type_ARRAYSIZE = SongMetadata_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* SongMetadata_Type_descriptor();
inline const ::std::string& SongMetadata_Type_Name(SongMetadata_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    SongMetadata_Type_descriptor(), value);
}
inline bool SongMetadata_Type_Parse(
    const ::std::string& name, SongMetadata_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SongMetadata_Type>(
    SongMetadata_Type_descriptor(), name, value);
}
enum MsgType {
  UNKNOWN = 0,
  CONNECT = 1,
  REQUEST_PLAYLISTS = 3,
  REQUEST_PLAYLIST_SONGS = 4,
  CHANGE_SONG = 5,
  SET_VOLUME = 6,
  SET_TRACK_POSITION = 7,
  INSERT_URLS = 8,
  REMOVE_SONGS = 9,
  OPEN_PLAYLIST = 10,
  CLOSE_PLAYLIST = 11,
  GET_LYRICS = 14,
  DOWNLOAD_SONGS = 15,
  SONG_OFFER_RESPONSE = 16,
  LOVE = 12,
  BAN = 13,
  STOP_AFTER = 17,
  GET_LIBRARY = 18,
  RATE_SONG = 19,
  GLOBAL_SEARCH = 100,
  GET_FILES = 200,
  APPEND_FILES = 201,
  DISCONNECT = 2,
  PLAY = 20,
  PLAYPAUSE = 21,
  PAUSE = 22,
  STOP = 23,
  NEXT = 24,
  PREVIOUS = 25,
  SHUFFLE_PLAYLIST = 26,
  REPEAT = 27,
  SHUFFLE = 28,
  INFO = 40,
  CURRENT_METAINFO = 41,
  PLAYLISTS = 42,
  PLAYLIST_SONGS = 43,
  ENGINE_STATE_CHANGED = 44,
  KEEP_ALIVE = 45,
  UPDATE_TRACK_POSITION = 46,
  ACTIVE_PLAYLIST_CHANGED = 47,
  FIRST_DATA_SENT_COMPLETE = 48,
  LYRICS = 49,
  SONG_FILE_CHUNK = 50,
  DOWNLOAD_QUEUE_EMPTY = 51,
  LIBRARY_CHUNK = 52,
  DOWNLOAD_TOTAL_SIZE = 53,
  GLOBAL_SEARCH_RESULT = 54,
  TRANSCODING_FILES = 55,
  GLOBAL_SEARCH_STATUS = 56,
  FILES_LIST = 202
};
bool MsgType_IsValid(int value);
const MsgType MsgType_MIN = UNKNOWN;
const MsgType MsgType_MAX = FILES_LIST;
const int MsgType_ARRAYSIZE = MsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgType_descriptor();
inline const ::std::string& MsgType_Name(MsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgType_descriptor(), value);
}
inline bool MsgType_Parse(
    const ::std::string& name, MsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgType>(
    MsgType_descriptor(), name, value);
}
enum EngineState {
  Empty = 0,
  Idle = 1,
  Playing = 2,
  Paused = 3
};
bool EngineState_IsValid(int value);
const EngineState EngineState_MIN = Empty;
const EngineState EngineState_MAX = Paused;
const int EngineState_ARRAYSIZE = EngineState_MAX + 1;

const ::google::protobuf::EnumDescriptor* EngineState_descriptor();
inline const ::std::string& EngineState_Name(EngineState value) {
  return ::google::protobuf::internal::NameOfEnum(
    EngineState_descriptor(), value);
}
inline bool EngineState_Parse(
    const ::std::string& name, EngineState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EngineState>(
    EngineState_descriptor(), name, value);
}
enum RepeatMode {
  Repeat_Off = 0,
  Repeat_Track = 1,
  Repeat_Album = 2,
  Repeat_Playlist = 3,
  Repeat_OneByOne = 4,
  Repeat_Intro = 5
};
bool RepeatMode_IsValid(int value);
const RepeatMode RepeatMode_MIN = Repeat_Off;
const RepeatMode RepeatMode_MAX = Repeat_Intro;
const int RepeatMode_ARRAYSIZE = RepeatMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* RepeatMode_descriptor();
inline const ::std::string& RepeatMode_Name(RepeatMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    RepeatMode_descriptor(), value);
}
inline bool RepeatMode_Parse(
    const ::std::string& name, RepeatMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RepeatMode>(
    RepeatMode_descriptor(), name, value);
}
enum ShuffleMode {
  Shuffle_Off = 0,
  Shuffle_All = 1,
  Shuffle_InsideAlbum = 2,
  Shuffle_Albums = 3
};
bool ShuffleMode_IsValid(int value);
const ShuffleMode ShuffleMode_MIN = Shuffle_Off;
const ShuffleMode ShuffleMode_MAX = Shuffle_Albums;
const int ShuffleMode_ARRAYSIZE = ShuffleMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ShuffleMode_descriptor();
inline const ::std::string& ShuffleMode_Name(ShuffleMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ShuffleMode_descriptor(), value);
}
inline bool ShuffleMode_Parse(
    const ::std::string& name, ShuffleMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ShuffleMode>(
    ShuffleMode_descriptor(), name, value);
}
enum ReasonDisconnect {
  Server_Shutdown = 1,
  Wrong_Auth_Code = 2,
  Not_Authenticated = 3,
  Download_Forbidden = 4
};
bool ReasonDisconnect_IsValid(int value);
const ReasonDisconnect ReasonDisconnect_MIN = Server_Shutdown;
const ReasonDisconnect ReasonDisconnect_MAX = Download_Forbidden;
const int ReasonDisconnect_ARRAYSIZE = ReasonDisconnect_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReasonDisconnect_descriptor();
inline const ::std::string& ReasonDisconnect_Name(ReasonDisconnect value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReasonDisconnect_descriptor(), value);
}
inline bool ReasonDisconnect_Parse(
    const ::std::string& name, ReasonDisconnect* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReasonDisconnect>(
    ReasonDisconnect_descriptor(), name, value);
}
enum DownloadItem {
  CurrentItem = 1,
  ItemAlbum = 2,
  APlaylist = 3,
  Urls = 4
};
bool DownloadItem_IsValid(int value);
const DownloadItem DownloadItem_MIN = CurrentItem;
const DownloadItem DownloadItem_MAX = Urls;
const int DownloadItem_ARRAYSIZE = DownloadItem_MAX + 1;

const ::google::protobuf::EnumDescriptor* DownloadItem_descriptor();
inline const ::std::string& DownloadItem_Name(DownloadItem value) {
  return ::google::protobuf::internal::NameOfEnum(
    DownloadItem_descriptor(), value);
}
inline bool DownloadItem_Parse(
    const ::std::string& name, DownloadItem* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DownloadItem>(
    DownloadItem_descriptor(), name, value);
}
enum GlobalSearchStatus {
  GlobalSearchStarted = 1,
  GlobalSearchFinished = 2
};
bool GlobalSearchStatus_IsValid(int value);
const GlobalSearchStatus GlobalSearchStatus_MIN = GlobalSearchStarted;
const GlobalSearchStatus GlobalSearchStatus_MAX = GlobalSearchFinished;
const int GlobalSearchStatus_ARRAYSIZE = GlobalSearchStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* GlobalSearchStatus_descriptor();
inline const ::std::string& GlobalSearchStatus_Name(GlobalSearchStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    GlobalSearchStatus_descriptor(), value);
}
inline bool GlobalSearchStatus_Parse(
    const ::std::string& name, GlobalSearchStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GlobalSearchStatus>(
    GlobalSearchStatus_descriptor(), name, value);
}
// ===================================================================

class RequestFiles : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.remote.RequestFiles) */ {
 public:
  RequestFiles();
  virtual ~RequestFiles();

  RequestFiles(const RequestFiles& from);

  inline RequestFiles& operator=(const RequestFiles& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestFiles& default_instance();

  void Swap(RequestFiles* other);

  // implements Message ----------------------------------------------

  inline RequestFiles* New() const { return New(NULL); }

  RequestFiles* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestFiles& from);
  void MergeFrom(const RequestFiles& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RequestFiles* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string relativePath = 1;
  bool has_relativepath() const;
  void clear_relativepath();
  static const int kRelativePathFieldNumber = 1;
  const ::std::string& relativepath() const;
  void set_relativepath(const ::std::string& value);
  void set_relativepath(const char* value);
  void set_relativepath(const char* value, size_t size);
  ::std::string* mutable_relativepath();
  ::std::string* release_relativepath();
  void set_allocated_relativepath(::std::string* relativepath);

  // @@protoc_insertion_point(class_scope:pb.remote.RequestFiles)
 private:
  inline void set_has_relativepath();
  inline void clear_has_relativepath();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr relativepath_;
  friend void  protobuf_AddDesc_remotecontrolmessages_2eproto();
  friend void protobuf_AssignDesc_remotecontrolmessages_2eproto();
  friend void protobuf_ShutdownFile_remotecontrolmessages_2eproto();

  void InitAsDefaultInstance();
  static RequestFiles* default_instance_;
};
// -------------------------------------------------------------------

class Files : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.remote.Files) */ {
 public:
  Files();
  virtual ~Files();

  Files(const Files& from);

  inline Files& operator=(const Files& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Files& default_instance();

  void Swap(Files* other);

  // implements Message ----------------------------------------------

  inline Files* New() const { return New(NULL); }

  Files* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Files& from);
  void MergeFrom(const Files& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Files* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string relativePath = 1;
  bool has_relativepath() const;
  void clear_relativepath();
  static const int kRelativePathFieldNumber = 1;
  const ::std::string& relativepath() const;
  void set_relativepath(const ::std::string& value);
  void set_relativepath(const char* value);
  void set_relativepath(const char* value, size_t size);
  ::std::string* mutable_relativepath();
  ::std::string* release_relativepath();
  void set_allocated_relativepath(::std::string* relativepath);

  // repeated string file = 2;
  int file_size() const;
  void clear_file();
  static const int kFileFieldNumber = 2;
  const ::std::string& file(int index) const;
  ::std::string* mutable_file(int index);
  void set_file(int index, const ::std::string& value);
  void set_file(int index, const char* value);
  void set_file(int index, const char* value, size_t size);
  ::std::string* add_file();
  void add_file(const ::std::string& value);
  void add_file(const char* value);
  void add_file(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& file() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_file();

  // @@protoc_insertion_point(class_scope:pb.remote.Files)
 private:
  inline void set_has_relativepath();
  inline void clear_has_relativepath();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr relativepath_;
  ::google::protobuf::RepeatedPtrField< ::std::string> file_;
  friend void  protobuf_AddDesc_remotecontrolmessages_2eproto();
  friend void protobuf_AssignDesc_remotecontrolmessages_2eproto();
  friend void protobuf_ShutdownFile_remotecontrolmessages_2eproto();

  void InitAsDefaultInstance();
  static Files* default_instance_;
};
// -------------------------------------------------------------------

class SongMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.remote.SongMetadata) */ {
 public:
  SongMetadata();
  virtual ~SongMetadata();

  SongMetadata(const SongMetadata& from);

  inline SongMetadata& operator=(const SongMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SongMetadata& default_instance();

  void Swap(SongMetadata* other);

  // implements Message ----------------------------------------------

  inline SongMetadata* New() const { return New(NULL); }

  SongMetadata* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SongMetadata& from);
  void MergeFrom(const SongMetadata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SongMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SongMetadata_Type Type;
  static const Type UNKNOWN =
    SongMetadata_Type_UNKNOWN;
  static const Type ASF =
    SongMetadata_Type_ASF;
  static const Type FLAC =
    SongMetadata_Type_FLAC;
  static const Type MP4 =
    SongMetadata_Type_MP4;
  static const Type MPC =
    SongMetadata_Type_MPC;
  static const Type MPEG =
    SongMetadata_Type_MPEG;
  static const Type OGGFLAC =
    SongMetadata_Type_OGGFLAC;
  static const Type OGGSPEEX =
    SongMetadata_Type_OGGSPEEX;
  static const Type OGGVORBIS =
    SongMetadata_Type_OGGVORBIS;
  static const Type AIFF =
    SongMetadata_Type_AIFF;
  static const Type WAV =
    SongMetadata_Type_WAV;
  static const Type TRUEAUDIO =
    SongMetadata_Type_TRUEAUDIO;
  static const Type CDDA =
    SongMetadata_Type_CDDA;
  static const Type OGGOPUS =
    SongMetadata_Type_OGGOPUS;
  static const Type WAVPACK =
    SongMetadata_Type_WAVPACK;
  static const Type SPC =
    SongMetadata_Type_SPC;
  static const Type VGM =
    SongMetadata_Type_VGM;
  static const Type APE =
    SongMetadata_Type_APE;
  static const Type STREAM =
    SongMetadata_Type_STREAM;
  static inline bool Type_IsValid(int value) {
    return SongMetadata_Type_IsValid(value);
  }
  static const Type Type_MIN =
    SongMetadata_Type_Type_MIN;
  static const Type Type_MAX =
    SongMetadata_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    SongMetadata_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return SongMetadata_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return SongMetadata_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return SongMetadata_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional int32 index = 2;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 2;
  ::google::protobuf::int32 index() const;
  void set_index(::google::protobuf::int32 value);

  // optional string title = 3;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 3;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string album = 4;
  bool has_album() const;
  void clear_album();
  static const int kAlbumFieldNumber = 4;
  const ::std::string& album() const;
  void set_album(const ::std::string& value);
  void set_album(const char* value);
  void set_album(const char* value, size_t size);
  ::std::string* mutable_album();
  ::std::string* release_album();
  void set_allocated_album(::std::string* album);

  // optional string artist = 5;
  bool has_artist() const;
  void clear_artist();
  static const int kArtistFieldNumber = 5;
  const ::std::string& artist() const;
  void set_artist(const ::std::string& value);
  void set_artist(const char* value);
  void set_artist(const char* value, size_t size);
  ::std::string* mutable_artist();
  ::std::string* release_artist();
  void set_allocated_artist(::std::string* artist);

  // optional string albumartist = 6;
  bool has_albumartist() const;
  void clear_albumartist();
  static const int kAlbumartistFieldNumber = 6;
  const ::std::string& albumartist() const;
  void set_albumartist(const ::std::string& value);
  void set_albumartist(const char* value);
  void set_albumartist(const char* value, size_t size);
  ::std::string* mutable_albumartist();
  ::std::string* release_albumartist();
  void set_allocated_albumartist(::std::string* albumartist);

  // optional int32 track = 7;
  bool has_track() const;
  void clear_track();
  static const int kTrackFieldNumber = 7;
  ::google::protobuf::int32 track() const;
  void set_track(::google::protobuf::int32 value);

  // optional int32 disc = 8;
  bool has_disc() const;
  void clear_disc();
  static const int kDiscFieldNumber = 8;
  ::google::protobuf::int32 disc() const;
  void set_disc(::google::protobuf::int32 value);

  // optional string pretty_year = 9;
  bool has_pretty_year() const;
  void clear_pretty_year();
  static const int kPrettyYearFieldNumber = 9;
  const ::std::string& pretty_year() const;
  void set_pretty_year(const ::std::string& value);
  void set_pretty_year(const char* value);
  void set_pretty_year(const char* value, size_t size);
  ::std::string* mutable_pretty_year();
  ::std::string* release_pretty_year();
  void set_allocated_pretty_year(::std::string* pretty_year);

  // optional string genre = 10;
  bool has_genre() const;
  void clear_genre();
  static const int kGenreFieldNumber = 10;
  const ::std::string& genre() const;
  void set_genre(const ::std::string& value);
  void set_genre(const char* value);
  void set_genre(const char* value, size_t size);
  ::std::string* mutable_genre();
  ::std::string* release_genre();
  void set_allocated_genre(::std::string* genre);

  // optional int32 playcount = 11;
  bool has_playcount() const;
  void clear_playcount();
  static const int kPlaycountFieldNumber = 11;
  ::google::protobuf::int32 playcount() const;
  void set_playcount(::google::protobuf::int32 value);

  // optional string pretty_length = 12;
  bool has_pretty_length() const;
  void clear_pretty_length();
  static const int kPrettyLengthFieldNumber = 12;
  const ::std::string& pretty_length() const;
  void set_pretty_length(const ::std::string& value);
  void set_pretty_length(const char* value);
  void set_pretty_length(const char* value, size_t size);
  ::std::string* mutable_pretty_length();
  ::std::string* release_pretty_length();
  void set_allocated_pretty_length(::std::string* pretty_length);

  // optional bytes art = 13;
  bool has_art() const;
  void clear_art();
  static const int kArtFieldNumber = 13;
  const ::std::string& art() const;
  void set_art(const ::std::string& value);
  void set_art(const char* value);
  void set_art(const void* value, size_t size);
  ::std::string* mutable_art();
  ::std::string* release_art();
  void set_allocated_art(::std::string* art);

  // optional int32 length = 14;
  bool has_length() const;
  void clear_length();
  static const int kLengthFieldNumber = 14;
  ::google::protobuf::int32 length() const;
  void set_length(::google::protobuf::int32 value);

  // optional bool is_local = 15;
  bool has_is_local() const;
  void clear_is_local();
  static const int kIsLocalFieldNumber = 15;
  bool is_local() const;
  void set_is_local(bool value);

  // optional string filename = 16;
  bool has_filename() const;
  void clear_filename();
  static const int kFilenameFieldNumber = 16;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // optional int32 file_size = 17;
  bool has_file_size() const;
  void clear_file_size();
  static const int kFileSizeFieldNumber = 17;
  ::google::protobuf::int32 file_size() const;
  void set_file_size(::google::protobuf::int32 value);

  // optional float rating = 18;
  bool has_rating() const;
  void clear_rating();
  static const int kRatingFieldNumber = 18;
  float rating() const;
  void set_rating(float value);

  // optional string url = 19;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 19;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional string art_automatic = 20;
  bool has_art_automatic() const;
  void clear_art_automatic();
  static const int kArtAutomaticFieldNumber = 20;
  const ::std::string& art_automatic() const;
  void set_art_automatic(const ::std::string& value);
  void set_art_automatic(const char* value);
  void set_art_automatic(const char* value, size_t size);
  ::std::string* mutable_art_automatic();
  ::std::string* release_art_automatic();
  void set_allocated_art_automatic(::std::string* art_automatic);

  // optional string art_manual = 21;
  bool has_art_manual() const;
  void clear_art_manual();
  static const int kArtManualFieldNumber = 21;
  const ::std::string& art_manual() const;
  void set_art_manual(const ::std::string& value);
  void set_art_manual(const char* value);
  void set_art_manual(const char* value, size_t size);
  ::std::string* mutable_art_manual();
  ::std::string* release_art_manual();
  void set_allocated_art_manual(::std::string* art_manual);

  // optional .pb.remote.SongMetadata.Type type = 22;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 22;
  ::pb::remote::SongMetadata_Type type() const;
  void set_type(::pb::remote::SongMetadata_Type value);

  // @@protoc_insertion_point(class_scope:pb.remote.SongMetadata)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_album();
  inline void clear_has_album();
  inline void set_has_artist();
  inline void clear_has_artist();
  inline void set_has_albumartist();
  inline void clear_has_albumartist();
  inline void set_has_track();
  inline void clear_has_track();
  inline void set_has_disc();
  inline void clear_has_disc();
  inline void set_has_pretty_year();
  inline void clear_has_pretty_year();
  inline void set_has_genre();
  inline void clear_has_genre();
  inline void set_has_playcount();
  inline void clear_has_playcount();
  inline void set_has_pretty_length();
  inline void clear_has_pretty_length();
  inline void set_has_art();
  inline void clear_has_art();
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_is_local();
  inline void clear_has_is_local();
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_file_size();
  inline void clear_has_file_size();
  inline void set_has_rating();
  inline void clear_has_rating();
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_art_automatic();
  inline void clear_has_art_automatic();
  inline void set_has_art_manual();
  inline void clear_has_art_manual();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr album_;
  ::google::protobuf::internal::ArenaStringPtr artist_;
  ::google::protobuf::internal::ArenaStringPtr albumartist_;
  ::google::protobuf::int32 track_;
  ::google::protobuf::int32 disc_;
  ::google::protobuf::internal::ArenaStringPtr pretty_year_;
  ::google::protobuf::internal::ArenaStringPtr genre_;
  ::google::protobuf::internal::ArenaStringPtr pretty_length_;
  ::google::protobuf::int32 playcount_;
  ::google::protobuf::int32 length_;
  ::google::protobuf::internal::ArenaStringPtr art_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  bool is_local_;
  ::google::protobuf::int32 file_size_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr art_automatic_;
  float rating_;
  int type_;
  ::google::protobuf::internal::ArenaStringPtr art_manual_;
  friend void  protobuf_AddDesc_remotecontrolmessages_2eproto();
  friend void protobuf_AssignDesc_remotecontrolmessages_2eproto();
  friend void protobuf_ShutdownFile_remotecontrolmessages_2eproto();

  void InitAsDefaultInstance();
  static SongMetadata* default_instance_;
};
// -------------------------------------------------------------------

class Playlist : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.remote.Playlist) */ {
 public:
  Playlist();
  virtual ~Playlist();

  Playlist(const Playlist& from);

  inline Playlist& operator=(const Playlist& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Playlist& default_instance();

  void Swap(Playlist* other);

  // implements Message ----------------------------------------------

  inline Playlist* New() const { return New(NULL); }

  Playlist* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Playlist& from);
  void MergeFrom(const Playlist& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Playlist* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional int32 item_count = 3;
  bool has_item_count() const;
  void clear_item_count();
  static const int kItemCountFieldNumber = 3;
  ::google::protobuf::int32 item_count() const;
  void set_item_count(::google::protobuf::int32 value);

  // optional bool active = 4;
  bool has_active() const;
  void clear_active();
  static const int kActiveFieldNumber = 4;
  bool active() const;
  void set_active(bool value);

  // optional bool closed = 5;
  bool has_closed() const;
  void clear_closed();
  static const int kClosedFieldNumber = 5;
  bool closed() const;
  void set_closed(bool value);

  // @@protoc_insertion_point(class_scope:pb.remote.Playlist)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_item_count();
  inline void clear_has_item_count();
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_closed();
  inline void clear_has_closed();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 item_count_;
  bool active_;
  bool closed_;
  friend void  protobuf_AddDesc_remotecontrolmessages_2eproto();
  friend void protobuf_AssignDesc_remotecontrolmessages_2eproto();
  friend void protobuf_ShutdownFile_remotecontrolmessages_2eproto();

  void InitAsDefaultInstance();
  static Playlist* default_instance_;
};
// -------------------------------------------------------------------

class RequestPlaylists : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.remote.RequestPlaylists) */ {
 public:
  RequestPlaylists();
  virtual ~RequestPlaylists();

  RequestPlaylists(const RequestPlaylists& from);

  inline RequestPlaylists& operator=(const RequestPlaylists& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestPlaylists& default_instance();

  void Swap(RequestPlaylists* other);

  // implements Message ----------------------------------------------

  inline RequestPlaylists* New() const { return New(NULL); }

  RequestPlaylists* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestPlaylists& from);
  void MergeFrom(const RequestPlaylists& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RequestPlaylists* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool include_closed = 1;
  bool has_include_closed() const;
  void clear_include_closed();
  static const int kIncludeClosedFieldNumber = 1;
  bool include_closed() const;
  void set_include_closed(bool value);

  // @@protoc_insertion_point(class_scope:pb.remote.RequestPlaylists)
 private:
  inline void set_has_include_closed();
  inline void clear_has_include_closed();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool include_closed_;
  friend void  protobuf_AddDesc_remotecontrolmessages_2eproto();
  friend void protobuf_AssignDesc_remotecontrolmessages_2eproto();
  friend void protobuf_ShutdownFile_remotecontrolmessages_2eproto();

  void InitAsDefaultInstance();
  static RequestPlaylists* default_instance_;
};
// -------------------------------------------------------------------

class RequestPlaylistSongs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.remote.RequestPlaylistSongs) */ {
 public:
  RequestPlaylistSongs();
  virtual ~RequestPlaylistSongs();

  RequestPlaylistSongs(const RequestPlaylistSongs& from);

  inline RequestPlaylistSongs& operator=(const RequestPlaylistSongs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestPlaylistSongs& default_instance();

  void Swap(RequestPlaylistSongs* other);

  // implements Message ----------------------------------------------

  inline RequestPlaylistSongs* New() const { return New(NULL); }

  RequestPlaylistSongs* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestPlaylistSongs& from);
  void MergeFrom(const RequestPlaylistSongs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RequestPlaylistSongs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.remote.RequestPlaylistSongs)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_remotecontrolmessages_2eproto();
  friend void protobuf_AssignDesc_remotecontrolmessages_2eproto();
  friend void protobuf_ShutdownFile_remotecontrolmessages_2eproto();

  void InitAsDefaultInstance();
  static RequestPlaylistSongs* default_instance_;
};
// -------------------------------------------------------------------

class RequestChangeSong : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.remote.RequestChangeSong) */ {
 public:
  RequestChangeSong();
  virtual ~RequestChangeSong();

  RequestChangeSong(const RequestChangeSong& from);

  inline RequestChangeSong& operator=(const RequestChangeSong& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestChangeSong& default_instance();

  void Swap(RequestChangeSong* other);

  // implements Message ----------------------------------------------

  inline RequestChangeSong* New() const { return New(NULL); }

  RequestChangeSong* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestChangeSong& from);
  void MergeFrom(const RequestChangeSong& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RequestChangeSong* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 playlist_id = 1;
  bool has_playlist_id() const;
  void clear_playlist_id();
  static const int kPlaylistIdFieldNumber = 1;
  ::google::protobuf::int32 playlist_id() const;
  void set_playlist_id(::google::protobuf::int32 value);

  // optional int32 song_index = 2;
  bool has_song_index() const;
  void clear_song_index();
  static const int kSongIndexFieldNumber = 2;
  ::google::protobuf::int32 song_index() const;
  void set_song_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.remote.RequestChangeSong)
 private:
  inline void set_has_playlist_id();
  inline void clear_has_playlist_id();
  inline void set_has_song_index();
  inline void clear_has_song_index();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 playlist_id_;
  ::google::protobuf::int32 song_index_;
  friend void  protobuf_AddDesc_remotecontrolmessages_2eproto();
  friend void protobuf_AssignDesc_remotecontrolmessages_2eproto();
  friend void protobuf_ShutdownFile_remotecontrolmessages_2eproto();

  void InitAsDefaultInstance();
  static RequestChangeSong* default_instance_;
};
// -------------------------------------------------------------------

class RequestSetVolume : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.remote.RequestSetVolume) */ {
 public:
  RequestSetVolume();
  virtual ~RequestSetVolume();

  RequestSetVolume(const RequestSetVolume& from);

  inline RequestSetVolume& operator=(const RequestSetVolume& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestSetVolume& default_instance();

  void Swap(RequestSetVolume* other);

  // implements Message ----------------------------------------------

  inline RequestSetVolume* New() const { return New(NULL); }

  RequestSetVolume* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestSetVolume& from);
  void MergeFrom(const RequestSetVolume& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RequestSetVolume* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 volume = 1;
  bool has_volume() const;
  void clear_volume();
  static const int kVolumeFieldNumber = 1;
  ::google::protobuf::int32 volume() const;
  void set_volume(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.remote.RequestSetVolume)
 private:
  inline void set_has_volume();
  inline void clear_has_volume();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 volume_;
  friend void  protobuf_AddDesc_remotecontrolmessages_2eproto();
  friend void protobuf_AssignDesc_remotecontrolmessages_2eproto();
  friend void protobuf_ShutdownFile_remotecontrolmessages_2eproto();

  void InitAsDefaultInstance();
  static RequestSetVolume* default_instance_;
};
// -------------------------------------------------------------------

class Repeat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.remote.Repeat) */ {
 public:
  Repeat();
  virtual ~Repeat();

  Repeat(const Repeat& from);

  inline Repeat& operator=(const Repeat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Repeat& default_instance();

  void Swap(Repeat* other);

  // implements Message ----------------------------------------------

  inline Repeat* New() const { return New(NULL); }

  Repeat* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Repeat& from);
  void MergeFrom(const Repeat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Repeat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.remote.RepeatMode repeat_mode = 1;
  bool has_repeat_mode() const;
  void clear_repeat_mode();
  static const int kRepeatModeFieldNumber = 1;
  ::pb::remote::RepeatMode repeat_mode() const;
  void set_repeat_mode(::pb::remote::RepeatMode value);

  // @@protoc_insertion_point(class_scope:pb.remote.Repeat)
 private:
  inline void set_has_repeat_mode();
  inline void clear_has_repeat_mode();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int repeat_mode_;
  friend void  protobuf_AddDesc_remotecontrolmessages_2eproto();
  friend void protobuf_AssignDesc_remotecontrolmessages_2eproto();
  friend void protobuf_ShutdownFile_remotecontrolmessages_2eproto();

  void InitAsDefaultInstance();
  static Repeat* default_instance_;
};
// -------------------------------------------------------------------

class Shuffle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.remote.Shuffle) */ {
 public:
  Shuffle();
  virtual ~Shuffle();

  Shuffle(const Shuffle& from);

  inline Shuffle& operator=(const Shuffle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Shuffle& default_instance();

  void Swap(Shuffle* other);

  // implements Message ----------------------------------------------

  inline Shuffle* New() const { return New(NULL); }

  Shuffle* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Shuffle& from);
  void MergeFrom(const Shuffle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Shuffle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.remote.ShuffleMode shuffle_mode = 1;
  bool has_shuffle_mode() const;
  void clear_shuffle_mode();
  static const int kShuffleModeFieldNumber = 1;
  ::pb::remote::ShuffleMode shuffle_mode() const;
  void set_shuffle_mode(::pb::remote::ShuffleMode value);

  // @@protoc_insertion_point(class_scope:pb.remote.Shuffle)
 private:
  inline void set_has_shuffle_mode();
  inline void clear_has_shuffle_mode();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int shuffle_mode_;
  friend void  protobuf_AddDesc_remotecontrolmessages_2eproto();
  friend void protobuf_AssignDesc_remotecontrolmessages_2eproto();
  friend void protobuf_ShutdownFile_remotecontrolmessages_2eproto();

  void InitAsDefaultInstance();
  static Shuffle* default_instance_;
};
// -------------------------------------------------------------------

class ResponseClementineInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.remote.ResponseClementineInfo) */ {
 public:
  ResponseClementineInfo();
  virtual ~ResponseClementineInfo();

  ResponseClementineInfo(const ResponseClementineInfo& from);

  inline ResponseClementineInfo& operator=(const ResponseClementineInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseClementineInfo& default_instance();

  void Swap(ResponseClementineInfo* other);

  // implements Message ----------------------------------------------

  inline ResponseClementineInfo* New() const { return New(NULL); }

  ResponseClementineInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponseClementineInfo& from);
  void MergeFrom(const ResponseClementineInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResponseClementineInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // optional .pb.remote.EngineState state = 2;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 2;
  ::pb::remote::EngineState state() const;
  void set_state(::pb::remote::EngineState value);

  // @@protoc_insertion_point(class_scope:pb.remote.ResponseClementineInfo)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  int state_;
  friend void  protobuf_AddDesc_remotecontrolmessages_2eproto();
  friend void protobuf_AssignDesc_remotecontrolmessages_2eproto();
  friend void protobuf_ShutdownFile_remotecontrolmessages_2eproto();

  void InitAsDefaultInstance();
  static ResponseClementineInfo* default_instance_;
};
// -------------------------------------------------------------------

class ResponseCurrentMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.remote.ResponseCurrentMetadata) */ {
 public:
  ResponseCurrentMetadata();
  virtual ~ResponseCurrentMetadata();

  ResponseCurrentMetadata(const ResponseCurrentMetadata& from);

  inline ResponseCurrentMetadata& operator=(const ResponseCurrentMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseCurrentMetadata& default_instance();

  void Swap(ResponseCurrentMetadata* other);

  // implements Message ----------------------------------------------

  inline ResponseCurrentMetadata* New() const { return New(NULL); }

  ResponseCurrentMetadata* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponseCurrentMetadata& from);
  void MergeFrom(const ResponseCurrentMetadata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResponseCurrentMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.remote.SongMetadata song_metadata = 1;
  bool has_song_metadata() const;
  void clear_song_metadata();
  static const int kSongMetadataFieldNumber = 1;
  const ::pb::remote::SongMetadata& song_metadata() const;
  ::pb::remote::SongMetadata* mutable_song_metadata();
  ::pb::remote::SongMetadata* release_song_metadata();
  void set_allocated_song_metadata(::pb::remote::SongMetadata* song_metadata);

  // @@protoc_insertion_point(class_scope:pb.remote.ResponseCurrentMetadata)
 private:
  inline void set_has_song_metadata();
  inline void clear_has_song_metadata();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::remote::SongMetadata* song_metadata_;
  friend void  protobuf_AddDesc_remotecontrolmessages_2eproto();
  friend void protobuf_AssignDesc_remotecontrolmessages_2eproto();
  friend void protobuf_ShutdownFile_remotecontrolmessages_2eproto();

  void InitAsDefaultInstance();
  static ResponseCurrentMetadata* default_instance_;
};
// -------------------------------------------------------------------

class ResponsePlaylists : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.remote.ResponsePlaylists) */ {
 public:
  ResponsePlaylists();
  virtual ~ResponsePlaylists();

  ResponsePlaylists(const ResponsePlaylists& from);

  inline ResponsePlaylists& operator=(const ResponsePlaylists& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponsePlaylists& default_instance();

  void Swap(ResponsePlaylists* other);

  // implements Message ----------------------------------------------

  inline ResponsePlaylists* New() const { return New(NULL); }

  ResponsePlaylists* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponsePlaylists& from);
  void MergeFrom(const ResponsePlaylists& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResponsePlaylists* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.remote.Playlist playlist = 1;
  int playlist_size() const;
  void clear_playlist();
  static const int kPlaylistFieldNumber = 1;
  const ::pb::remote::Playlist& playlist(int index) const;
  ::pb::remote::Playlist* mutable_playlist(int index);
  ::pb::remote::Playlist* add_playlist();
  ::google::protobuf::RepeatedPtrField< ::pb::remote::Playlist >*
      mutable_playlist();
  const ::google::protobuf::RepeatedPtrField< ::pb::remote::Playlist >&
      playlist() const;

  // @@protoc_insertion_point(class_scope:pb.remote.ResponsePlaylists)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::remote::Playlist > playlist_;
  friend void  protobuf_AddDesc_remotecontrolmessages_2eproto();
  friend void protobuf_AssignDesc_remotecontrolmessages_2eproto();
  friend void protobuf_ShutdownFile_remotecontrolmessages_2eproto();

  void InitAsDefaultInstance();
  static ResponsePlaylists* default_instance_;
};
// -------------------------------------------------------------------

class ResponsePlaylistSongs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.remote.ResponsePlaylistSongs) */ {
 public:
  ResponsePlaylistSongs();
  virtual ~ResponsePlaylistSongs();

  ResponsePlaylistSongs(const ResponsePlaylistSongs& from);

  inline ResponsePlaylistSongs& operator=(const ResponsePlaylistSongs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponsePlaylistSongs& default_instance();

  void Swap(ResponsePlaylistSongs* other);

  // implements Message ----------------------------------------------

  inline ResponsePlaylistSongs* New() const { return New(NULL); }

  ResponsePlaylistSongs* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponsePlaylistSongs& from);
  void MergeFrom(const ResponsePlaylistSongs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResponsePlaylistSongs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.remote.Playlist requested_playlist = 1;
  bool has_requested_playlist() const;
  void clear_requested_playlist();
  static const int kRequestedPlaylistFieldNumber = 1;
  const ::pb::remote::Playlist& requested_playlist() const;
  ::pb::remote::Playlist* mutable_requested_playlist();
  ::pb::remote::Playlist* release_requested_playlist();
  void set_allocated_requested_playlist(::pb::remote::Playlist* requested_playlist);

  // repeated .pb.remote.SongMetadata songs = 2;
  int songs_size() const;
  void clear_songs();
  static const int kSongsFieldNumber = 2;
  const ::pb::remote::SongMetadata& songs(int index) const;
  ::pb::remote::SongMetadata* mutable_songs(int index);
  ::pb::remote::SongMetadata* add_songs();
  ::google::protobuf::RepeatedPtrField< ::pb::remote::SongMetadata >*
      mutable_songs();
  const ::google::protobuf::RepeatedPtrField< ::pb::remote::SongMetadata >&
      songs() const;

  // @@protoc_insertion_point(class_scope:pb.remote.ResponsePlaylistSongs)
 private:
  inline void set_has_requested_playlist();
  inline void clear_has_requested_playlist();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::remote::Playlist* requested_playlist_;
  ::google::protobuf::RepeatedPtrField< ::pb::remote::SongMetadata > songs_;
  friend void  protobuf_AddDesc_remotecontrolmessages_2eproto();
  friend void protobuf_AssignDesc_remotecontrolmessages_2eproto();
  friend void protobuf_ShutdownFile_remotecontrolmessages_2eproto();

  void InitAsDefaultInstance();
  static ResponsePlaylistSongs* default_instance_;
};
// -------------------------------------------------------------------

class ResponseEngineStateChanged : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.remote.ResponseEngineStateChanged) */ {
 public:
  ResponseEngineStateChanged();
  virtual ~ResponseEngineStateChanged();

  ResponseEngineStateChanged(const ResponseEngineStateChanged& from);

  inline ResponseEngineStateChanged& operator=(const ResponseEngineStateChanged& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseEngineStateChanged& default_instance();

  void Swap(ResponseEngineStateChanged* other);

  // implements Message ----------------------------------------------

  inline ResponseEngineStateChanged* New() const { return New(NULL); }

  ResponseEngineStateChanged* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponseEngineStateChanged& from);
  void MergeFrom(const ResponseEngineStateChanged& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResponseEngineStateChanged* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.remote.EngineState state = 1;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::pb::remote::EngineState state() const;
  void set_state(::pb::remote::EngineState value);

  // @@protoc_insertion_point(class_scope:pb.remote.ResponseEngineStateChanged)
 private:
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int state_;
  friend void  protobuf_AddDesc_remotecontrolmessages_2eproto();
  friend void protobuf_AssignDesc_remotecontrolmessages_2eproto();
  friend void protobuf_ShutdownFile_remotecontrolmessages_2eproto();

  void InitAsDefaultInstance();
  static ResponseEngineStateChanged* default_instance_;
};
// -------------------------------------------------------------------

class ResponseUpdateTrackPosition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.remote.ResponseUpdateTrackPosition) */ {
 public:
  ResponseUpdateTrackPosition();
  virtual ~ResponseUpdateTrackPosition();

  ResponseUpdateTrackPosition(const ResponseUpdateTrackPosition& from);

  inline ResponseUpdateTrackPosition& operator=(const ResponseUpdateTrackPosition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseUpdateTrackPosition& default_instance();

  void Swap(ResponseUpdateTrackPosition* other);

  // implements Message ----------------------------------------------

  inline ResponseUpdateTrackPosition* New() const { return New(NULL); }

  ResponseUpdateTrackPosition* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponseUpdateTrackPosition& from);
  void MergeFrom(const ResponseUpdateTrackPosition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResponseUpdateTrackPosition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 position = 1;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  ::google::protobuf::int32 position() const;
  void set_position(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.remote.ResponseUpdateTrackPosition)
 private:
  inline void set_has_position();
  inline void clear_has_position();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 position_;
  friend void  protobuf_AddDesc_remotecontrolmessages_2eproto();
  friend void protobuf_AssignDesc_remotecontrolmessages_2eproto();
  friend void protobuf_ShutdownFile_remotecontrolmessages_2eproto();

  void InitAsDefaultInstance();
  static ResponseUpdateTrackPosition* default_instance_;
};
// -------------------------------------------------------------------

class RequestConnect : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.remote.RequestConnect) */ {
 public:
  RequestConnect();
  virtual ~RequestConnect();

  RequestConnect(const RequestConnect& from);

  inline RequestConnect& operator=(const RequestConnect& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestConnect& default_instance();

  void Swap(RequestConnect* other);

  // implements Message ----------------------------------------------

  inline RequestConnect* New() const { return New(NULL); }

  RequestConnect* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestConnect& from);
  void MergeFrom(const RequestConnect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RequestConnect* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 auth_code = 1;
  bool has_auth_code() const;
  void clear_auth_code();
  static const int kAuthCodeFieldNumber = 1;
  ::google::protobuf::int32 auth_code() const;
  void set_auth_code(::google::protobuf::int32 value);

  // optional bool send_playlist_songs = 2;
  bool has_send_playlist_songs() const;
  void clear_send_playlist_songs();
  static const int kSendPlaylistSongsFieldNumber = 2;
  bool send_playlist_songs() const;
  void set_send_playlist_songs(bool value);

  // optional bool downloader = 3;
  bool has_downloader() const;
  void clear_downloader();
  static const int kDownloaderFieldNumber = 3;
  bool downloader() const;
  void set_downloader(bool value);

  // @@protoc_insertion_point(class_scope:pb.remote.RequestConnect)
 private:
  inline void set_has_auth_code();
  inline void clear_has_auth_code();
  inline void set_has_send_playlist_songs();
  inline void clear_has_send_playlist_songs();
  inline void set_has_downloader();
  inline void clear_has_downloader();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 auth_code_;
  bool send_playlist_songs_;
  bool downloader_;
  friend void  protobuf_AddDesc_remotecontrolmessages_2eproto();
  friend void protobuf_AssignDesc_remotecontrolmessages_2eproto();
  friend void protobuf_ShutdownFile_remotecontrolmessages_2eproto();

  void InitAsDefaultInstance();
  static RequestConnect* default_instance_;
};
// -------------------------------------------------------------------

class ResponseDisconnect : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.remote.ResponseDisconnect) */ {
 public:
  ResponseDisconnect();
  virtual ~ResponseDisconnect();

  ResponseDisconnect(const ResponseDisconnect& from);

  inline ResponseDisconnect& operator=(const ResponseDisconnect& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseDisconnect& default_instance();

  void Swap(ResponseDisconnect* other);

  // implements Message ----------------------------------------------

  inline ResponseDisconnect* New() const { return New(NULL); }

  ResponseDisconnect* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponseDisconnect& from);
  void MergeFrom(const ResponseDisconnect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResponseDisconnect* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.remote.ReasonDisconnect reason_disconnect = 1;
  bool has_reason_disconnect() const;
  void clear_reason_disconnect();
  static const int kReasonDisconnectFieldNumber = 1;
  ::pb::remote::ReasonDisconnect reason_disconnect() const;
  void set_reason_disconnect(::pb::remote::ReasonDisconnect value);

  // @@protoc_insertion_point(class_scope:pb.remote.ResponseDisconnect)
 private:
  inline void set_has_reason_disconnect();
  inline void clear_has_reason_disconnect();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int reason_disconnect_;
  friend void  protobuf_AddDesc_remotecontrolmessages_2eproto();
  friend void protobuf_AssignDesc_remotecontrolmessages_2eproto();
  friend void protobuf_ShutdownFile_remotecontrolmessages_2eproto();

  void InitAsDefaultInstance();
  static ResponseDisconnect* default_instance_;
};
// -------------------------------------------------------------------

class ResponseActiveChanged : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.remote.ResponseActiveChanged) */ {
 public:
  ResponseActiveChanged();
  virtual ~ResponseActiveChanged();

  ResponseActiveChanged(const ResponseActiveChanged& from);

  inline ResponseActiveChanged& operator=(const ResponseActiveChanged& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseActiveChanged& default_instance();

  void Swap(ResponseActiveChanged* other);

  // implements Message ----------------------------------------------

  inline ResponseActiveChanged* New() const { return New(NULL); }

  ResponseActiveChanged* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponseActiveChanged& from);
  void MergeFrom(const ResponseActiveChanged& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResponseActiveChanged* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.remote.ResponseActiveChanged)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_remotecontrolmessages_2eproto();
  friend void protobuf_AssignDesc_remotecontrolmessages_2eproto();
  friend void protobuf_ShutdownFile_remotecontrolmessages_2eproto();

  void InitAsDefaultInstance();
  static ResponseActiveChanged* default_instance_;
};
// -------------------------------------------------------------------

class RequestSetTrackPosition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.remote.RequestSetTrackPosition) */ {
 public:
  RequestSetTrackPosition();
  virtual ~RequestSetTrackPosition();

  RequestSetTrackPosition(const RequestSetTrackPosition& from);

  inline RequestSetTrackPosition& operator=(const RequestSetTrackPosition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestSetTrackPosition& default_instance();

  void Swap(RequestSetTrackPosition* other);

  // implements Message ----------------------------------------------

  inline RequestSetTrackPosition* New() const { return New(NULL); }

  RequestSetTrackPosition* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestSetTrackPosition& from);
  void MergeFrom(const RequestSetTrackPosition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RequestSetTrackPosition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 position = 1;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  ::google::protobuf::int32 position() const;
  void set_position(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.remote.RequestSetTrackPosition)
 private:
  inline void set_has_position();
  inline void clear_has_position();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 position_;
  friend void  protobuf_AddDesc_remotecontrolmessages_2eproto();
  friend void protobuf_AssignDesc_remotecontrolmessages_2eproto();
  friend void protobuf_ShutdownFile_remotecontrolmessages_2eproto();

  void InitAsDefaultInstance();
  static RequestSetTrackPosition* default_instance_;
};
// -------------------------------------------------------------------

class RequestInsertUrls : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.remote.RequestInsertUrls) */ {
 public:
  RequestInsertUrls();
  virtual ~RequestInsertUrls();

  RequestInsertUrls(const RequestInsertUrls& from);

  inline RequestInsertUrls& operator=(const RequestInsertUrls& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestInsertUrls& default_instance();

  void Swap(RequestInsertUrls* other);

  // implements Message ----------------------------------------------

  inline RequestInsertUrls* New() const { return New(NULL); }

  RequestInsertUrls* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestInsertUrls& from);
  void MergeFrom(const RequestInsertUrls& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RequestInsertUrls* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 playlist_id = 1;
  bool has_playlist_id() const;
  void clear_playlist_id();
  static const int kPlaylistIdFieldNumber = 1;
  ::google::protobuf::int32 playlist_id() const;
  void set_playlist_id(::google::protobuf::int32 value);

  // repeated string urls = 2;
  int urls_size() const;
  void clear_urls();
  static const int kUrlsFieldNumber = 2;
  const ::std::string& urls(int index) const;
  ::std::string* mutable_urls(int index);
  void set_urls(int index, const ::std::string& value);
  void set_urls(int index, const char* value);
  void set_urls(int index, const char* value, size_t size);
  ::std::string* add_urls();
  void add_urls(const ::std::string& value);
  void add_urls(const char* value);
  void add_urls(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& urls() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_urls();

  // optional int32 position = 3 [default = -1];
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 3;
  ::google::protobuf::int32 position() const;
  void set_position(::google::protobuf::int32 value);

  // optional bool play_now = 4 [default = false];
  bool has_play_now() const;
  void clear_play_now();
  static const int kPlayNowFieldNumber = 4;
  bool play_now() const;
  void set_play_now(bool value);

  // optional bool enqueue = 5 [default = false];
  bool has_enqueue() const;
  void clear_enqueue();
  static const int kEnqueueFieldNumber = 5;
  bool enqueue() const;
  void set_enqueue(bool value);

  // repeated .pb.remote.SongMetadata songs = 6;
  int songs_size() const;
  void clear_songs();
  static const int kSongsFieldNumber = 6;
  const ::pb::remote::SongMetadata& songs(int index) const;
  ::pb::remote::SongMetadata* mutable_songs(int index);
  ::pb::remote::SongMetadata* add_songs();
  ::google::protobuf::RepeatedPtrField< ::pb::remote::SongMetadata >*
      mutable_songs();
  const ::google::protobuf::RepeatedPtrField< ::pb::remote::SongMetadata >&
      songs() const;

  // @@protoc_insertion_point(class_scope:pb.remote.RequestInsertUrls)
 private:
  inline void set_has_playlist_id();
  inline void clear_has_playlist_id();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_play_now();
  inline void clear_has_play_now();
  inline void set_has_enqueue();
  inline void clear_has_enqueue();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> urls_;
  ::google::protobuf::int32 playlist_id_;
  ::google::protobuf::int32 position_;
  ::google::protobuf::RepeatedPtrField< ::pb::remote::SongMetadata > songs_;
  bool play_now_;
  bool enqueue_;
  friend void  protobuf_AddDesc_remotecontrolmessages_2eproto();
  friend void protobuf_AssignDesc_remotecontrolmessages_2eproto();
  friend void protobuf_ShutdownFile_remotecontrolmessages_2eproto();

  void InitAsDefaultInstance();
  static RequestInsertUrls* default_instance_;
};
// -------------------------------------------------------------------

class RequestRemoveSongs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.remote.RequestRemoveSongs) */ {
 public:
  RequestRemoveSongs();
  virtual ~RequestRemoveSongs();

  RequestRemoveSongs(const RequestRemoveSongs& from);

  inline RequestRemoveSongs& operator=(const RequestRemoveSongs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestRemoveSongs& default_instance();

  void Swap(RequestRemoveSongs* other);

  // implements Message ----------------------------------------------

  inline RequestRemoveSongs* New() const { return New(NULL); }

  RequestRemoveSongs* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestRemoveSongs& from);
  void MergeFrom(const RequestRemoveSongs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RequestRemoveSongs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 playlist_id = 1;
  bool has_playlist_id() const;
  void clear_playlist_id();
  static const int kPlaylistIdFieldNumber = 1;
  ::google::protobuf::int32 playlist_id() const;
  void set_playlist_id(::google::protobuf::int32 value);

  // repeated int32 songs = 2;
  int songs_size() const;
  void clear_songs();
  static const int kSongsFieldNumber = 2;
  ::google::protobuf::int32 songs(int index) const;
  void set_songs(int index, ::google::protobuf::int32 value);
  void add_songs(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      songs() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_songs();

  // @@protoc_insertion_point(class_scope:pb.remote.RequestRemoveSongs)
 private:
  inline void set_has_playlist_id();
  inline void clear_has_playlist_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > songs_;
  ::google::protobuf::int32 playlist_id_;
  friend void  protobuf_AddDesc_remotecontrolmessages_2eproto();
  friend void protobuf_AssignDesc_remotecontrolmessages_2eproto();
  friend void protobuf_ShutdownFile_remotecontrolmessages_2eproto();

  void InitAsDefaultInstance();
  static RequestRemoveSongs* default_instance_;
};
// -------------------------------------------------------------------

class RequestOpenPlaylist : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.remote.RequestOpenPlaylist) */ {
 public:
  RequestOpenPlaylist();
  virtual ~RequestOpenPlaylist();

  RequestOpenPlaylist(const RequestOpenPlaylist& from);

  inline RequestOpenPlaylist& operator=(const RequestOpenPlaylist& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestOpenPlaylist& default_instance();

  void Swap(RequestOpenPlaylist* other);

  // implements Message ----------------------------------------------

  inline RequestOpenPlaylist* New() const { return New(NULL); }

  RequestOpenPlaylist* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestOpenPlaylist& from);
  void MergeFrom(const RequestOpenPlaylist& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RequestOpenPlaylist* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 playlist_id = 1;
  bool has_playlist_id() const;
  void clear_playlist_id();
  static const int kPlaylistIdFieldNumber = 1;
  ::google::protobuf::int32 playlist_id() const;
  void set_playlist_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.remote.RequestOpenPlaylist)
 private:
  inline void set_has_playlist_id();
  inline void clear_has_playlist_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 playlist_id_;
  friend void  protobuf_AddDesc_remotecontrolmessages_2eproto();
  friend void protobuf_AssignDesc_remotecontrolmessages_2eproto();
  friend void protobuf_ShutdownFile_remotecontrolmessages_2eproto();

  void InitAsDefaultInstance();
  static RequestOpenPlaylist* default_instance_;
};
// -------------------------------------------------------------------

class RequestClosePlaylist : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.remote.RequestClosePlaylist) */ {
 public:
  RequestClosePlaylist();
  virtual ~RequestClosePlaylist();

  RequestClosePlaylist(const RequestClosePlaylist& from);

  inline RequestClosePlaylist& operator=(const RequestClosePlaylist& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestClosePlaylist& default_instance();

  void Swap(RequestClosePlaylist* other);

  // implements Message ----------------------------------------------

  inline RequestClosePlaylist* New() const { return New(NULL); }

  RequestClosePlaylist* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestClosePlaylist& from);
  void MergeFrom(const RequestClosePlaylist& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RequestClosePlaylist* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 playlist_id = 1;
  bool has_playlist_id() const;
  void clear_playlist_id();
  static const int kPlaylistIdFieldNumber = 1;
  ::google::protobuf::int32 playlist_id() const;
  void set_playlist_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.remote.RequestClosePlaylist)
 private:
  inline void set_has_playlist_id();
  inline void clear_has_playlist_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 playlist_id_;
  friend void  protobuf_AddDesc_remotecontrolmessages_2eproto();
  friend void protobuf_AssignDesc_remotecontrolmessages_2eproto();
  friend void protobuf_ShutdownFile_remotecontrolmessages_2eproto();

  void InitAsDefaultInstance();
  static RequestClosePlaylist* default_instance_;
};
// -------------------------------------------------------------------

class ResponseLyrics : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.remote.ResponseLyrics) */ {
 public:
  ResponseLyrics();
  virtual ~ResponseLyrics();

  ResponseLyrics(const ResponseLyrics& from);

  inline ResponseLyrics& operator=(const ResponseLyrics& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseLyrics& default_instance();

  void Swap(ResponseLyrics* other);

  // implements Message ----------------------------------------------

  inline ResponseLyrics* New() const { return New(NULL); }

  ResponseLyrics* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponseLyrics& from);
  void MergeFrom(const ResponseLyrics& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResponseLyrics* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.remote.Lyric lyrics = 1;
  int lyrics_size() const;
  void clear_lyrics();
  static const int kLyricsFieldNumber = 1;
  const ::pb::remote::Lyric& lyrics(int index) const;
  ::pb::remote::Lyric* mutable_lyrics(int index);
  ::pb::remote::Lyric* add_lyrics();
  ::google::protobuf::RepeatedPtrField< ::pb::remote::Lyric >*
      mutable_lyrics();
  const ::google::protobuf::RepeatedPtrField< ::pb::remote::Lyric >&
      lyrics() const;

  // @@protoc_insertion_point(class_scope:pb.remote.ResponseLyrics)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::remote::Lyric > lyrics_;
  friend void  protobuf_AddDesc_remotecontrolmessages_2eproto();
  friend void protobuf_AssignDesc_remotecontrolmessages_2eproto();
  friend void protobuf_ShutdownFile_remotecontrolmessages_2eproto();

  void InitAsDefaultInstance();
  static ResponseLyrics* default_instance_;
};
// -------------------------------------------------------------------

class Lyric : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.remote.Lyric) */ {
 public:
  Lyric();
  virtual ~Lyric();

  Lyric(const Lyric& from);

  inline Lyric& operator=(const Lyric& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Lyric& default_instance();

  void Swap(Lyric* other);

  // implements Message ----------------------------------------------

  inline Lyric* New() const { return New(NULL); }

  Lyric* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Lyric& from);
  void MergeFrom(const Lyric& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Lyric* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string title = 2;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string content = 3;
  bool has_content() const;
  void clear_content();
  static const int kContentFieldNumber = 3;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:pb.remote.Lyric)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  friend void  protobuf_AddDesc_remotecontrolmessages_2eproto();
  friend void protobuf_AssignDesc_remotecontrolmessages_2eproto();
  friend void protobuf_ShutdownFile_remotecontrolmessages_2eproto();

  void InitAsDefaultInstance();
  static Lyric* default_instance_;
};
// -------------------------------------------------------------------

class RequestDownloadSongs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.remote.RequestDownloadSongs) */ {
 public:
  RequestDownloadSongs();
  virtual ~RequestDownloadSongs();

  RequestDownloadSongs(const RequestDownloadSongs& from);

  inline RequestDownloadSongs& operator=(const RequestDownloadSongs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestDownloadSongs& default_instance();

  void Swap(RequestDownloadSongs* other);

  // implements Message ----------------------------------------------

  inline RequestDownloadSongs* New() const { return New(NULL); }

  RequestDownloadSongs* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestDownloadSongs& from);
  void MergeFrom(const RequestDownloadSongs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RequestDownloadSongs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.remote.DownloadItem download_item = 1;
  bool has_download_item() const;
  void clear_download_item();
  static const int kDownloadItemFieldNumber = 1;
  ::pb::remote::DownloadItem download_item() const;
  void set_download_item(::pb::remote::DownloadItem value);

  // optional int32 playlist_id = 2;
  bool has_playlist_id() const;
  void clear_playlist_id();
  static const int kPlaylistIdFieldNumber = 2;
  ::google::protobuf::int32 playlist_id() const;
  void set_playlist_id(::google::protobuf::int32 value);

  // repeated string urls = 3;
  int urls_size() const;
  void clear_urls();
  static const int kUrlsFieldNumber = 3;
  const ::std::string& urls(int index) const;
  ::std::string* mutable_urls(int index);
  void set_urls(int index, const ::std::string& value);
  void set_urls(int index, const char* value);
  void set_urls(int index, const char* value, size_t size);
  ::std::string* add_urls();
  void add_urls(const ::std::string& value);
  void add_urls(const char* value);
  void add_urls(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& urls() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_urls();

  // @@protoc_insertion_point(class_scope:pb.remote.RequestDownloadSongs)
 private:
  inline void set_has_download_item();
  inline void clear_has_download_item();
  inline void set_has_playlist_id();
  inline void clear_has_playlist_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int download_item_;
  ::google::protobuf::int32 playlist_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> urls_;
  friend void  protobuf_AddDesc_remotecontrolmessages_2eproto();
  friend void protobuf_AssignDesc_remotecontrolmessages_2eproto();
  friend void protobuf_ShutdownFile_remotecontrolmessages_2eproto();

  void InitAsDefaultInstance();
  static RequestDownloadSongs* default_instance_;
};
// -------------------------------------------------------------------

class ResponseSongFileChunk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.remote.ResponseSongFileChunk) */ {
 public:
  ResponseSongFileChunk();
  virtual ~ResponseSongFileChunk();

  ResponseSongFileChunk(const ResponseSongFileChunk& from);

  inline ResponseSongFileChunk& operator=(const ResponseSongFileChunk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseSongFileChunk& default_instance();

  void Swap(ResponseSongFileChunk* other);

  // implements Message ----------------------------------------------

  inline ResponseSongFileChunk* New() const { return New(NULL); }

  ResponseSongFileChunk* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponseSongFileChunk& from);
  void MergeFrom(const ResponseSongFileChunk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResponseSongFileChunk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 chunk_number = 1;
  bool has_chunk_number() const;
  void clear_chunk_number();
  static const int kChunkNumberFieldNumber = 1;
  ::google::protobuf::int32 chunk_number() const;
  void set_chunk_number(::google::protobuf::int32 value);

  // optional int32 chunk_count = 2;
  bool has_chunk_count() const;
  void clear_chunk_count();
  static const int kChunkCountFieldNumber = 2;
  ::google::protobuf::int32 chunk_count() const;
  void set_chunk_count(::google::protobuf::int32 value);

  // optional int32 file_number = 3;
  bool has_file_number() const;
  void clear_file_number();
  static const int kFileNumberFieldNumber = 3;
  ::google::protobuf::int32 file_number() const;
  void set_file_number(::google::protobuf::int32 value);

  // optional int32 file_count = 4;
  bool has_file_count() const;
  void clear_file_count();
  static const int kFileCountFieldNumber = 4;
  ::google::protobuf::int32 file_count() const;
  void set_file_count(::google::protobuf::int32 value);

  // optional .pb.remote.SongMetadata song_metadata = 6;
  bool has_song_metadata() const;
  void clear_song_metadata();
  static const int kSongMetadataFieldNumber = 6;
  const ::pb::remote::SongMetadata& song_metadata() const;
  ::pb::remote::SongMetadata* mutable_song_metadata();
  ::pb::remote::SongMetadata* release_song_metadata();
  void set_allocated_song_metadata(::pb::remote::SongMetadata* song_metadata);

  // optional bytes data = 7;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 7;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional int32 size = 8;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 8;
  ::google::protobuf::int32 size() const;
  void set_size(::google::protobuf::int32 value);

  // optional bytes file_hash = 9;
  bool has_file_hash() const;
  void clear_file_hash();
  static const int kFileHashFieldNumber = 9;
  const ::std::string& file_hash() const;
  void set_file_hash(const ::std::string& value);
  void set_file_hash(const char* value);
  void set_file_hash(const void* value, size_t size);
  ::std::string* mutable_file_hash();
  ::std::string* release_file_hash();
  void set_allocated_file_hash(::std::string* file_hash);

  // @@protoc_insertion_point(class_scope:pb.remote.ResponseSongFileChunk)
 private:
  inline void set_has_chunk_number();
  inline void clear_has_chunk_number();
  inline void set_has_chunk_count();
  inline void clear_has_chunk_count();
  inline void set_has_file_number();
  inline void clear_has_file_number();
  inline void set_has_file_count();
  inline void clear_has_file_count();
  inline void set_has_song_metadata();
  inline void clear_has_song_metadata();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_file_hash();
  inline void clear_has_file_hash();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 chunk_number_;
  ::google::protobuf::int32 chunk_count_;
  ::google::protobuf::int32 file_number_;
  ::google::protobuf::int32 file_count_;
  ::pb::remote::SongMetadata* song_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr file_hash_;
  ::google::protobuf::int32 size_;
  friend void  protobuf_AddDesc_remotecontrolmessages_2eproto();
  friend void protobuf_AssignDesc_remotecontrolmessages_2eproto();
  friend void protobuf_ShutdownFile_remotecontrolmessages_2eproto();

  void InitAsDefaultInstance();
  static ResponseSongFileChunk* default_instance_;
};
// -------------------------------------------------------------------

class ResponseLibraryChunk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.remote.ResponseLibraryChunk) */ {
 public:
  ResponseLibraryChunk();
  virtual ~ResponseLibraryChunk();

  ResponseLibraryChunk(const ResponseLibraryChunk& from);

  inline ResponseLibraryChunk& operator=(const ResponseLibraryChunk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseLibraryChunk& default_instance();

  void Swap(ResponseLibraryChunk* other);

  // implements Message ----------------------------------------------

  inline ResponseLibraryChunk* New() const { return New(NULL); }

  ResponseLibraryChunk* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponseLibraryChunk& from);
  void MergeFrom(const ResponseLibraryChunk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResponseLibraryChunk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 chunk_number = 1;
  bool has_chunk_number() const;
  void clear_chunk_number();
  static const int kChunkNumberFieldNumber = 1;
  ::google::protobuf::int32 chunk_number() const;
  void set_chunk_number(::google::protobuf::int32 value);

  // optional int32 chunk_count = 2;
  bool has_chunk_count() const;
  void clear_chunk_count();
  static const int kChunkCountFieldNumber = 2;
  ::google::protobuf::int32 chunk_count() const;
  void set_chunk_count(::google::protobuf::int32 value);

  // optional bytes data = 3;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional int32 size = 4;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 4;
  ::google::protobuf::int32 size() const;
  void set_size(::google::protobuf::int32 value);

  // optional bytes file_hash = 5;
  bool has_file_hash() const;
  void clear_file_hash();
  static const int kFileHashFieldNumber = 5;
  const ::std::string& file_hash() const;
  void set_file_hash(const ::std::string& value);
  void set_file_hash(const char* value);
  void set_file_hash(const void* value, size_t size);
  ::std::string* mutable_file_hash();
  ::std::string* release_file_hash();
  void set_allocated_file_hash(::std::string* file_hash);

  // @@protoc_insertion_point(class_scope:pb.remote.ResponseLibraryChunk)
 private:
  inline void set_has_chunk_number();
  inline void clear_has_chunk_number();
  inline void set_has_chunk_count();
  inline void clear_has_chunk_count();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_file_hash();
  inline void clear_has_file_hash();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 chunk_number_;
  ::google::protobuf::int32 chunk_count_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr file_hash_;
  ::google::protobuf::int32 size_;
  friend void  protobuf_AddDesc_remotecontrolmessages_2eproto();
  friend void protobuf_AssignDesc_remotecontrolmessages_2eproto();
  friend void protobuf_ShutdownFile_remotecontrolmessages_2eproto();

  void InitAsDefaultInstance();
  static ResponseLibraryChunk* default_instance_;
};
// -------------------------------------------------------------------

class ResponseSongOffer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.remote.ResponseSongOffer) */ {
 public:
  ResponseSongOffer();
  virtual ~ResponseSongOffer();

  ResponseSongOffer(const ResponseSongOffer& from);

  inline ResponseSongOffer& operator=(const ResponseSongOffer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseSongOffer& default_instance();

  void Swap(ResponseSongOffer* other);

  // implements Message ----------------------------------------------

  inline ResponseSongOffer* New() const { return New(NULL); }

  ResponseSongOffer* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponseSongOffer& from);
  void MergeFrom(const ResponseSongOffer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResponseSongOffer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool accepted = 1;
  bool has_accepted() const;
  void clear_accepted();
  static const int kAcceptedFieldNumber = 1;
  bool accepted() const;
  void set_accepted(bool value);

  // @@protoc_insertion_point(class_scope:pb.remote.ResponseSongOffer)
 private:
  inline void set_has_accepted();
  inline void clear_has_accepted();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool accepted_;
  friend void  protobuf_AddDesc_remotecontrolmessages_2eproto();
  friend void protobuf_AssignDesc_remotecontrolmessages_2eproto();
  friend void protobuf_ShutdownFile_remotecontrolmessages_2eproto();

  void InitAsDefaultInstance();
  static ResponseSongOffer* default_instance_;
};
// -------------------------------------------------------------------

class RequestRateSong : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.remote.RequestRateSong) */ {
 public:
  RequestRateSong();
  virtual ~RequestRateSong();

  RequestRateSong(const RequestRateSong& from);

  inline RequestRateSong& operator=(const RequestRateSong& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestRateSong& default_instance();

  void Swap(RequestRateSong* other);

  // implements Message ----------------------------------------------

  inline RequestRateSong* New() const { return New(NULL); }

  RequestRateSong* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestRateSong& from);
  void MergeFrom(const RequestRateSong& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RequestRateSong* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float rating = 1;
  bool has_rating() const;
  void clear_rating();
  static const int kRatingFieldNumber = 1;
  float rating() const;
  void set_rating(float value);

  // @@protoc_insertion_point(class_scope:pb.remote.RequestRateSong)
 private:
  inline void set_has_rating();
  inline void clear_has_rating();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float rating_;
  friend void  protobuf_AddDesc_remotecontrolmessages_2eproto();
  friend void protobuf_AssignDesc_remotecontrolmessages_2eproto();
  friend void protobuf_ShutdownFile_remotecontrolmessages_2eproto();

  void InitAsDefaultInstance();
  static RequestRateSong* default_instance_;
};
// -------------------------------------------------------------------

class ResponseDownloadTotalSize : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.remote.ResponseDownloadTotalSize) */ {
 public:
  ResponseDownloadTotalSize();
  virtual ~ResponseDownloadTotalSize();

  ResponseDownloadTotalSize(const ResponseDownloadTotalSize& from);

  inline ResponseDownloadTotalSize& operator=(const ResponseDownloadTotalSize& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseDownloadTotalSize& default_instance();

  void Swap(ResponseDownloadTotalSize* other);

  // implements Message ----------------------------------------------

  inline ResponseDownloadTotalSize* New() const { return New(NULL); }

  ResponseDownloadTotalSize* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponseDownloadTotalSize& from);
  void MergeFrom(const ResponseDownloadTotalSize& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResponseDownloadTotalSize* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 total_size = 1;
  bool has_total_size() const;
  void clear_total_size();
  static const int kTotalSizeFieldNumber = 1;
  ::google::protobuf::int32 total_size() const;
  void set_total_size(::google::protobuf::int32 value);

  // optional int32 file_count = 2;
  bool has_file_count() const;
  void clear_file_count();
  static const int kFileCountFieldNumber = 2;
  ::google::protobuf::int32 file_count() const;
  void set_file_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.remote.ResponseDownloadTotalSize)
 private:
  inline void set_has_total_size();
  inline void clear_has_total_size();
  inline void set_has_file_count();
  inline void clear_has_file_count();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 total_size_;
  ::google::protobuf::int32 file_count_;
  friend void  protobuf_AddDesc_remotecontrolmessages_2eproto();
  friend void protobuf_AssignDesc_remotecontrolmessages_2eproto();
  friend void protobuf_ShutdownFile_remotecontrolmessages_2eproto();

  void InitAsDefaultInstance();
  static ResponseDownloadTotalSize* default_instance_;
};
// -------------------------------------------------------------------

class RequestGlobalSearch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.remote.RequestGlobalSearch) */ {
 public:
  RequestGlobalSearch();
  virtual ~RequestGlobalSearch();

  RequestGlobalSearch(const RequestGlobalSearch& from);

  inline RequestGlobalSearch& operator=(const RequestGlobalSearch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestGlobalSearch& default_instance();

  void Swap(RequestGlobalSearch* other);

  // implements Message ----------------------------------------------

  inline RequestGlobalSearch* New() const { return New(NULL); }

  RequestGlobalSearch* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestGlobalSearch& from);
  void MergeFrom(const RequestGlobalSearch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RequestGlobalSearch* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string query = 1;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:pb.remote.RequestGlobalSearch)
 private:
  inline void set_has_query();
  inline void clear_has_query();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  friend void  protobuf_AddDesc_remotecontrolmessages_2eproto();
  friend void protobuf_AssignDesc_remotecontrolmessages_2eproto();
  friend void protobuf_ShutdownFile_remotecontrolmessages_2eproto();

  void InitAsDefaultInstance();
  static RequestGlobalSearch* default_instance_;
};
// -------------------------------------------------------------------

class ResponseGlobalSearch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.remote.ResponseGlobalSearch) */ {
 public:
  ResponseGlobalSearch();
  virtual ~ResponseGlobalSearch();

  ResponseGlobalSearch(const ResponseGlobalSearch& from);

  inline ResponseGlobalSearch& operator=(const ResponseGlobalSearch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseGlobalSearch& default_instance();

  void Swap(ResponseGlobalSearch* other);

  // implements Message ----------------------------------------------

  inline ResponseGlobalSearch* New() const { return New(NULL); }

  ResponseGlobalSearch* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponseGlobalSearch& from);
  void MergeFrom(const ResponseGlobalSearch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResponseGlobalSearch* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional string query = 2;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 2;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // optional string search_provider = 3;
  bool has_search_provider() const;
  void clear_search_provider();
  static const int kSearchProviderFieldNumber = 3;
  const ::std::string& search_provider() const;
  void set_search_provider(const ::std::string& value);
  void set_search_provider(const char* value);
  void set_search_provider(const char* value, size_t size);
  ::std::string* mutable_search_provider();
  ::std::string* release_search_provider();
  void set_allocated_search_provider(::std::string* search_provider);

  // repeated .pb.remote.SongMetadata song_metadata = 4;
  int song_metadata_size() const;
  void clear_song_metadata();
  static const int kSongMetadataFieldNumber = 4;
  const ::pb::remote::SongMetadata& song_metadata(int index) const;
  ::pb::remote::SongMetadata* mutable_song_metadata(int index);
  ::pb::remote::SongMetadata* add_song_metadata();
  ::google::protobuf::RepeatedPtrField< ::pb::remote::SongMetadata >*
      mutable_song_metadata();
  const ::google::protobuf::RepeatedPtrField< ::pb::remote::SongMetadata >&
      song_metadata() const;

  // optional bytes search_provider_icon = 5;
  bool has_search_provider_icon() const;
  void clear_search_provider_icon();
  static const int kSearchProviderIconFieldNumber = 5;
  const ::std::string& search_provider_icon() const;
  void set_search_provider_icon(const ::std::string& value);
  void set_search_provider_icon(const char* value);
  void set_search_provider_icon(const void* value, size_t size);
  ::std::string* mutable_search_provider_icon();
  ::std::string* release_search_provider_icon();
  void set_allocated_search_provider_icon(::std::string* search_provider_icon);

  // @@protoc_insertion_point(class_scope:pb.remote.ResponseGlobalSearch)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_query();
  inline void clear_has_query();
  inline void set_has_search_provider();
  inline void clear_has_search_provider();
  inline void set_has_search_provider_icon();
  inline void clear_has_search_provider_icon();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  ::google::protobuf::internal::ArenaStringPtr search_provider_;
  ::google::protobuf::RepeatedPtrField< ::pb::remote::SongMetadata > song_metadata_;
  ::google::protobuf::internal::ArenaStringPtr search_provider_icon_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_remotecontrolmessages_2eproto();
  friend void protobuf_AssignDesc_remotecontrolmessages_2eproto();
  friend void protobuf_ShutdownFile_remotecontrolmessages_2eproto();

  void InitAsDefaultInstance();
  static ResponseGlobalSearch* default_instance_;
};
// -------------------------------------------------------------------

class ResponseTranscoderStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.remote.ResponseTranscoderStatus) */ {
 public:
  ResponseTranscoderStatus();
  virtual ~ResponseTranscoderStatus();

  ResponseTranscoderStatus(const ResponseTranscoderStatus& from);

  inline ResponseTranscoderStatus& operator=(const ResponseTranscoderStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseTranscoderStatus& default_instance();

  void Swap(ResponseTranscoderStatus* other);

  // implements Message ----------------------------------------------

  inline ResponseTranscoderStatus* New() const { return New(NULL); }

  ResponseTranscoderStatus* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponseTranscoderStatus& from);
  void MergeFrom(const ResponseTranscoderStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResponseTranscoderStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 processed = 1;
  bool has_processed() const;
  void clear_processed();
  static const int kProcessedFieldNumber = 1;
  ::google::protobuf::int32 processed() const;
  void set_processed(::google::protobuf::int32 value);

  // optional int32 total = 2;
  bool has_total() const;
  void clear_total();
  static const int kTotalFieldNumber = 2;
  ::google::protobuf::int32 total() const;
  void set_total(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.remote.ResponseTranscoderStatus)
 private:
  inline void set_has_processed();
  inline void clear_has_processed();
  inline void set_has_total();
  inline void clear_has_total();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 processed_;
  ::google::protobuf::int32 total_;
  friend void  protobuf_AddDesc_remotecontrolmessages_2eproto();
  friend void protobuf_AssignDesc_remotecontrolmessages_2eproto();
  friend void protobuf_ShutdownFile_remotecontrolmessages_2eproto();

  void InitAsDefaultInstance();
  static ResponseTranscoderStatus* default_instance_;
};
// -------------------------------------------------------------------

class ResponseGlobalSearchStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.remote.ResponseGlobalSearchStatus) */ {
 public:
  ResponseGlobalSearchStatus();
  virtual ~ResponseGlobalSearchStatus();

  ResponseGlobalSearchStatus(const ResponseGlobalSearchStatus& from);

  inline ResponseGlobalSearchStatus& operator=(const ResponseGlobalSearchStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseGlobalSearchStatus& default_instance();

  void Swap(ResponseGlobalSearchStatus* other);

  // implements Message ----------------------------------------------

  inline ResponseGlobalSearchStatus* New() const { return New(NULL); }

  ResponseGlobalSearchStatus* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponseGlobalSearchStatus& from);
  void MergeFrom(const ResponseGlobalSearchStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResponseGlobalSearchStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional string query = 2;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 2;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // optional .pb.remote.GlobalSearchStatus status = 3;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  ::pb::remote::GlobalSearchStatus status() const;
  void set_status(::pb::remote::GlobalSearchStatus value);

  // @@protoc_insertion_point(class_scope:pb.remote.ResponseGlobalSearchStatus)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_query();
  inline void clear_has_query();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  ::google::protobuf::int32 id_;
  int status_;
  friend void  protobuf_AddDesc_remotecontrolmessages_2eproto();
  friend void protobuf_AssignDesc_remotecontrolmessages_2eproto();
  friend void protobuf_ShutdownFile_remotecontrolmessages_2eproto();

  void InitAsDefaultInstance();
  static ResponseGlobalSearchStatus* default_instance_;
};
// -------------------------------------------------------------------

class Message : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.remote.Message) */ {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  void Swap(Message* other);

  // implements Message ----------------------------------------------

  inline Message* New() const { return New(NULL); }

  Message* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 version = 1 [default = 21];
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // optional .pb.remote.MsgType type = 2 [default = UNKNOWN];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::pb::remote::MsgType type() const;
  void set_type(::pb::remote::MsgType value);

  // optional .pb.remote.RequestConnect request_connect = 21;
  bool has_request_connect() const;
  void clear_request_connect();
  static const int kRequestConnectFieldNumber = 21;
  const ::pb::remote::RequestConnect& request_connect() const;
  ::pb::remote::RequestConnect* mutable_request_connect();
  ::pb::remote::RequestConnect* release_request_connect();
  void set_allocated_request_connect(::pb::remote::RequestConnect* request_connect);

  // optional .pb.remote.RequestPlaylists request_playlists = 27;
  bool has_request_playlists() const;
  void clear_request_playlists();
  static const int kRequestPlaylistsFieldNumber = 27;
  const ::pb::remote::RequestPlaylists& request_playlists() const;
  ::pb::remote::RequestPlaylists* mutable_request_playlists();
  ::pb::remote::RequestPlaylists* release_request_playlists();
  void set_allocated_request_playlists(::pb::remote::RequestPlaylists* request_playlists);

  // optional .pb.remote.RequestPlaylistSongs request_playlist_songs = 10;
  bool has_request_playlist_songs() const;
  void clear_request_playlist_songs();
  static const int kRequestPlaylistSongsFieldNumber = 10;
  const ::pb::remote::RequestPlaylistSongs& request_playlist_songs() const;
  ::pb::remote::RequestPlaylistSongs* mutable_request_playlist_songs();
  ::pb::remote::RequestPlaylistSongs* release_request_playlist_songs();
  void set_allocated_request_playlist_songs(::pb::remote::RequestPlaylistSongs* request_playlist_songs);

  // optional .pb.remote.RequestChangeSong request_change_song = 11;
  bool has_request_change_song() const;
  void clear_request_change_song();
  static const int kRequestChangeSongFieldNumber = 11;
  const ::pb::remote::RequestChangeSong& request_change_song() const;
  ::pb::remote::RequestChangeSong* mutable_request_change_song();
  ::pb::remote::RequestChangeSong* release_request_change_song();
  void set_allocated_request_change_song(::pb::remote::RequestChangeSong* request_change_song);

  // optional .pb.remote.RequestSetVolume request_set_volume = 12;
  bool has_request_set_volume() const;
  void clear_request_set_volume();
  static const int kRequestSetVolumeFieldNumber = 12;
  const ::pb::remote::RequestSetVolume& request_set_volume() const;
  ::pb::remote::RequestSetVolume* mutable_request_set_volume();
  ::pb::remote::RequestSetVolume* release_request_set_volume();
  void set_allocated_request_set_volume(::pb::remote::RequestSetVolume* request_set_volume);

  // optional .pb.remote.RequestSetTrackPosition request_set_track_position = 23;
  bool has_request_set_track_position() const;
  void clear_request_set_track_position();
  static const int kRequestSetTrackPositionFieldNumber = 23;
  const ::pb::remote::RequestSetTrackPosition& request_set_track_position() const;
  ::pb::remote::RequestSetTrackPosition* mutable_request_set_track_position();
  ::pb::remote::RequestSetTrackPosition* release_request_set_track_position();
  void set_allocated_request_set_track_position(::pb::remote::RequestSetTrackPosition* request_set_track_position);

  // optional .pb.remote.RequestInsertUrls request_insert_urls = 25;
  bool has_request_insert_urls() const;
  void clear_request_insert_urls();
  static const int kRequestInsertUrlsFieldNumber = 25;
  const ::pb::remote::RequestInsertUrls& request_insert_urls() const;
  ::pb::remote::RequestInsertUrls* mutable_request_insert_urls();
  ::pb::remote::RequestInsertUrls* release_request_insert_urls();
  void set_allocated_request_insert_urls(::pb::remote::RequestInsertUrls* request_insert_urls);

  // optional .pb.remote.RequestRemoveSongs request_remove_songs = 26;
  bool has_request_remove_songs() const;
  void clear_request_remove_songs();
  static const int kRequestRemoveSongsFieldNumber = 26;
  const ::pb::remote::RequestRemoveSongs& request_remove_songs() const;
  ::pb::remote::RequestRemoveSongs* mutable_request_remove_songs();
  ::pb::remote::RequestRemoveSongs* release_request_remove_songs();
  void set_allocated_request_remove_songs(::pb::remote::RequestRemoveSongs* request_remove_songs);

  // optional .pb.remote.RequestOpenPlaylist request_open_playlist = 28;
  bool has_request_open_playlist() const;
  void clear_request_open_playlist();
  static const int kRequestOpenPlaylistFieldNumber = 28;
  const ::pb::remote::RequestOpenPlaylist& request_open_playlist() const;
  ::pb::remote::RequestOpenPlaylist* mutable_request_open_playlist();
  ::pb::remote::RequestOpenPlaylist* release_request_open_playlist();
  void set_allocated_request_open_playlist(::pb::remote::RequestOpenPlaylist* request_open_playlist);

  // optional .pb.remote.RequestClosePlaylist request_close_playlist = 29;
  bool has_request_close_playlist() const;
  void clear_request_close_playlist();
  static const int kRequestClosePlaylistFieldNumber = 29;
  const ::pb::remote::RequestClosePlaylist& request_close_playlist() const;
  ::pb::remote::RequestClosePlaylist* mutable_request_close_playlist();
  ::pb::remote::RequestClosePlaylist* release_request_close_playlist();
  void set_allocated_request_close_playlist(::pb::remote::RequestClosePlaylist* request_close_playlist);

  // optional .pb.remote.RequestDownloadSongs request_download_songs = 31;
  bool has_request_download_songs() const;
  void clear_request_download_songs();
  static const int kRequestDownloadSongsFieldNumber = 31;
  const ::pb::remote::RequestDownloadSongs& request_download_songs() const;
  ::pb::remote::RequestDownloadSongs* mutable_request_download_songs();
  ::pb::remote::RequestDownloadSongs* release_request_download_songs();
  void set_allocated_request_download_songs(::pb::remote::RequestDownloadSongs* request_download_songs);

  // optional .pb.remote.RequestRateSong request_rate_song = 35;
  bool has_request_rate_song() const;
  void clear_request_rate_song();
  static const int kRequestRateSongFieldNumber = 35;
  const ::pb::remote::RequestRateSong& request_rate_song() const;
  ::pb::remote::RequestRateSong* mutable_request_rate_song();
  ::pb::remote::RequestRateSong* release_request_rate_song();
  void set_allocated_request_rate_song(::pb::remote::RequestRateSong* request_rate_song);

  // optional .pb.remote.RequestGlobalSearch request_global_search = 37;
  bool has_request_global_search() const;
  void clear_request_global_search();
  static const int kRequestGlobalSearchFieldNumber = 37;
  const ::pb::remote::RequestGlobalSearch& request_global_search() const;
  ::pb::remote::RequestGlobalSearch* mutable_request_global_search();
  ::pb::remote::RequestGlobalSearch* release_request_global_search();
  void set_allocated_request_global_search(::pb::remote::RequestGlobalSearch* request_global_search);

  // optional .pb.remote.Repeat repeat = 13;
  bool has_repeat() const;
  void clear_repeat();
  static const int kRepeatFieldNumber = 13;
  const ::pb::remote::Repeat& repeat() const;
  ::pb::remote::Repeat* mutable_repeat();
  ::pb::remote::Repeat* release_repeat();
  void set_allocated_repeat(::pb::remote::Repeat* repeat);

  // optional .pb.remote.Shuffle shuffle = 14;
  bool has_shuffle() const;
  void clear_shuffle();
  static const int kShuffleFieldNumber = 14;
  const ::pb::remote::Shuffle& shuffle() const;
  ::pb::remote::Shuffle* mutable_shuffle();
  ::pb::remote::Shuffle* release_shuffle();
  void set_allocated_shuffle(::pb::remote::Shuffle* shuffle);

  // optional .pb.remote.ResponseClementineInfo response_clementine_info = 15;
  bool has_response_clementine_info() const;
  void clear_response_clementine_info();
  static const int kResponseClementineInfoFieldNumber = 15;
  const ::pb::remote::ResponseClementineInfo& response_clementine_info() const;
  ::pb::remote::ResponseClementineInfo* mutable_response_clementine_info();
  ::pb::remote::ResponseClementineInfo* release_response_clementine_info();
  void set_allocated_response_clementine_info(::pb::remote::ResponseClementineInfo* response_clementine_info);

  // optional .pb.remote.ResponseCurrentMetadata response_current_metadata = 16;
  bool has_response_current_metadata() const;
  void clear_response_current_metadata();
  static const int kResponseCurrentMetadataFieldNumber = 16;
  const ::pb::remote::ResponseCurrentMetadata& response_current_metadata() const;
  ::pb::remote::ResponseCurrentMetadata* mutable_response_current_metadata();
  ::pb::remote::ResponseCurrentMetadata* release_response_current_metadata();
  void set_allocated_response_current_metadata(::pb::remote::ResponseCurrentMetadata* response_current_metadata);

  // optional .pb.remote.ResponsePlaylists response_playlists = 17;
  bool has_response_playlists() const;
  void clear_response_playlists();
  static const int kResponsePlaylistsFieldNumber = 17;
  const ::pb::remote::ResponsePlaylists& response_playlists() const;
  ::pb::remote::ResponsePlaylists* mutable_response_playlists();
  ::pb::remote::ResponsePlaylists* release_response_playlists();
  void set_allocated_response_playlists(::pb::remote::ResponsePlaylists* response_playlists);

  // optional .pb.remote.ResponsePlaylistSongs response_playlist_songs = 18;
  bool has_response_playlist_songs() const;
  void clear_response_playlist_songs();
  static const int kResponsePlaylistSongsFieldNumber = 18;
  const ::pb::remote::ResponsePlaylistSongs& response_playlist_songs() const;
  ::pb::remote::ResponsePlaylistSongs* mutable_response_playlist_songs();
  ::pb::remote::ResponsePlaylistSongs* release_response_playlist_songs();
  void set_allocated_response_playlist_songs(::pb::remote::ResponsePlaylistSongs* response_playlist_songs);

  // optional .pb.remote.ResponseEngineStateChanged response_engine_state_changed = 19;
  bool has_response_engine_state_changed() const;
  void clear_response_engine_state_changed();
  static const int kResponseEngineStateChangedFieldNumber = 19;
  const ::pb::remote::ResponseEngineStateChanged& response_engine_state_changed() const;
  ::pb::remote::ResponseEngineStateChanged* mutable_response_engine_state_changed();
  ::pb::remote::ResponseEngineStateChanged* release_response_engine_state_changed();
  void set_allocated_response_engine_state_changed(::pb::remote::ResponseEngineStateChanged* response_engine_state_changed);

  // optional .pb.remote.ResponseUpdateTrackPosition response_update_track_position = 20;
  bool has_response_update_track_position() const;
  void clear_response_update_track_position();
  static const int kResponseUpdateTrackPositionFieldNumber = 20;
  const ::pb::remote::ResponseUpdateTrackPosition& response_update_track_position() const;
  ::pb::remote::ResponseUpdateTrackPosition* mutable_response_update_track_position();
  ::pb::remote::ResponseUpdateTrackPosition* release_response_update_track_position();
  void set_allocated_response_update_track_position(::pb::remote::ResponseUpdateTrackPosition* response_update_track_position);

  // optional .pb.remote.ResponseDisconnect response_disconnect = 22;
  bool has_response_disconnect() const;
  void clear_response_disconnect();
  static const int kResponseDisconnectFieldNumber = 22;
  const ::pb::remote::ResponseDisconnect& response_disconnect() const;
  ::pb::remote::ResponseDisconnect* mutable_response_disconnect();
  ::pb::remote::ResponseDisconnect* release_response_disconnect();
  void set_allocated_response_disconnect(::pb::remote::ResponseDisconnect* response_disconnect);

  // optional .pb.remote.ResponseActiveChanged response_active_changed = 24;
  bool has_response_active_changed() const;
  void clear_response_active_changed();
  static const int kResponseActiveChangedFieldNumber = 24;
  const ::pb::remote::ResponseActiveChanged& response_active_changed() const;
  ::pb::remote::ResponseActiveChanged* mutable_response_active_changed();
  ::pb::remote::ResponseActiveChanged* release_response_active_changed();
  void set_allocated_response_active_changed(::pb::remote::ResponseActiveChanged* response_active_changed);

  // optional .pb.remote.ResponseLyrics response_lyrics = 30;
  bool has_response_lyrics() const;
  void clear_response_lyrics();
  static const int kResponseLyricsFieldNumber = 30;
  const ::pb::remote::ResponseLyrics& response_lyrics() const;
  ::pb::remote::ResponseLyrics* mutable_response_lyrics();
  ::pb::remote::ResponseLyrics* release_response_lyrics();
  void set_allocated_response_lyrics(::pb::remote::ResponseLyrics* response_lyrics);

  // optional .pb.remote.ResponseSongFileChunk response_song_file_chunk = 32;
  bool has_response_song_file_chunk() const;
  void clear_response_song_file_chunk();
  static const int kResponseSongFileChunkFieldNumber = 32;
  const ::pb::remote::ResponseSongFileChunk& response_song_file_chunk() const;
  ::pb::remote::ResponseSongFileChunk* mutable_response_song_file_chunk();
  ::pb::remote::ResponseSongFileChunk* release_response_song_file_chunk();
  void set_allocated_response_song_file_chunk(::pb::remote::ResponseSongFileChunk* response_song_file_chunk);

  // optional .pb.remote.ResponseSongOffer response_song_offer = 33;
  bool has_response_song_offer() const;
  void clear_response_song_offer();
  static const int kResponseSongOfferFieldNumber = 33;
  const ::pb::remote::ResponseSongOffer& response_song_offer() const;
  ::pb::remote::ResponseSongOffer* mutable_response_song_offer();
  ::pb::remote::ResponseSongOffer* release_response_song_offer();
  void set_allocated_response_song_offer(::pb::remote::ResponseSongOffer* response_song_offer);

  // optional .pb.remote.ResponseLibraryChunk response_library_chunk = 34;
  bool has_response_library_chunk() const;
  void clear_response_library_chunk();
  static const int kResponseLibraryChunkFieldNumber = 34;
  const ::pb::remote::ResponseLibraryChunk& response_library_chunk() const;
  ::pb::remote::ResponseLibraryChunk* mutable_response_library_chunk();
  ::pb::remote::ResponseLibraryChunk* release_response_library_chunk();
  void set_allocated_response_library_chunk(::pb::remote::ResponseLibraryChunk* response_library_chunk);

  // optional .pb.remote.ResponseDownloadTotalSize response_download_total_size = 36;
  bool has_response_download_total_size() const;
  void clear_response_download_total_size();
  static const int kResponseDownloadTotalSizeFieldNumber = 36;
  const ::pb::remote::ResponseDownloadTotalSize& response_download_total_size() const;
  ::pb::remote::ResponseDownloadTotalSize* mutable_response_download_total_size();
  ::pb::remote::ResponseDownloadTotalSize* release_response_download_total_size();
  void set_allocated_response_download_total_size(::pb::remote::ResponseDownloadTotalSize* response_download_total_size);

  // optional .pb.remote.ResponseGlobalSearch response_global_search = 38;
  bool has_response_global_search() const;
  void clear_response_global_search();
  static const int kResponseGlobalSearchFieldNumber = 38;
  const ::pb::remote::ResponseGlobalSearch& response_global_search() const;
  ::pb::remote::ResponseGlobalSearch* mutable_response_global_search();
  ::pb::remote::ResponseGlobalSearch* release_response_global_search();
  void set_allocated_response_global_search(::pb::remote::ResponseGlobalSearch* response_global_search);

  // optional .pb.remote.ResponseTranscoderStatus response_transcoder_status = 39;
  bool has_response_transcoder_status() const;
  void clear_response_transcoder_status();
  static const int kResponseTranscoderStatusFieldNumber = 39;
  const ::pb::remote::ResponseTranscoderStatus& response_transcoder_status() const;
  ::pb::remote::ResponseTranscoderStatus* mutable_response_transcoder_status();
  ::pb::remote::ResponseTranscoderStatus* release_response_transcoder_status();
  void set_allocated_response_transcoder_status(::pb::remote::ResponseTranscoderStatus* response_transcoder_status);

  // optional .pb.remote.ResponseGlobalSearchStatus response_global_search_status = 40;
  bool has_response_global_search_status() const;
  void clear_response_global_search_status();
  static const int kResponseGlobalSearchStatusFieldNumber = 40;
  const ::pb::remote::ResponseGlobalSearchStatus& response_global_search_status() const;
  ::pb::remote::ResponseGlobalSearchStatus* mutable_response_global_search_status();
  ::pb::remote::ResponseGlobalSearchStatus* release_response_global_search_status();
  void set_allocated_response_global_search_status(::pb::remote::ResponseGlobalSearchStatus* response_global_search_status);

  // @@protoc_insertion_point(class_scope:pb.remote.Message)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_request_connect();
  inline void clear_has_request_connect();
  inline void set_has_request_playlists();
  inline void clear_has_request_playlists();
  inline void set_has_request_playlist_songs();
  inline void clear_has_request_playlist_songs();
  inline void set_has_request_change_song();
  inline void clear_has_request_change_song();
  inline void set_has_request_set_volume();
  inline void clear_has_request_set_volume();
  inline void set_has_request_set_track_position();
  inline void clear_has_request_set_track_position();
  inline void set_has_request_insert_urls();
  inline void clear_has_request_insert_urls();
  inline void set_has_request_remove_songs();
  inline void clear_has_request_remove_songs();
  inline void set_has_request_open_playlist();
  inline void clear_has_request_open_playlist();
  inline void set_has_request_close_playlist();
  inline void clear_has_request_close_playlist();
  inline void set_has_request_download_songs();
  inline void clear_has_request_download_songs();
  inline void set_has_request_rate_song();
  inline void clear_has_request_rate_song();
  inline void set_has_request_global_search();
  inline void clear_has_request_global_search();
  inline void set_has_repeat();
  inline void clear_has_repeat();
  inline void set_has_shuffle();
  inline void clear_has_shuffle();
  inline void set_has_response_clementine_info();
  inline void clear_has_response_clementine_info();
  inline void set_has_response_current_metadata();
  inline void clear_has_response_current_metadata();
  inline void set_has_response_playlists();
  inline void clear_has_response_playlists();
  inline void set_has_response_playlist_songs();
  inline void clear_has_response_playlist_songs();
  inline void set_has_response_engine_state_changed();
  inline void clear_has_response_engine_state_changed();
  inline void set_has_response_update_track_position();
  inline void clear_has_response_update_track_position();
  inline void set_has_response_disconnect();
  inline void clear_has_response_disconnect();
  inline void set_has_response_active_changed();
  inline void clear_has_response_active_changed();
  inline void set_has_response_lyrics();
  inline void clear_has_response_lyrics();
  inline void set_has_response_song_file_chunk();
  inline void clear_has_response_song_file_chunk();
  inline void set_has_response_song_offer();
  inline void clear_has_response_song_offer();
  inline void set_has_response_library_chunk();
  inline void clear_has_response_library_chunk();
  inline void set_has_response_download_total_size();
  inline void clear_has_response_download_total_size();
  inline void set_has_response_global_search();
  inline void clear_has_response_global_search();
  inline void set_has_response_transcoder_status();
  inline void clear_has_response_transcoder_status();
  inline void set_has_response_global_search_status();
  inline void clear_has_response_global_search_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[2];
  ::google::protobuf::int32 version_;
  int type_;
  ::pb::remote::RequestConnect* request_connect_;
  ::pb::remote::RequestPlaylists* request_playlists_;
  ::pb::remote::RequestPlaylistSongs* request_playlist_songs_;
  ::pb::remote::RequestChangeSong* request_change_song_;
  ::pb::remote::RequestSetVolume* request_set_volume_;
  ::pb::remote::RequestSetTrackPosition* request_set_track_position_;
  ::pb::remote::RequestInsertUrls* request_insert_urls_;
  ::pb::remote::RequestRemoveSongs* request_remove_songs_;
  ::pb::remote::RequestOpenPlaylist* request_open_playlist_;
  ::pb::remote::RequestClosePlaylist* request_close_playlist_;
  ::pb::remote::RequestDownloadSongs* request_download_songs_;
  ::pb::remote::RequestRateSong* request_rate_song_;
  ::pb::remote::RequestGlobalSearch* request_global_search_;
  ::pb::remote::Repeat* repeat_;
  ::pb::remote::Shuffle* shuffle_;
  ::pb::remote::ResponseClementineInfo* response_clementine_info_;
  ::pb::remote::ResponseCurrentMetadata* response_current_metadata_;
  ::pb::remote::ResponsePlaylists* response_playlists_;
  ::pb::remote::ResponsePlaylistSongs* response_playlist_songs_;
  ::pb::remote::ResponseEngineStateChanged* response_engine_state_changed_;
  ::pb::remote::ResponseUpdateTrackPosition* response_update_track_position_;
  ::pb::remote::ResponseDisconnect* response_disconnect_;
  ::pb::remote::ResponseActiveChanged* response_active_changed_;
  ::pb::remote::ResponseLyrics* response_lyrics_;
  ::pb::remote::ResponseSongFileChunk* response_song_file_chunk_;
  ::pb::remote::ResponseSongOffer* response_song_offer_;
  ::pb::remote::ResponseLibraryChunk* response_library_chunk_;
  ::pb::remote::ResponseDownloadTotalSize* response_download_total_size_;
  ::pb::remote::ResponseGlobalSearch* response_global_search_;
  ::pb::remote::ResponseTranscoderStatus* response_transcoder_status_;
  ::pb::remote::ResponseGlobalSearchStatus* response_global_search_status_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_remotecontrolmessages_2eproto();
  friend void protobuf_AssignDesc_remotecontrolmessages_2eproto();
  friend void protobuf_ShutdownFile_remotecontrolmessages_2eproto();

  void InitAsDefaultInstance();
  static Message* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestFiles

// optional string relativePath = 1;
inline bool RequestFiles::has_relativepath() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestFiles::set_has_relativepath() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestFiles::clear_has_relativepath() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestFiles::clear_relativepath() {
  relativepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_relativepath();
}
inline const ::std::string& RequestFiles::relativepath() const {
  // @@protoc_insertion_point(field_get:pb.remote.RequestFiles.relativePath)
  return relativepath_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestFiles::set_relativepath(const ::std::string& value) {
  set_has_relativepath();
  relativepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.remote.RequestFiles.relativePath)
}
inline void RequestFiles::set_relativepath(const char* value) {
  set_has_relativepath();
  relativepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.remote.RequestFiles.relativePath)
}
inline void RequestFiles::set_relativepath(const char* value, size_t size) {
  set_has_relativepath();
  relativepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.remote.RequestFiles.relativePath)
}
inline ::std::string* RequestFiles::mutable_relativepath() {
  set_has_relativepath();
  // @@protoc_insertion_point(field_mutable:pb.remote.RequestFiles.relativePath)
  return relativepath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestFiles::release_relativepath() {
  // @@protoc_insertion_point(field_release:pb.remote.RequestFiles.relativePath)
  clear_has_relativepath();
  return relativepath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestFiles::set_allocated_relativepath(::std::string* relativepath) {
  if (relativepath != NULL) {
    set_has_relativepath();
  } else {
    clear_has_relativepath();
  }
  relativepath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), relativepath);
  // @@protoc_insertion_point(field_set_allocated:pb.remote.RequestFiles.relativePath)
}

// -------------------------------------------------------------------

// Files

// optional string relativePath = 1;
inline bool Files::has_relativepath() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Files::set_has_relativepath() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Files::clear_has_relativepath() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Files::clear_relativepath() {
  relativepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_relativepath();
}
inline const ::std::string& Files::relativepath() const {
  // @@protoc_insertion_point(field_get:pb.remote.Files.relativePath)
  return relativepath_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Files::set_relativepath(const ::std::string& value) {
  set_has_relativepath();
  relativepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.remote.Files.relativePath)
}
inline void Files::set_relativepath(const char* value) {
  set_has_relativepath();
  relativepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.remote.Files.relativePath)
}
inline void Files::set_relativepath(const char* value, size_t size) {
  set_has_relativepath();
  relativepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.remote.Files.relativePath)
}
inline ::std::string* Files::mutable_relativepath() {
  set_has_relativepath();
  // @@protoc_insertion_point(field_mutable:pb.remote.Files.relativePath)
  return relativepath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Files::release_relativepath() {
  // @@protoc_insertion_point(field_release:pb.remote.Files.relativePath)
  clear_has_relativepath();
  return relativepath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Files::set_allocated_relativepath(::std::string* relativepath) {
  if (relativepath != NULL) {
    set_has_relativepath();
  } else {
    clear_has_relativepath();
  }
  relativepath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), relativepath);
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Files.relativePath)
}

// repeated string file = 2;
inline int Files::file_size() const {
  return file_.size();
}
inline void Files::clear_file() {
  file_.Clear();
}
inline const ::std::string& Files::file(int index) const {
  // @@protoc_insertion_point(field_get:pb.remote.Files.file)
  return file_.Get(index);
}
inline ::std::string* Files::mutable_file(int index) {
  // @@protoc_insertion_point(field_mutable:pb.remote.Files.file)
  return file_.Mutable(index);
}
inline void Files::set_file(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.remote.Files.file)
  file_.Mutable(index)->assign(value);
}
inline void Files::set_file(int index, const char* value) {
  file_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.remote.Files.file)
}
inline void Files::set_file(int index, const char* value, size_t size) {
  file_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.remote.Files.file)
}
inline ::std::string* Files::add_file() {
  // @@protoc_insertion_point(field_add_mutable:pb.remote.Files.file)
  return file_.Add();
}
inline void Files::add_file(const ::std::string& value) {
  file_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.remote.Files.file)
}
inline void Files::add_file(const char* value) {
  file_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.remote.Files.file)
}
inline void Files::add_file(const char* value, size_t size) {
  file_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.remote.Files.file)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Files::file() const {
  // @@protoc_insertion_point(field_list:pb.remote.Files.file)
  return file_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Files::mutable_file() {
  // @@protoc_insertion_point(field_mutable_list:pb.remote.Files.file)
  return &file_;
}

// -------------------------------------------------------------------

// SongMetadata

// optional int32 id = 1;
inline bool SongMetadata::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SongMetadata::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SongMetadata::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SongMetadata::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 SongMetadata::id() const {
  // @@protoc_insertion_point(field_get:pb.remote.SongMetadata.id)
  return id_;
}
inline void SongMetadata::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.SongMetadata.id)
}

// optional int32 index = 2;
inline bool SongMetadata::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SongMetadata::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SongMetadata::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SongMetadata::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 SongMetadata::index() const {
  // @@protoc_insertion_point(field_get:pb.remote.SongMetadata.index)
  return index_;
}
inline void SongMetadata::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.SongMetadata.index)
}

// optional string title = 3;
inline bool SongMetadata::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SongMetadata::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SongMetadata::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SongMetadata::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& SongMetadata::title() const {
  // @@protoc_insertion_point(field_get:pb.remote.SongMetadata.title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SongMetadata::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.remote.SongMetadata.title)
}
inline void SongMetadata::set_title(const char* value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.remote.SongMetadata.title)
}
inline void SongMetadata::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.remote.SongMetadata.title)
}
inline ::std::string* SongMetadata::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:pb.remote.SongMetadata.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SongMetadata::release_title() {
  // @@protoc_insertion_point(field_release:pb.remote.SongMetadata.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SongMetadata::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:pb.remote.SongMetadata.title)
}

// optional string album = 4;
inline bool SongMetadata::has_album() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SongMetadata::set_has_album() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SongMetadata::clear_has_album() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SongMetadata::clear_album() {
  album_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_album();
}
inline const ::std::string& SongMetadata::album() const {
  // @@protoc_insertion_point(field_get:pb.remote.SongMetadata.album)
  return album_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SongMetadata::set_album(const ::std::string& value) {
  set_has_album();
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.remote.SongMetadata.album)
}
inline void SongMetadata::set_album(const char* value) {
  set_has_album();
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.remote.SongMetadata.album)
}
inline void SongMetadata::set_album(const char* value, size_t size) {
  set_has_album();
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.remote.SongMetadata.album)
}
inline ::std::string* SongMetadata::mutable_album() {
  set_has_album();
  // @@protoc_insertion_point(field_mutable:pb.remote.SongMetadata.album)
  return album_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SongMetadata::release_album() {
  // @@protoc_insertion_point(field_release:pb.remote.SongMetadata.album)
  clear_has_album();
  return album_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SongMetadata::set_allocated_album(::std::string* album) {
  if (album != NULL) {
    set_has_album();
  } else {
    clear_has_album();
  }
  album_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), album);
  // @@protoc_insertion_point(field_set_allocated:pb.remote.SongMetadata.album)
}

// optional string artist = 5;
inline bool SongMetadata::has_artist() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SongMetadata::set_has_artist() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SongMetadata::clear_has_artist() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SongMetadata::clear_artist() {
  artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_artist();
}
inline const ::std::string& SongMetadata::artist() const {
  // @@protoc_insertion_point(field_get:pb.remote.SongMetadata.artist)
  return artist_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SongMetadata::set_artist(const ::std::string& value) {
  set_has_artist();
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.remote.SongMetadata.artist)
}
inline void SongMetadata::set_artist(const char* value) {
  set_has_artist();
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.remote.SongMetadata.artist)
}
inline void SongMetadata::set_artist(const char* value, size_t size) {
  set_has_artist();
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.remote.SongMetadata.artist)
}
inline ::std::string* SongMetadata::mutable_artist() {
  set_has_artist();
  // @@protoc_insertion_point(field_mutable:pb.remote.SongMetadata.artist)
  return artist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SongMetadata::release_artist() {
  // @@protoc_insertion_point(field_release:pb.remote.SongMetadata.artist)
  clear_has_artist();
  return artist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SongMetadata::set_allocated_artist(::std::string* artist) {
  if (artist != NULL) {
    set_has_artist();
  } else {
    clear_has_artist();
  }
  artist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), artist);
  // @@protoc_insertion_point(field_set_allocated:pb.remote.SongMetadata.artist)
}

// optional string albumartist = 6;
inline bool SongMetadata::has_albumartist() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SongMetadata::set_has_albumartist() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SongMetadata::clear_has_albumartist() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SongMetadata::clear_albumartist() {
  albumartist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_albumartist();
}
inline const ::std::string& SongMetadata::albumartist() const {
  // @@protoc_insertion_point(field_get:pb.remote.SongMetadata.albumartist)
  return albumartist_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SongMetadata::set_albumartist(const ::std::string& value) {
  set_has_albumartist();
  albumartist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.remote.SongMetadata.albumartist)
}
inline void SongMetadata::set_albumartist(const char* value) {
  set_has_albumartist();
  albumartist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.remote.SongMetadata.albumartist)
}
inline void SongMetadata::set_albumartist(const char* value, size_t size) {
  set_has_albumartist();
  albumartist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.remote.SongMetadata.albumartist)
}
inline ::std::string* SongMetadata::mutable_albumartist() {
  set_has_albumartist();
  // @@protoc_insertion_point(field_mutable:pb.remote.SongMetadata.albumartist)
  return albumartist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SongMetadata::release_albumartist() {
  // @@protoc_insertion_point(field_release:pb.remote.SongMetadata.albumartist)
  clear_has_albumartist();
  return albumartist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SongMetadata::set_allocated_albumartist(::std::string* albumartist) {
  if (albumartist != NULL) {
    set_has_albumartist();
  } else {
    clear_has_albumartist();
  }
  albumartist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), albumartist);
  // @@protoc_insertion_point(field_set_allocated:pb.remote.SongMetadata.albumartist)
}

// optional int32 track = 7;
inline bool SongMetadata::has_track() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SongMetadata::set_has_track() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SongMetadata::clear_has_track() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SongMetadata::clear_track() {
  track_ = 0;
  clear_has_track();
}
inline ::google::protobuf::int32 SongMetadata::track() const {
  // @@protoc_insertion_point(field_get:pb.remote.SongMetadata.track)
  return track_;
}
inline void SongMetadata::set_track(::google::protobuf::int32 value) {
  set_has_track();
  track_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.SongMetadata.track)
}

// optional int32 disc = 8;
inline bool SongMetadata::has_disc() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SongMetadata::set_has_disc() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SongMetadata::clear_has_disc() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SongMetadata::clear_disc() {
  disc_ = 0;
  clear_has_disc();
}
inline ::google::protobuf::int32 SongMetadata::disc() const {
  // @@protoc_insertion_point(field_get:pb.remote.SongMetadata.disc)
  return disc_;
}
inline void SongMetadata::set_disc(::google::protobuf::int32 value) {
  set_has_disc();
  disc_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.SongMetadata.disc)
}

// optional string pretty_year = 9;
inline bool SongMetadata::has_pretty_year() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SongMetadata::set_has_pretty_year() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SongMetadata::clear_has_pretty_year() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SongMetadata::clear_pretty_year() {
  pretty_year_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pretty_year();
}
inline const ::std::string& SongMetadata::pretty_year() const {
  // @@protoc_insertion_point(field_get:pb.remote.SongMetadata.pretty_year)
  return pretty_year_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SongMetadata::set_pretty_year(const ::std::string& value) {
  set_has_pretty_year();
  pretty_year_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.remote.SongMetadata.pretty_year)
}
inline void SongMetadata::set_pretty_year(const char* value) {
  set_has_pretty_year();
  pretty_year_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.remote.SongMetadata.pretty_year)
}
inline void SongMetadata::set_pretty_year(const char* value, size_t size) {
  set_has_pretty_year();
  pretty_year_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.remote.SongMetadata.pretty_year)
}
inline ::std::string* SongMetadata::mutable_pretty_year() {
  set_has_pretty_year();
  // @@protoc_insertion_point(field_mutable:pb.remote.SongMetadata.pretty_year)
  return pretty_year_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SongMetadata::release_pretty_year() {
  // @@protoc_insertion_point(field_release:pb.remote.SongMetadata.pretty_year)
  clear_has_pretty_year();
  return pretty_year_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SongMetadata::set_allocated_pretty_year(::std::string* pretty_year) {
  if (pretty_year != NULL) {
    set_has_pretty_year();
  } else {
    clear_has_pretty_year();
  }
  pretty_year_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pretty_year);
  // @@protoc_insertion_point(field_set_allocated:pb.remote.SongMetadata.pretty_year)
}

// optional string genre = 10;
inline bool SongMetadata::has_genre() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SongMetadata::set_has_genre() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SongMetadata::clear_has_genre() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SongMetadata::clear_genre() {
  genre_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_genre();
}
inline const ::std::string& SongMetadata::genre() const {
  // @@protoc_insertion_point(field_get:pb.remote.SongMetadata.genre)
  return genre_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SongMetadata::set_genre(const ::std::string& value) {
  set_has_genre();
  genre_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.remote.SongMetadata.genre)
}
inline void SongMetadata::set_genre(const char* value) {
  set_has_genre();
  genre_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.remote.SongMetadata.genre)
}
inline void SongMetadata::set_genre(const char* value, size_t size) {
  set_has_genre();
  genre_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.remote.SongMetadata.genre)
}
inline ::std::string* SongMetadata::mutable_genre() {
  set_has_genre();
  // @@protoc_insertion_point(field_mutable:pb.remote.SongMetadata.genre)
  return genre_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SongMetadata::release_genre() {
  // @@protoc_insertion_point(field_release:pb.remote.SongMetadata.genre)
  clear_has_genre();
  return genre_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SongMetadata::set_allocated_genre(::std::string* genre) {
  if (genre != NULL) {
    set_has_genre();
  } else {
    clear_has_genre();
  }
  genre_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), genre);
  // @@protoc_insertion_point(field_set_allocated:pb.remote.SongMetadata.genre)
}

// optional int32 playcount = 11;
inline bool SongMetadata::has_playcount() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SongMetadata::set_has_playcount() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SongMetadata::clear_has_playcount() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SongMetadata::clear_playcount() {
  playcount_ = 0;
  clear_has_playcount();
}
inline ::google::protobuf::int32 SongMetadata::playcount() const {
  // @@protoc_insertion_point(field_get:pb.remote.SongMetadata.playcount)
  return playcount_;
}
inline void SongMetadata::set_playcount(::google::protobuf::int32 value) {
  set_has_playcount();
  playcount_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.SongMetadata.playcount)
}

// optional string pretty_length = 12;
inline bool SongMetadata::has_pretty_length() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SongMetadata::set_has_pretty_length() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SongMetadata::clear_has_pretty_length() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SongMetadata::clear_pretty_length() {
  pretty_length_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pretty_length();
}
inline const ::std::string& SongMetadata::pretty_length() const {
  // @@protoc_insertion_point(field_get:pb.remote.SongMetadata.pretty_length)
  return pretty_length_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SongMetadata::set_pretty_length(const ::std::string& value) {
  set_has_pretty_length();
  pretty_length_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.remote.SongMetadata.pretty_length)
}
inline void SongMetadata::set_pretty_length(const char* value) {
  set_has_pretty_length();
  pretty_length_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.remote.SongMetadata.pretty_length)
}
inline void SongMetadata::set_pretty_length(const char* value, size_t size) {
  set_has_pretty_length();
  pretty_length_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.remote.SongMetadata.pretty_length)
}
inline ::std::string* SongMetadata::mutable_pretty_length() {
  set_has_pretty_length();
  // @@protoc_insertion_point(field_mutable:pb.remote.SongMetadata.pretty_length)
  return pretty_length_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SongMetadata::release_pretty_length() {
  // @@protoc_insertion_point(field_release:pb.remote.SongMetadata.pretty_length)
  clear_has_pretty_length();
  return pretty_length_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SongMetadata::set_allocated_pretty_length(::std::string* pretty_length) {
  if (pretty_length != NULL) {
    set_has_pretty_length();
  } else {
    clear_has_pretty_length();
  }
  pretty_length_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pretty_length);
  // @@protoc_insertion_point(field_set_allocated:pb.remote.SongMetadata.pretty_length)
}

// optional bytes art = 13;
inline bool SongMetadata::has_art() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SongMetadata::set_has_art() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SongMetadata::clear_has_art() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SongMetadata::clear_art() {
  art_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_art();
}
inline const ::std::string& SongMetadata::art() const {
  // @@protoc_insertion_point(field_get:pb.remote.SongMetadata.art)
  return art_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SongMetadata::set_art(const ::std::string& value) {
  set_has_art();
  art_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.remote.SongMetadata.art)
}
inline void SongMetadata::set_art(const char* value) {
  set_has_art();
  art_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.remote.SongMetadata.art)
}
inline void SongMetadata::set_art(const void* value, size_t size) {
  set_has_art();
  art_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.remote.SongMetadata.art)
}
inline ::std::string* SongMetadata::mutable_art() {
  set_has_art();
  // @@protoc_insertion_point(field_mutable:pb.remote.SongMetadata.art)
  return art_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SongMetadata::release_art() {
  // @@protoc_insertion_point(field_release:pb.remote.SongMetadata.art)
  clear_has_art();
  return art_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SongMetadata::set_allocated_art(::std::string* art) {
  if (art != NULL) {
    set_has_art();
  } else {
    clear_has_art();
  }
  art_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), art);
  // @@protoc_insertion_point(field_set_allocated:pb.remote.SongMetadata.art)
}

// optional int32 length = 14;
inline bool SongMetadata::has_length() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SongMetadata::set_has_length() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SongMetadata::clear_has_length() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SongMetadata::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline ::google::protobuf::int32 SongMetadata::length() const {
  // @@protoc_insertion_point(field_get:pb.remote.SongMetadata.length)
  return length_;
}
inline void SongMetadata::set_length(::google::protobuf::int32 value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.SongMetadata.length)
}

// optional bool is_local = 15;
inline bool SongMetadata::has_is_local() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SongMetadata::set_has_is_local() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SongMetadata::clear_has_is_local() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SongMetadata::clear_is_local() {
  is_local_ = false;
  clear_has_is_local();
}
inline bool SongMetadata::is_local() const {
  // @@protoc_insertion_point(field_get:pb.remote.SongMetadata.is_local)
  return is_local_;
}
inline void SongMetadata::set_is_local(bool value) {
  set_has_is_local();
  is_local_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.SongMetadata.is_local)
}

// optional string filename = 16;
inline bool SongMetadata::has_filename() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SongMetadata::set_has_filename() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SongMetadata::clear_has_filename() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SongMetadata::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
inline const ::std::string& SongMetadata::filename() const {
  // @@protoc_insertion_point(field_get:pb.remote.SongMetadata.filename)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SongMetadata::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.remote.SongMetadata.filename)
}
inline void SongMetadata::set_filename(const char* value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.remote.SongMetadata.filename)
}
inline void SongMetadata::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.remote.SongMetadata.filename)
}
inline ::std::string* SongMetadata::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:pb.remote.SongMetadata.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SongMetadata::release_filename() {
  // @@protoc_insertion_point(field_release:pb.remote.SongMetadata.filename)
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SongMetadata::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:pb.remote.SongMetadata.filename)
}

// optional int32 file_size = 17;
inline bool SongMetadata::has_file_size() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SongMetadata::set_has_file_size() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SongMetadata::clear_has_file_size() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SongMetadata::clear_file_size() {
  file_size_ = 0;
  clear_has_file_size();
}
inline ::google::protobuf::int32 SongMetadata::file_size() const {
  // @@protoc_insertion_point(field_get:pb.remote.SongMetadata.file_size)
  return file_size_;
}
inline void SongMetadata::set_file_size(::google::protobuf::int32 value) {
  set_has_file_size();
  file_size_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.SongMetadata.file_size)
}

// optional float rating = 18;
inline bool SongMetadata::has_rating() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SongMetadata::set_has_rating() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SongMetadata::clear_has_rating() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SongMetadata::clear_rating() {
  rating_ = 0;
  clear_has_rating();
}
inline float SongMetadata::rating() const {
  // @@protoc_insertion_point(field_get:pb.remote.SongMetadata.rating)
  return rating_;
}
inline void SongMetadata::set_rating(float value) {
  set_has_rating();
  rating_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.SongMetadata.rating)
}

// optional string url = 19;
inline bool SongMetadata::has_url() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SongMetadata::set_has_url() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SongMetadata::clear_has_url() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SongMetadata::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& SongMetadata::url() const {
  // @@protoc_insertion_point(field_get:pb.remote.SongMetadata.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SongMetadata::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.remote.SongMetadata.url)
}
inline void SongMetadata::set_url(const char* value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.remote.SongMetadata.url)
}
inline void SongMetadata::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.remote.SongMetadata.url)
}
inline ::std::string* SongMetadata::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:pb.remote.SongMetadata.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SongMetadata::release_url() {
  // @@protoc_insertion_point(field_release:pb.remote.SongMetadata.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SongMetadata::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:pb.remote.SongMetadata.url)
}

// optional string art_automatic = 20;
inline bool SongMetadata::has_art_automatic() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SongMetadata::set_has_art_automatic() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SongMetadata::clear_has_art_automatic() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SongMetadata::clear_art_automatic() {
  art_automatic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_art_automatic();
}
inline const ::std::string& SongMetadata::art_automatic() const {
  // @@protoc_insertion_point(field_get:pb.remote.SongMetadata.art_automatic)
  return art_automatic_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SongMetadata::set_art_automatic(const ::std::string& value) {
  set_has_art_automatic();
  art_automatic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.remote.SongMetadata.art_automatic)
}
inline void SongMetadata::set_art_automatic(const char* value) {
  set_has_art_automatic();
  art_automatic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.remote.SongMetadata.art_automatic)
}
inline void SongMetadata::set_art_automatic(const char* value, size_t size) {
  set_has_art_automatic();
  art_automatic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.remote.SongMetadata.art_automatic)
}
inline ::std::string* SongMetadata::mutable_art_automatic() {
  set_has_art_automatic();
  // @@protoc_insertion_point(field_mutable:pb.remote.SongMetadata.art_automatic)
  return art_automatic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SongMetadata::release_art_automatic() {
  // @@protoc_insertion_point(field_release:pb.remote.SongMetadata.art_automatic)
  clear_has_art_automatic();
  return art_automatic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SongMetadata::set_allocated_art_automatic(::std::string* art_automatic) {
  if (art_automatic != NULL) {
    set_has_art_automatic();
  } else {
    clear_has_art_automatic();
  }
  art_automatic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), art_automatic);
  // @@protoc_insertion_point(field_set_allocated:pb.remote.SongMetadata.art_automatic)
}

// optional string art_manual = 21;
inline bool SongMetadata::has_art_manual() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SongMetadata::set_has_art_manual() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SongMetadata::clear_has_art_manual() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SongMetadata::clear_art_manual() {
  art_manual_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_art_manual();
}
inline const ::std::string& SongMetadata::art_manual() const {
  // @@protoc_insertion_point(field_get:pb.remote.SongMetadata.art_manual)
  return art_manual_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SongMetadata::set_art_manual(const ::std::string& value) {
  set_has_art_manual();
  art_manual_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.remote.SongMetadata.art_manual)
}
inline void SongMetadata::set_art_manual(const char* value) {
  set_has_art_manual();
  art_manual_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.remote.SongMetadata.art_manual)
}
inline void SongMetadata::set_art_manual(const char* value, size_t size) {
  set_has_art_manual();
  art_manual_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.remote.SongMetadata.art_manual)
}
inline ::std::string* SongMetadata::mutable_art_manual() {
  set_has_art_manual();
  // @@protoc_insertion_point(field_mutable:pb.remote.SongMetadata.art_manual)
  return art_manual_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SongMetadata::release_art_manual() {
  // @@protoc_insertion_point(field_release:pb.remote.SongMetadata.art_manual)
  clear_has_art_manual();
  return art_manual_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SongMetadata::set_allocated_art_manual(::std::string* art_manual) {
  if (art_manual != NULL) {
    set_has_art_manual();
  } else {
    clear_has_art_manual();
  }
  art_manual_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), art_manual);
  // @@protoc_insertion_point(field_set_allocated:pb.remote.SongMetadata.art_manual)
}

// optional .pb.remote.SongMetadata.Type type = 22;
inline bool SongMetadata::has_type() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SongMetadata::set_has_type() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SongMetadata::clear_has_type() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SongMetadata::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::pb::remote::SongMetadata_Type SongMetadata::type() const {
  // @@protoc_insertion_point(field_get:pb.remote.SongMetadata.type)
  return static_cast< ::pb::remote::SongMetadata_Type >(type_);
}
inline void SongMetadata::set_type(::pb::remote::SongMetadata_Type value) {
  assert(::pb::remote::SongMetadata_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.SongMetadata.type)
}

// -------------------------------------------------------------------

// Playlist

// optional int32 id = 1;
inline bool Playlist::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Playlist::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Playlist::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Playlist::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Playlist::id() const {
  // @@protoc_insertion_point(field_get:pb.remote.Playlist.id)
  return id_;
}
inline void Playlist::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.Playlist.id)
}

// optional string name = 2;
inline bool Playlist::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Playlist::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Playlist::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Playlist::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Playlist::name() const {
  // @@protoc_insertion_point(field_get:pb.remote.Playlist.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Playlist::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.remote.Playlist.name)
}
inline void Playlist::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.remote.Playlist.name)
}
inline void Playlist::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.remote.Playlist.name)
}
inline ::std::string* Playlist::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pb.remote.Playlist.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Playlist::release_name() {
  // @@protoc_insertion_point(field_release:pb.remote.Playlist.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Playlist::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Playlist.name)
}

// optional int32 item_count = 3;
inline bool Playlist::has_item_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Playlist::set_has_item_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Playlist::clear_has_item_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Playlist::clear_item_count() {
  item_count_ = 0;
  clear_has_item_count();
}
inline ::google::protobuf::int32 Playlist::item_count() const {
  // @@protoc_insertion_point(field_get:pb.remote.Playlist.item_count)
  return item_count_;
}
inline void Playlist::set_item_count(::google::protobuf::int32 value) {
  set_has_item_count();
  item_count_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.Playlist.item_count)
}

// optional bool active = 4;
inline bool Playlist::has_active() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Playlist::set_has_active() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Playlist::clear_has_active() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Playlist::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool Playlist::active() const {
  // @@protoc_insertion_point(field_get:pb.remote.Playlist.active)
  return active_;
}
inline void Playlist::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.Playlist.active)
}

// optional bool closed = 5;
inline bool Playlist::has_closed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Playlist::set_has_closed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Playlist::clear_has_closed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Playlist::clear_closed() {
  closed_ = false;
  clear_has_closed();
}
inline bool Playlist::closed() const {
  // @@protoc_insertion_point(field_get:pb.remote.Playlist.closed)
  return closed_;
}
inline void Playlist::set_closed(bool value) {
  set_has_closed();
  closed_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.Playlist.closed)
}

// -------------------------------------------------------------------

// RequestPlaylists

// optional bool include_closed = 1;
inline bool RequestPlaylists::has_include_closed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestPlaylists::set_has_include_closed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestPlaylists::clear_has_include_closed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestPlaylists::clear_include_closed() {
  include_closed_ = false;
  clear_has_include_closed();
}
inline bool RequestPlaylists::include_closed() const {
  // @@protoc_insertion_point(field_get:pb.remote.RequestPlaylists.include_closed)
  return include_closed_;
}
inline void RequestPlaylists::set_include_closed(bool value) {
  set_has_include_closed();
  include_closed_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.RequestPlaylists.include_closed)
}

// -------------------------------------------------------------------

// RequestPlaylistSongs

// optional int32 id = 1;
inline bool RequestPlaylistSongs::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestPlaylistSongs::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestPlaylistSongs::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestPlaylistSongs::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 RequestPlaylistSongs::id() const {
  // @@protoc_insertion_point(field_get:pb.remote.RequestPlaylistSongs.id)
  return id_;
}
inline void RequestPlaylistSongs::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.RequestPlaylistSongs.id)
}

// -------------------------------------------------------------------

// RequestChangeSong

// optional int32 playlist_id = 1;
inline bool RequestChangeSong::has_playlist_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestChangeSong::set_has_playlist_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestChangeSong::clear_has_playlist_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestChangeSong::clear_playlist_id() {
  playlist_id_ = 0;
  clear_has_playlist_id();
}
inline ::google::protobuf::int32 RequestChangeSong::playlist_id() const {
  // @@protoc_insertion_point(field_get:pb.remote.RequestChangeSong.playlist_id)
  return playlist_id_;
}
inline void RequestChangeSong::set_playlist_id(::google::protobuf::int32 value) {
  set_has_playlist_id();
  playlist_id_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.RequestChangeSong.playlist_id)
}

// optional int32 song_index = 2;
inline bool RequestChangeSong::has_song_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestChangeSong::set_has_song_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestChangeSong::clear_has_song_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestChangeSong::clear_song_index() {
  song_index_ = 0;
  clear_has_song_index();
}
inline ::google::protobuf::int32 RequestChangeSong::song_index() const {
  // @@protoc_insertion_point(field_get:pb.remote.RequestChangeSong.song_index)
  return song_index_;
}
inline void RequestChangeSong::set_song_index(::google::protobuf::int32 value) {
  set_has_song_index();
  song_index_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.RequestChangeSong.song_index)
}

// -------------------------------------------------------------------

// RequestSetVolume

// optional int32 volume = 1;
inline bool RequestSetVolume::has_volume() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestSetVolume::set_has_volume() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestSetVolume::clear_has_volume() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestSetVolume::clear_volume() {
  volume_ = 0;
  clear_has_volume();
}
inline ::google::protobuf::int32 RequestSetVolume::volume() const {
  // @@protoc_insertion_point(field_get:pb.remote.RequestSetVolume.volume)
  return volume_;
}
inline void RequestSetVolume::set_volume(::google::protobuf::int32 value) {
  set_has_volume();
  volume_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.RequestSetVolume.volume)
}

// -------------------------------------------------------------------

// Repeat

// optional .pb.remote.RepeatMode repeat_mode = 1;
inline bool Repeat::has_repeat_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Repeat::set_has_repeat_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Repeat::clear_has_repeat_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Repeat::clear_repeat_mode() {
  repeat_mode_ = 0;
  clear_has_repeat_mode();
}
inline ::pb::remote::RepeatMode Repeat::repeat_mode() const {
  // @@protoc_insertion_point(field_get:pb.remote.Repeat.repeat_mode)
  return static_cast< ::pb::remote::RepeatMode >(repeat_mode_);
}
inline void Repeat::set_repeat_mode(::pb::remote::RepeatMode value) {
  assert(::pb::remote::RepeatMode_IsValid(value));
  set_has_repeat_mode();
  repeat_mode_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.Repeat.repeat_mode)
}

// -------------------------------------------------------------------

// Shuffle

// optional .pb.remote.ShuffleMode shuffle_mode = 1;
inline bool Shuffle::has_shuffle_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Shuffle::set_has_shuffle_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Shuffle::clear_has_shuffle_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Shuffle::clear_shuffle_mode() {
  shuffle_mode_ = 0;
  clear_has_shuffle_mode();
}
inline ::pb::remote::ShuffleMode Shuffle::shuffle_mode() const {
  // @@protoc_insertion_point(field_get:pb.remote.Shuffle.shuffle_mode)
  return static_cast< ::pb::remote::ShuffleMode >(shuffle_mode_);
}
inline void Shuffle::set_shuffle_mode(::pb::remote::ShuffleMode value) {
  assert(::pb::remote::ShuffleMode_IsValid(value));
  set_has_shuffle_mode();
  shuffle_mode_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.Shuffle.shuffle_mode)
}

// -------------------------------------------------------------------

// ResponseClementineInfo

// optional string version = 1;
inline bool ResponseClementineInfo::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseClementineInfo::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseClementineInfo::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseClementineInfo::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version();
}
inline const ::std::string& ResponseClementineInfo::version() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseClementineInfo.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseClementineInfo::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.remote.ResponseClementineInfo.version)
}
inline void ResponseClementineInfo::set_version(const char* value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.remote.ResponseClementineInfo.version)
}
inline void ResponseClementineInfo::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.remote.ResponseClementineInfo.version)
}
inline ::std::string* ResponseClementineInfo::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:pb.remote.ResponseClementineInfo.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseClementineInfo::release_version() {
  // @@protoc_insertion_point(field_release:pb.remote.ResponseClementineInfo.version)
  clear_has_version();
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseClementineInfo::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:pb.remote.ResponseClementineInfo.version)
}

// optional .pb.remote.EngineState state = 2;
inline bool ResponseClementineInfo::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResponseClementineInfo::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResponseClementineInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResponseClementineInfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::pb::remote::EngineState ResponseClementineInfo::state() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseClementineInfo.state)
  return static_cast< ::pb::remote::EngineState >(state_);
}
inline void ResponseClementineInfo::set_state(::pb::remote::EngineState value) {
  assert(::pb::remote::EngineState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.ResponseClementineInfo.state)
}

// -------------------------------------------------------------------

// ResponseCurrentMetadata

// optional .pb.remote.SongMetadata song_metadata = 1;
inline bool ResponseCurrentMetadata::has_song_metadata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseCurrentMetadata::set_has_song_metadata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseCurrentMetadata::clear_has_song_metadata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseCurrentMetadata::clear_song_metadata() {
  if (song_metadata_ != NULL) song_metadata_->::pb::remote::SongMetadata::Clear();
  clear_has_song_metadata();
}
inline const ::pb::remote::SongMetadata& ResponseCurrentMetadata::song_metadata() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseCurrentMetadata.song_metadata)
  return song_metadata_ != NULL ? *song_metadata_ : *default_instance_->song_metadata_;
}
inline ::pb::remote::SongMetadata* ResponseCurrentMetadata::mutable_song_metadata() {
  set_has_song_metadata();
  if (song_metadata_ == NULL) {
    song_metadata_ = new ::pb::remote::SongMetadata;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.ResponseCurrentMetadata.song_metadata)
  return song_metadata_;
}
inline ::pb::remote::SongMetadata* ResponseCurrentMetadata::release_song_metadata() {
  // @@protoc_insertion_point(field_release:pb.remote.ResponseCurrentMetadata.song_metadata)
  clear_has_song_metadata();
  ::pb::remote::SongMetadata* temp = song_metadata_;
  song_metadata_ = NULL;
  return temp;
}
inline void ResponseCurrentMetadata::set_allocated_song_metadata(::pb::remote::SongMetadata* song_metadata) {
  delete song_metadata_;
  song_metadata_ = song_metadata;
  if (song_metadata) {
    set_has_song_metadata();
  } else {
    clear_has_song_metadata();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.ResponseCurrentMetadata.song_metadata)
}

// -------------------------------------------------------------------

// ResponsePlaylists

// repeated .pb.remote.Playlist playlist = 1;
inline int ResponsePlaylists::playlist_size() const {
  return playlist_.size();
}
inline void ResponsePlaylists::clear_playlist() {
  playlist_.Clear();
}
inline const ::pb::remote::Playlist& ResponsePlaylists::playlist(int index) const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponsePlaylists.playlist)
  return playlist_.Get(index);
}
inline ::pb::remote::Playlist* ResponsePlaylists::mutable_playlist(int index) {
  // @@protoc_insertion_point(field_mutable:pb.remote.ResponsePlaylists.playlist)
  return playlist_.Mutable(index);
}
inline ::pb::remote::Playlist* ResponsePlaylists::add_playlist() {
  // @@protoc_insertion_point(field_add:pb.remote.ResponsePlaylists.playlist)
  return playlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pb::remote::Playlist >*
ResponsePlaylists::mutable_playlist() {
  // @@protoc_insertion_point(field_mutable_list:pb.remote.ResponsePlaylists.playlist)
  return &playlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::remote::Playlist >&
ResponsePlaylists::playlist() const {
  // @@protoc_insertion_point(field_list:pb.remote.ResponsePlaylists.playlist)
  return playlist_;
}

// -------------------------------------------------------------------

// ResponsePlaylistSongs

// optional .pb.remote.Playlist requested_playlist = 1;
inline bool ResponsePlaylistSongs::has_requested_playlist() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponsePlaylistSongs::set_has_requested_playlist() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponsePlaylistSongs::clear_has_requested_playlist() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponsePlaylistSongs::clear_requested_playlist() {
  if (requested_playlist_ != NULL) requested_playlist_->::pb::remote::Playlist::Clear();
  clear_has_requested_playlist();
}
inline const ::pb::remote::Playlist& ResponsePlaylistSongs::requested_playlist() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponsePlaylistSongs.requested_playlist)
  return requested_playlist_ != NULL ? *requested_playlist_ : *default_instance_->requested_playlist_;
}
inline ::pb::remote::Playlist* ResponsePlaylistSongs::mutable_requested_playlist() {
  set_has_requested_playlist();
  if (requested_playlist_ == NULL) {
    requested_playlist_ = new ::pb::remote::Playlist;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.ResponsePlaylistSongs.requested_playlist)
  return requested_playlist_;
}
inline ::pb::remote::Playlist* ResponsePlaylistSongs::release_requested_playlist() {
  // @@protoc_insertion_point(field_release:pb.remote.ResponsePlaylistSongs.requested_playlist)
  clear_has_requested_playlist();
  ::pb::remote::Playlist* temp = requested_playlist_;
  requested_playlist_ = NULL;
  return temp;
}
inline void ResponsePlaylistSongs::set_allocated_requested_playlist(::pb::remote::Playlist* requested_playlist) {
  delete requested_playlist_;
  requested_playlist_ = requested_playlist;
  if (requested_playlist) {
    set_has_requested_playlist();
  } else {
    clear_has_requested_playlist();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.ResponsePlaylistSongs.requested_playlist)
}

// repeated .pb.remote.SongMetadata songs = 2;
inline int ResponsePlaylistSongs::songs_size() const {
  return songs_.size();
}
inline void ResponsePlaylistSongs::clear_songs() {
  songs_.Clear();
}
inline const ::pb::remote::SongMetadata& ResponsePlaylistSongs::songs(int index) const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponsePlaylistSongs.songs)
  return songs_.Get(index);
}
inline ::pb::remote::SongMetadata* ResponsePlaylistSongs::mutable_songs(int index) {
  // @@protoc_insertion_point(field_mutable:pb.remote.ResponsePlaylistSongs.songs)
  return songs_.Mutable(index);
}
inline ::pb::remote::SongMetadata* ResponsePlaylistSongs::add_songs() {
  // @@protoc_insertion_point(field_add:pb.remote.ResponsePlaylistSongs.songs)
  return songs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pb::remote::SongMetadata >*
ResponsePlaylistSongs::mutable_songs() {
  // @@protoc_insertion_point(field_mutable_list:pb.remote.ResponsePlaylistSongs.songs)
  return &songs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::remote::SongMetadata >&
ResponsePlaylistSongs::songs() const {
  // @@protoc_insertion_point(field_list:pb.remote.ResponsePlaylistSongs.songs)
  return songs_;
}

// -------------------------------------------------------------------

// ResponseEngineStateChanged

// optional .pb.remote.EngineState state = 1;
inline bool ResponseEngineStateChanged::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseEngineStateChanged::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseEngineStateChanged::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseEngineStateChanged::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::pb::remote::EngineState ResponseEngineStateChanged::state() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseEngineStateChanged.state)
  return static_cast< ::pb::remote::EngineState >(state_);
}
inline void ResponseEngineStateChanged::set_state(::pb::remote::EngineState value) {
  assert(::pb::remote::EngineState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.ResponseEngineStateChanged.state)
}

// -------------------------------------------------------------------

// ResponseUpdateTrackPosition

// optional int32 position = 1;
inline bool ResponseUpdateTrackPosition::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseUpdateTrackPosition::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseUpdateTrackPosition::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseUpdateTrackPosition::clear_position() {
  position_ = 0;
  clear_has_position();
}
inline ::google::protobuf::int32 ResponseUpdateTrackPosition::position() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseUpdateTrackPosition.position)
  return position_;
}
inline void ResponseUpdateTrackPosition::set_position(::google::protobuf::int32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.ResponseUpdateTrackPosition.position)
}

// -------------------------------------------------------------------

// RequestConnect

// optional int32 auth_code = 1;
inline bool RequestConnect::has_auth_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestConnect::set_has_auth_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestConnect::clear_has_auth_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestConnect::clear_auth_code() {
  auth_code_ = 0;
  clear_has_auth_code();
}
inline ::google::protobuf::int32 RequestConnect::auth_code() const {
  // @@protoc_insertion_point(field_get:pb.remote.RequestConnect.auth_code)
  return auth_code_;
}
inline void RequestConnect::set_auth_code(::google::protobuf::int32 value) {
  set_has_auth_code();
  auth_code_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.RequestConnect.auth_code)
}

// optional bool send_playlist_songs = 2;
inline bool RequestConnect::has_send_playlist_songs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestConnect::set_has_send_playlist_songs() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestConnect::clear_has_send_playlist_songs() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestConnect::clear_send_playlist_songs() {
  send_playlist_songs_ = false;
  clear_has_send_playlist_songs();
}
inline bool RequestConnect::send_playlist_songs() const {
  // @@protoc_insertion_point(field_get:pb.remote.RequestConnect.send_playlist_songs)
  return send_playlist_songs_;
}
inline void RequestConnect::set_send_playlist_songs(bool value) {
  set_has_send_playlist_songs();
  send_playlist_songs_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.RequestConnect.send_playlist_songs)
}

// optional bool downloader = 3;
inline bool RequestConnect::has_downloader() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RequestConnect::set_has_downloader() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RequestConnect::clear_has_downloader() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RequestConnect::clear_downloader() {
  downloader_ = false;
  clear_has_downloader();
}
inline bool RequestConnect::downloader() const {
  // @@protoc_insertion_point(field_get:pb.remote.RequestConnect.downloader)
  return downloader_;
}
inline void RequestConnect::set_downloader(bool value) {
  set_has_downloader();
  downloader_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.RequestConnect.downloader)
}

// -------------------------------------------------------------------

// ResponseDisconnect

// optional .pb.remote.ReasonDisconnect reason_disconnect = 1;
inline bool ResponseDisconnect::has_reason_disconnect() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseDisconnect::set_has_reason_disconnect() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseDisconnect::clear_has_reason_disconnect() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseDisconnect::clear_reason_disconnect() {
  reason_disconnect_ = 1;
  clear_has_reason_disconnect();
}
inline ::pb::remote::ReasonDisconnect ResponseDisconnect::reason_disconnect() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseDisconnect.reason_disconnect)
  return static_cast< ::pb::remote::ReasonDisconnect >(reason_disconnect_);
}
inline void ResponseDisconnect::set_reason_disconnect(::pb::remote::ReasonDisconnect value) {
  assert(::pb::remote::ReasonDisconnect_IsValid(value));
  set_has_reason_disconnect();
  reason_disconnect_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.ResponseDisconnect.reason_disconnect)
}

// -------------------------------------------------------------------

// ResponseActiveChanged

// optional int32 id = 1;
inline bool ResponseActiveChanged::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseActiveChanged::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseActiveChanged::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseActiveChanged::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ResponseActiveChanged::id() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseActiveChanged.id)
  return id_;
}
inline void ResponseActiveChanged::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.ResponseActiveChanged.id)
}

// -------------------------------------------------------------------

// RequestSetTrackPosition

// optional int32 position = 1;
inline bool RequestSetTrackPosition::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestSetTrackPosition::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestSetTrackPosition::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestSetTrackPosition::clear_position() {
  position_ = 0;
  clear_has_position();
}
inline ::google::protobuf::int32 RequestSetTrackPosition::position() const {
  // @@protoc_insertion_point(field_get:pb.remote.RequestSetTrackPosition.position)
  return position_;
}
inline void RequestSetTrackPosition::set_position(::google::protobuf::int32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.RequestSetTrackPosition.position)
}

// -------------------------------------------------------------------

// RequestInsertUrls

// optional int32 playlist_id = 1;
inline bool RequestInsertUrls::has_playlist_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestInsertUrls::set_has_playlist_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestInsertUrls::clear_has_playlist_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestInsertUrls::clear_playlist_id() {
  playlist_id_ = 0;
  clear_has_playlist_id();
}
inline ::google::protobuf::int32 RequestInsertUrls::playlist_id() const {
  // @@protoc_insertion_point(field_get:pb.remote.RequestInsertUrls.playlist_id)
  return playlist_id_;
}
inline void RequestInsertUrls::set_playlist_id(::google::protobuf::int32 value) {
  set_has_playlist_id();
  playlist_id_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.RequestInsertUrls.playlist_id)
}

// repeated string urls = 2;
inline int RequestInsertUrls::urls_size() const {
  return urls_.size();
}
inline void RequestInsertUrls::clear_urls() {
  urls_.Clear();
}
inline const ::std::string& RequestInsertUrls::urls(int index) const {
  // @@protoc_insertion_point(field_get:pb.remote.RequestInsertUrls.urls)
  return urls_.Get(index);
}
inline ::std::string* RequestInsertUrls::mutable_urls(int index) {
  // @@protoc_insertion_point(field_mutable:pb.remote.RequestInsertUrls.urls)
  return urls_.Mutable(index);
}
inline void RequestInsertUrls::set_urls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.remote.RequestInsertUrls.urls)
  urls_.Mutable(index)->assign(value);
}
inline void RequestInsertUrls::set_urls(int index, const char* value) {
  urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.remote.RequestInsertUrls.urls)
}
inline void RequestInsertUrls::set_urls(int index, const char* value, size_t size) {
  urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.remote.RequestInsertUrls.urls)
}
inline ::std::string* RequestInsertUrls::add_urls() {
  // @@protoc_insertion_point(field_add_mutable:pb.remote.RequestInsertUrls.urls)
  return urls_.Add();
}
inline void RequestInsertUrls::add_urls(const ::std::string& value) {
  urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.remote.RequestInsertUrls.urls)
}
inline void RequestInsertUrls::add_urls(const char* value) {
  urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.remote.RequestInsertUrls.urls)
}
inline void RequestInsertUrls::add_urls(const char* value, size_t size) {
  urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.remote.RequestInsertUrls.urls)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RequestInsertUrls::urls() const {
  // @@protoc_insertion_point(field_list:pb.remote.RequestInsertUrls.urls)
  return urls_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RequestInsertUrls::mutable_urls() {
  // @@protoc_insertion_point(field_mutable_list:pb.remote.RequestInsertUrls.urls)
  return &urls_;
}

// optional int32 position = 3 [default = -1];
inline bool RequestInsertUrls::has_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RequestInsertUrls::set_has_position() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RequestInsertUrls::clear_has_position() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RequestInsertUrls::clear_position() {
  position_ = -1;
  clear_has_position();
}
inline ::google::protobuf::int32 RequestInsertUrls::position() const {
  // @@protoc_insertion_point(field_get:pb.remote.RequestInsertUrls.position)
  return position_;
}
inline void RequestInsertUrls::set_position(::google::protobuf::int32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.RequestInsertUrls.position)
}

// optional bool play_now = 4 [default = false];
inline bool RequestInsertUrls::has_play_now() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RequestInsertUrls::set_has_play_now() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RequestInsertUrls::clear_has_play_now() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RequestInsertUrls::clear_play_now() {
  play_now_ = false;
  clear_has_play_now();
}
inline bool RequestInsertUrls::play_now() const {
  // @@protoc_insertion_point(field_get:pb.remote.RequestInsertUrls.play_now)
  return play_now_;
}
inline void RequestInsertUrls::set_play_now(bool value) {
  set_has_play_now();
  play_now_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.RequestInsertUrls.play_now)
}

// optional bool enqueue = 5 [default = false];
inline bool RequestInsertUrls::has_enqueue() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RequestInsertUrls::set_has_enqueue() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RequestInsertUrls::clear_has_enqueue() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RequestInsertUrls::clear_enqueue() {
  enqueue_ = false;
  clear_has_enqueue();
}
inline bool RequestInsertUrls::enqueue() const {
  // @@protoc_insertion_point(field_get:pb.remote.RequestInsertUrls.enqueue)
  return enqueue_;
}
inline void RequestInsertUrls::set_enqueue(bool value) {
  set_has_enqueue();
  enqueue_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.RequestInsertUrls.enqueue)
}

// repeated .pb.remote.SongMetadata songs = 6;
inline int RequestInsertUrls::songs_size() const {
  return songs_.size();
}
inline void RequestInsertUrls::clear_songs() {
  songs_.Clear();
}
inline const ::pb::remote::SongMetadata& RequestInsertUrls::songs(int index) const {
  // @@protoc_insertion_point(field_get:pb.remote.RequestInsertUrls.songs)
  return songs_.Get(index);
}
inline ::pb::remote::SongMetadata* RequestInsertUrls::mutable_songs(int index) {
  // @@protoc_insertion_point(field_mutable:pb.remote.RequestInsertUrls.songs)
  return songs_.Mutable(index);
}
inline ::pb::remote::SongMetadata* RequestInsertUrls::add_songs() {
  // @@protoc_insertion_point(field_add:pb.remote.RequestInsertUrls.songs)
  return songs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pb::remote::SongMetadata >*
RequestInsertUrls::mutable_songs() {
  // @@protoc_insertion_point(field_mutable_list:pb.remote.RequestInsertUrls.songs)
  return &songs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::remote::SongMetadata >&
RequestInsertUrls::songs() const {
  // @@protoc_insertion_point(field_list:pb.remote.RequestInsertUrls.songs)
  return songs_;
}

// -------------------------------------------------------------------

// RequestRemoveSongs

// optional int32 playlist_id = 1;
inline bool RequestRemoveSongs::has_playlist_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestRemoveSongs::set_has_playlist_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestRemoveSongs::clear_has_playlist_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestRemoveSongs::clear_playlist_id() {
  playlist_id_ = 0;
  clear_has_playlist_id();
}
inline ::google::protobuf::int32 RequestRemoveSongs::playlist_id() const {
  // @@protoc_insertion_point(field_get:pb.remote.RequestRemoveSongs.playlist_id)
  return playlist_id_;
}
inline void RequestRemoveSongs::set_playlist_id(::google::protobuf::int32 value) {
  set_has_playlist_id();
  playlist_id_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.RequestRemoveSongs.playlist_id)
}

// repeated int32 songs = 2;
inline int RequestRemoveSongs::songs_size() const {
  return songs_.size();
}
inline void RequestRemoveSongs::clear_songs() {
  songs_.Clear();
}
inline ::google::protobuf::int32 RequestRemoveSongs::songs(int index) const {
  // @@protoc_insertion_point(field_get:pb.remote.RequestRemoveSongs.songs)
  return songs_.Get(index);
}
inline void RequestRemoveSongs::set_songs(int index, ::google::protobuf::int32 value) {
  songs_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.remote.RequestRemoveSongs.songs)
}
inline void RequestRemoveSongs::add_songs(::google::protobuf::int32 value) {
  songs_.Add(value);
  // @@protoc_insertion_point(field_add:pb.remote.RequestRemoveSongs.songs)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RequestRemoveSongs::songs() const {
  // @@protoc_insertion_point(field_list:pb.remote.RequestRemoveSongs.songs)
  return songs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RequestRemoveSongs::mutable_songs() {
  // @@protoc_insertion_point(field_mutable_list:pb.remote.RequestRemoveSongs.songs)
  return &songs_;
}

// -------------------------------------------------------------------

// RequestOpenPlaylist

// optional int32 playlist_id = 1;
inline bool RequestOpenPlaylist::has_playlist_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestOpenPlaylist::set_has_playlist_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestOpenPlaylist::clear_has_playlist_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestOpenPlaylist::clear_playlist_id() {
  playlist_id_ = 0;
  clear_has_playlist_id();
}
inline ::google::protobuf::int32 RequestOpenPlaylist::playlist_id() const {
  // @@protoc_insertion_point(field_get:pb.remote.RequestOpenPlaylist.playlist_id)
  return playlist_id_;
}
inline void RequestOpenPlaylist::set_playlist_id(::google::protobuf::int32 value) {
  set_has_playlist_id();
  playlist_id_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.RequestOpenPlaylist.playlist_id)
}

// -------------------------------------------------------------------

// RequestClosePlaylist

// optional int32 playlist_id = 1;
inline bool RequestClosePlaylist::has_playlist_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestClosePlaylist::set_has_playlist_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestClosePlaylist::clear_has_playlist_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestClosePlaylist::clear_playlist_id() {
  playlist_id_ = 0;
  clear_has_playlist_id();
}
inline ::google::protobuf::int32 RequestClosePlaylist::playlist_id() const {
  // @@protoc_insertion_point(field_get:pb.remote.RequestClosePlaylist.playlist_id)
  return playlist_id_;
}
inline void RequestClosePlaylist::set_playlist_id(::google::protobuf::int32 value) {
  set_has_playlist_id();
  playlist_id_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.RequestClosePlaylist.playlist_id)
}

// -------------------------------------------------------------------

// ResponseLyrics

// repeated .pb.remote.Lyric lyrics = 1;
inline int ResponseLyrics::lyrics_size() const {
  return lyrics_.size();
}
inline void ResponseLyrics::clear_lyrics() {
  lyrics_.Clear();
}
inline const ::pb::remote::Lyric& ResponseLyrics::lyrics(int index) const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseLyrics.lyrics)
  return lyrics_.Get(index);
}
inline ::pb::remote::Lyric* ResponseLyrics::mutable_lyrics(int index) {
  // @@protoc_insertion_point(field_mutable:pb.remote.ResponseLyrics.lyrics)
  return lyrics_.Mutable(index);
}
inline ::pb::remote::Lyric* ResponseLyrics::add_lyrics() {
  // @@protoc_insertion_point(field_add:pb.remote.ResponseLyrics.lyrics)
  return lyrics_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pb::remote::Lyric >*
ResponseLyrics::mutable_lyrics() {
  // @@protoc_insertion_point(field_mutable_list:pb.remote.ResponseLyrics.lyrics)
  return &lyrics_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::remote::Lyric >&
ResponseLyrics::lyrics() const {
  // @@protoc_insertion_point(field_list:pb.remote.ResponseLyrics.lyrics)
  return lyrics_;
}

// -------------------------------------------------------------------

// Lyric

// optional string id = 1;
inline bool Lyric::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Lyric::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Lyric::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Lyric::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& Lyric::id() const {
  // @@protoc_insertion_point(field_get:pb.remote.Lyric.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Lyric::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.remote.Lyric.id)
}
inline void Lyric::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.remote.Lyric.id)
}
inline void Lyric::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.remote.Lyric.id)
}
inline ::std::string* Lyric::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:pb.remote.Lyric.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Lyric::release_id() {
  // @@protoc_insertion_point(field_release:pb.remote.Lyric.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Lyric::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Lyric.id)
}

// optional string title = 2;
inline bool Lyric::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Lyric::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Lyric::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Lyric::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& Lyric::title() const {
  // @@protoc_insertion_point(field_get:pb.remote.Lyric.title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Lyric::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.remote.Lyric.title)
}
inline void Lyric::set_title(const char* value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.remote.Lyric.title)
}
inline void Lyric::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.remote.Lyric.title)
}
inline ::std::string* Lyric::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:pb.remote.Lyric.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Lyric::release_title() {
  // @@protoc_insertion_point(field_release:pb.remote.Lyric.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Lyric::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Lyric.title)
}

// optional string content = 3;
inline bool Lyric::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Lyric::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Lyric::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Lyric::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
inline const ::std::string& Lyric::content() const {
  // @@protoc_insertion_point(field_get:pb.remote.Lyric.content)
  return content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Lyric::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.remote.Lyric.content)
}
inline void Lyric::set_content(const char* value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.remote.Lyric.content)
}
inline void Lyric::set_content(const char* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.remote.Lyric.content)
}
inline ::std::string* Lyric::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:pb.remote.Lyric.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Lyric::release_content() {
  // @@protoc_insertion_point(field_release:pb.remote.Lyric.content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Lyric::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Lyric.content)
}

// -------------------------------------------------------------------

// RequestDownloadSongs

// optional .pb.remote.DownloadItem download_item = 1;
inline bool RequestDownloadSongs::has_download_item() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestDownloadSongs::set_has_download_item() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestDownloadSongs::clear_has_download_item() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestDownloadSongs::clear_download_item() {
  download_item_ = 1;
  clear_has_download_item();
}
inline ::pb::remote::DownloadItem RequestDownloadSongs::download_item() const {
  // @@protoc_insertion_point(field_get:pb.remote.RequestDownloadSongs.download_item)
  return static_cast< ::pb::remote::DownloadItem >(download_item_);
}
inline void RequestDownloadSongs::set_download_item(::pb::remote::DownloadItem value) {
  assert(::pb::remote::DownloadItem_IsValid(value));
  set_has_download_item();
  download_item_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.RequestDownloadSongs.download_item)
}

// optional int32 playlist_id = 2;
inline bool RequestDownloadSongs::has_playlist_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestDownloadSongs::set_has_playlist_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestDownloadSongs::clear_has_playlist_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestDownloadSongs::clear_playlist_id() {
  playlist_id_ = 0;
  clear_has_playlist_id();
}
inline ::google::protobuf::int32 RequestDownloadSongs::playlist_id() const {
  // @@protoc_insertion_point(field_get:pb.remote.RequestDownloadSongs.playlist_id)
  return playlist_id_;
}
inline void RequestDownloadSongs::set_playlist_id(::google::protobuf::int32 value) {
  set_has_playlist_id();
  playlist_id_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.RequestDownloadSongs.playlist_id)
}

// repeated string urls = 3;
inline int RequestDownloadSongs::urls_size() const {
  return urls_.size();
}
inline void RequestDownloadSongs::clear_urls() {
  urls_.Clear();
}
inline const ::std::string& RequestDownloadSongs::urls(int index) const {
  // @@protoc_insertion_point(field_get:pb.remote.RequestDownloadSongs.urls)
  return urls_.Get(index);
}
inline ::std::string* RequestDownloadSongs::mutable_urls(int index) {
  // @@protoc_insertion_point(field_mutable:pb.remote.RequestDownloadSongs.urls)
  return urls_.Mutable(index);
}
inline void RequestDownloadSongs::set_urls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.remote.RequestDownloadSongs.urls)
  urls_.Mutable(index)->assign(value);
}
inline void RequestDownloadSongs::set_urls(int index, const char* value) {
  urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.remote.RequestDownloadSongs.urls)
}
inline void RequestDownloadSongs::set_urls(int index, const char* value, size_t size) {
  urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.remote.RequestDownloadSongs.urls)
}
inline ::std::string* RequestDownloadSongs::add_urls() {
  // @@protoc_insertion_point(field_add_mutable:pb.remote.RequestDownloadSongs.urls)
  return urls_.Add();
}
inline void RequestDownloadSongs::add_urls(const ::std::string& value) {
  urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.remote.RequestDownloadSongs.urls)
}
inline void RequestDownloadSongs::add_urls(const char* value) {
  urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.remote.RequestDownloadSongs.urls)
}
inline void RequestDownloadSongs::add_urls(const char* value, size_t size) {
  urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.remote.RequestDownloadSongs.urls)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RequestDownloadSongs::urls() const {
  // @@protoc_insertion_point(field_list:pb.remote.RequestDownloadSongs.urls)
  return urls_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RequestDownloadSongs::mutable_urls() {
  // @@protoc_insertion_point(field_mutable_list:pb.remote.RequestDownloadSongs.urls)
  return &urls_;
}

// -------------------------------------------------------------------

// ResponseSongFileChunk

// optional int32 chunk_number = 1;
inline bool ResponseSongFileChunk::has_chunk_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseSongFileChunk::set_has_chunk_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseSongFileChunk::clear_has_chunk_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseSongFileChunk::clear_chunk_number() {
  chunk_number_ = 0;
  clear_has_chunk_number();
}
inline ::google::protobuf::int32 ResponseSongFileChunk::chunk_number() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseSongFileChunk.chunk_number)
  return chunk_number_;
}
inline void ResponseSongFileChunk::set_chunk_number(::google::protobuf::int32 value) {
  set_has_chunk_number();
  chunk_number_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.ResponseSongFileChunk.chunk_number)
}

// optional int32 chunk_count = 2;
inline bool ResponseSongFileChunk::has_chunk_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResponseSongFileChunk::set_has_chunk_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResponseSongFileChunk::clear_has_chunk_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResponseSongFileChunk::clear_chunk_count() {
  chunk_count_ = 0;
  clear_has_chunk_count();
}
inline ::google::protobuf::int32 ResponseSongFileChunk::chunk_count() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseSongFileChunk.chunk_count)
  return chunk_count_;
}
inline void ResponseSongFileChunk::set_chunk_count(::google::protobuf::int32 value) {
  set_has_chunk_count();
  chunk_count_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.ResponseSongFileChunk.chunk_count)
}

// optional int32 file_number = 3;
inline bool ResponseSongFileChunk::has_file_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResponseSongFileChunk::set_has_file_number() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResponseSongFileChunk::clear_has_file_number() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResponseSongFileChunk::clear_file_number() {
  file_number_ = 0;
  clear_has_file_number();
}
inline ::google::protobuf::int32 ResponseSongFileChunk::file_number() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseSongFileChunk.file_number)
  return file_number_;
}
inline void ResponseSongFileChunk::set_file_number(::google::protobuf::int32 value) {
  set_has_file_number();
  file_number_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.ResponseSongFileChunk.file_number)
}

// optional int32 file_count = 4;
inline bool ResponseSongFileChunk::has_file_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResponseSongFileChunk::set_has_file_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResponseSongFileChunk::clear_has_file_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResponseSongFileChunk::clear_file_count() {
  file_count_ = 0;
  clear_has_file_count();
}
inline ::google::protobuf::int32 ResponseSongFileChunk::file_count() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseSongFileChunk.file_count)
  return file_count_;
}
inline void ResponseSongFileChunk::set_file_count(::google::protobuf::int32 value) {
  set_has_file_count();
  file_count_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.ResponseSongFileChunk.file_count)
}

// optional .pb.remote.SongMetadata song_metadata = 6;
inline bool ResponseSongFileChunk::has_song_metadata() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResponseSongFileChunk::set_has_song_metadata() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ResponseSongFileChunk::clear_has_song_metadata() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ResponseSongFileChunk::clear_song_metadata() {
  if (song_metadata_ != NULL) song_metadata_->::pb::remote::SongMetadata::Clear();
  clear_has_song_metadata();
}
inline const ::pb::remote::SongMetadata& ResponseSongFileChunk::song_metadata() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseSongFileChunk.song_metadata)
  return song_metadata_ != NULL ? *song_metadata_ : *default_instance_->song_metadata_;
}
inline ::pb::remote::SongMetadata* ResponseSongFileChunk::mutable_song_metadata() {
  set_has_song_metadata();
  if (song_metadata_ == NULL) {
    song_metadata_ = new ::pb::remote::SongMetadata;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.ResponseSongFileChunk.song_metadata)
  return song_metadata_;
}
inline ::pb::remote::SongMetadata* ResponseSongFileChunk::release_song_metadata() {
  // @@protoc_insertion_point(field_release:pb.remote.ResponseSongFileChunk.song_metadata)
  clear_has_song_metadata();
  ::pb::remote::SongMetadata* temp = song_metadata_;
  song_metadata_ = NULL;
  return temp;
}
inline void ResponseSongFileChunk::set_allocated_song_metadata(::pb::remote::SongMetadata* song_metadata) {
  delete song_metadata_;
  song_metadata_ = song_metadata;
  if (song_metadata) {
    set_has_song_metadata();
  } else {
    clear_has_song_metadata();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.ResponseSongFileChunk.song_metadata)
}

// optional bytes data = 7;
inline bool ResponseSongFileChunk::has_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ResponseSongFileChunk::set_has_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ResponseSongFileChunk::clear_has_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ResponseSongFileChunk::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& ResponseSongFileChunk::data() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseSongFileChunk.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseSongFileChunk::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.remote.ResponseSongFileChunk.data)
}
inline void ResponseSongFileChunk::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.remote.ResponseSongFileChunk.data)
}
inline void ResponseSongFileChunk::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.remote.ResponseSongFileChunk.data)
}
inline ::std::string* ResponseSongFileChunk::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:pb.remote.ResponseSongFileChunk.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseSongFileChunk::release_data() {
  // @@protoc_insertion_point(field_release:pb.remote.ResponseSongFileChunk.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseSongFileChunk::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:pb.remote.ResponseSongFileChunk.data)
}

// optional int32 size = 8;
inline bool ResponseSongFileChunk::has_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ResponseSongFileChunk::set_has_size() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ResponseSongFileChunk::clear_has_size() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ResponseSongFileChunk::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 ResponseSongFileChunk::size() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseSongFileChunk.size)
  return size_;
}
inline void ResponseSongFileChunk::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.ResponseSongFileChunk.size)
}

// optional bytes file_hash = 9;
inline bool ResponseSongFileChunk::has_file_hash() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ResponseSongFileChunk::set_has_file_hash() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ResponseSongFileChunk::clear_has_file_hash() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ResponseSongFileChunk::clear_file_hash() {
  file_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_hash();
}
inline const ::std::string& ResponseSongFileChunk::file_hash() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseSongFileChunk.file_hash)
  return file_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseSongFileChunk::set_file_hash(const ::std::string& value) {
  set_has_file_hash();
  file_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.remote.ResponseSongFileChunk.file_hash)
}
inline void ResponseSongFileChunk::set_file_hash(const char* value) {
  set_has_file_hash();
  file_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.remote.ResponseSongFileChunk.file_hash)
}
inline void ResponseSongFileChunk::set_file_hash(const void* value, size_t size) {
  set_has_file_hash();
  file_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.remote.ResponseSongFileChunk.file_hash)
}
inline ::std::string* ResponseSongFileChunk::mutable_file_hash() {
  set_has_file_hash();
  // @@protoc_insertion_point(field_mutable:pb.remote.ResponseSongFileChunk.file_hash)
  return file_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseSongFileChunk::release_file_hash() {
  // @@protoc_insertion_point(field_release:pb.remote.ResponseSongFileChunk.file_hash)
  clear_has_file_hash();
  return file_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseSongFileChunk::set_allocated_file_hash(::std::string* file_hash) {
  if (file_hash != NULL) {
    set_has_file_hash();
  } else {
    clear_has_file_hash();
  }
  file_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_hash);
  // @@protoc_insertion_point(field_set_allocated:pb.remote.ResponseSongFileChunk.file_hash)
}

// -------------------------------------------------------------------

// ResponseLibraryChunk

// optional int32 chunk_number = 1;
inline bool ResponseLibraryChunk::has_chunk_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseLibraryChunk::set_has_chunk_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseLibraryChunk::clear_has_chunk_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseLibraryChunk::clear_chunk_number() {
  chunk_number_ = 0;
  clear_has_chunk_number();
}
inline ::google::protobuf::int32 ResponseLibraryChunk::chunk_number() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseLibraryChunk.chunk_number)
  return chunk_number_;
}
inline void ResponseLibraryChunk::set_chunk_number(::google::protobuf::int32 value) {
  set_has_chunk_number();
  chunk_number_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.ResponseLibraryChunk.chunk_number)
}

// optional int32 chunk_count = 2;
inline bool ResponseLibraryChunk::has_chunk_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResponseLibraryChunk::set_has_chunk_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResponseLibraryChunk::clear_has_chunk_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResponseLibraryChunk::clear_chunk_count() {
  chunk_count_ = 0;
  clear_has_chunk_count();
}
inline ::google::protobuf::int32 ResponseLibraryChunk::chunk_count() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseLibraryChunk.chunk_count)
  return chunk_count_;
}
inline void ResponseLibraryChunk::set_chunk_count(::google::protobuf::int32 value) {
  set_has_chunk_count();
  chunk_count_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.ResponseLibraryChunk.chunk_count)
}

// optional bytes data = 3;
inline bool ResponseLibraryChunk::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResponseLibraryChunk::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResponseLibraryChunk::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResponseLibraryChunk::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& ResponseLibraryChunk::data() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseLibraryChunk.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseLibraryChunk::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.remote.ResponseLibraryChunk.data)
}
inline void ResponseLibraryChunk::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.remote.ResponseLibraryChunk.data)
}
inline void ResponseLibraryChunk::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.remote.ResponseLibraryChunk.data)
}
inline ::std::string* ResponseLibraryChunk::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:pb.remote.ResponseLibraryChunk.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseLibraryChunk::release_data() {
  // @@protoc_insertion_point(field_release:pb.remote.ResponseLibraryChunk.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseLibraryChunk::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:pb.remote.ResponseLibraryChunk.data)
}

// optional int32 size = 4;
inline bool ResponseLibraryChunk::has_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResponseLibraryChunk::set_has_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResponseLibraryChunk::clear_has_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResponseLibraryChunk::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 ResponseLibraryChunk::size() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseLibraryChunk.size)
  return size_;
}
inline void ResponseLibraryChunk::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.ResponseLibraryChunk.size)
}

// optional bytes file_hash = 5;
inline bool ResponseLibraryChunk::has_file_hash() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResponseLibraryChunk::set_has_file_hash() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ResponseLibraryChunk::clear_has_file_hash() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ResponseLibraryChunk::clear_file_hash() {
  file_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_hash();
}
inline const ::std::string& ResponseLibraryChunk::file_hash() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseLibraryChunk.file_hash)
  return file_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseLibraryChunk::set_file_hash(const ::std::string& value) {
  set_has_file_hash();
  file_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.remote.ResponseLibraryChunk.file_hash)
}
inline void ResponseLibraryChunk::set_file_hash(const char* value) {
  set_has_file_hash();
  file_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.remote.ResponseLibraryChunk.file_hash)
}
inline void ResponseLibraryChunk::set_file_hash(const void* value, size_t size) {
  set_has_file_hash();
  file_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.remote.ResponseLibraryChunk.file_hash)
}
inline ::std::string* ResponseLibraryChunk::mutable_file_hash() {
  set_has_file_hash();
  // @@protoc_insertion_point(field_mutable:pb.remote.ResponseLibraryChunk.file_hash)
  return file_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseLibraryChunk::release_file_hash() {
  // @@protoc_insertion_point(field_release:pb.remote.ResponseLibraryChunk.file_hash)
  clear_has_file_hash();
  return file_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseLibraryChunk::set_allocated_file_hash(::std::string* file_hash) {
  if (file_hash != NULL) {
    set_has_file_hash();
  } else {
    clear_has_file_hash();
  }
  file_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_hash);
  // @@protoc_insertion_point(field_set_allocated:pb.remote.ResponseLibraryChunk.file_hash)
}

// -------------------------------------------------------------------

// ResponseSongOffer

// optional bool accepted = 1;
inline bool ResponseSongOffer::has_accepted() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseSongOffer::set_has_accepted() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseSongOffer::clear_has_accepted() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseSongOffer::clear_accepted() {
  accepted_ = false;
  clear_has_accepted();
}
inline bool ResponseSongOffer::accepted() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseSongOffer.accepted)
  return accepted_;
}
inline void ResponseSongOffer::set_accepted(bool value) {
  set_has_accepted();
  accepted_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.ResponseSongOffer.accepted)
}

// -------------------------------------------------------------------

// RequestRateSong

// optional float rating = 1;
inline bool RequestRateSong::has_rating() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestRateSong::set_has_rating() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestRateSong::clear_has_rating() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestRateSong::clear_rating() {
  rating_ = 0;
  clear_has_rating();
}
inline float RequestRateSong::rating() const {
  // @@protoc_insertion_point(field_get:pb.remote.RequestRateSong.rating)
  return rating_;
}
inline void RequestRateSong::set_rating(float value) {
  set_has_rating();
  rating_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.RequestRateSong.rating)
}

// -------------------------------------------------------------------

// ResponseDownloadTotalSize

// optional int32 total_size = 1;
inline bool ResponseDownloadTotalSize::has_total_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseDownloadTotalSize::set_has_total_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseDownloadTotalSize::clear_has_total_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseDownloadTotalSize::clear_total_size() {
  total_size_ = 0;
  clear_has_total_size();
}
inline ::google::protobuf::int32 ResponseDownloadTotalSize::total_size() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseDownloadTotalSize.total_size)
  return total_size_;
}
inline void ResponseDownloadTotalSize::set_total_size(::google::protobuf::int32 value) {
  set_has_total_size();
  total_size_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.ResponseDownloadTotalSize.total_size)
}

// optional int32 file_count = 2;
inline bool ResponseDownloadTotalSize::has_file_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResponseDownloadTotalSize::set_has_file_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResponseDownloadTotalSize::clear_has_file_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResponseDownloadTotalSize::clear_file_count() {
  file_count_ = 0;
  clear_has_file_count();
}
inline ::google::protobuf::int32 ResponseDownloadTotalSize::file_count() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseDownloadTotalSize.file_count)
  return file_count_;
}
inline void ResponseDownloadTotalSize::set_file_count(::google::protobuf::int32 value) {
  set_has_file_count();
  file_count_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.ResponseDownloadTotalSize.file_count)
}

// -------------------------------------------------------------------

// RequestGlobalSearch

// optional string query = 1;
inline bool RequestGlobalSearch::has_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestGlobalSearch::set_has_query() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestGlobalSearch::clear_has_query() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestGlobalSearch::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
inline const ::std::string& RequestGlobalSearch::query() const {
  // @@protoc_insertion_point(field_get:pb.remote.RequestGlobalSearch.query)
  return query_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestGlobalSearch::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.remote.RequestGlobalSearch.query)
}
inline void RequestGlobalSearch::set_query(const char* value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.remote.RequestGlobalSearch.query)
}
inline void RequestGlobalSearch::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.remote.RequestGlobalSearch.query)
}
inline ::std::string* RequestGlobalSearch::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:pb.remote.RequestGlobalSearch.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestGlobalSearch::release_query() {
  // @@protoc_insertion_point(field_release:pb.remote.RequestGlobalSearch.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestGlobalSearch::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:pb.remote.RequestGlobalSearch.query)
}

// -------------------------------------------------------------------

// ResponseGlobalSearch

// optional int32 id = 1;
inline bool ResponseGlobalSearch::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseGlobalSearch::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseGlobalSearch::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseGlobalSearch::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ResponseGlobalSearch::id() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseGlobalSearch.id)
  return id_;
}
inline void ResponseGlobalSearch::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.ResponseGlobalSearch.id)
}

// optional string query = 2;
inline bool ResponseGlobalSearch::has_query() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResponseGlobalSearch::set_has_query() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResponseGlobalSearch::clear_has_query() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResponseGlobalSearch::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
inline const ::std::string& ResponseGlobalSearch::query() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseGlobalSearch.query)
  return query_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseGlobalSearch::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.remote.ResponseGlobalSearch.query)
}
inline void ResponseGlobalSearch::set_query(const char* value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.remote.ResponseGlobalSearch.query)
}
inline void ResponseGlobalSearch::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.remote.ResponseGlobalSearch.query)
}
inline ::std::string* ResponseGlobalSearch::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:pb.remote.ResponseGlobalSearch.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseGlobalSearch::release_query() {
  // @@protoc_insertion_point(field_release:pb.remote.ResponseGlobalSearch.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseGlobalSearch::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:pb.remote.ResponseGlobalSearch.query)
}

// optional string search_provider = 3;
inline bool ResponseGlobalSearch::has_search_provider() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResponseGlobalSearch::set_has_search_provider() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResponseGlobalSearch::clear_has_search_provider() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResponseGlobalSearch::clear_search_provider() {
  search_provider_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_search_provider();
}
inline const ::std::string& ResponseGlobalSearch::search_provider() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseGlobalSearch.search_provider)
  return search_provider_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseGlobalSearch::set_search_provider(const ::std::string& value) {
  set_has_search_provider();
  search_provider_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.remote.ResponseGlobalSearch.search_provider)
}
inline void ResponseGlobalSearch::set_search_provider(const char* value) {
  set_has_search_provider();
  search_provider_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.remote.ResponseGlobalSearch.search_provider)
}
inline void ResponseGlobalSearch::set_search_provider(const char* value, size_t size) {
  set_has_search_provider();
  search_provider_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.remote.ResponseGlobalSearch.search_provider)
}
inline ::std::string* ResponseGlobalSearch::mutable_search_provider() {
  set_has_search_provider();
  // @@protoc_insertion_point(field_mutable:pb.remote.ResponseGlobalSearch.search_provider)
  return search_provider_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseGlobalSearch::release_search_provider() {
  // @@protoc_insertion_point(field_release:pb.remote.ResponseGlobalSearch.search_provider)
  clear_has_search_provider();
  return search_provider_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseGlobalSearch::set_allocated_search_provider(::std::string* search_provider) {
  if (search_provider != NULL) {
    set_has_search_provider();
  } else {
    clear_has_search_provider();
  }
  search_provider_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), search_provider);
  // @@protoc_insertion_point(field_set_allocated:pb.remote.ResponseGlobalSearch.search_provider)
}

// repeated .pb.remote.SongMetadata song_metadata = 4;
inline int ResponseGlobalSearch::song_metadata_size() const {
  return song_metadata_.size();
}
inline void ResponseGlobalSearch::clear_song_metadata() {
  song_metadata_.Clear();
}
inline const ::pb::remote::SongMetadata& ResponseGlobalSearch::song_metadata(int index) const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseGlobalSearch.song_metadata)
  return song_metadata_.Get(index);
}
inline ::pb::remote::SongMetadata* ResponseGlobalSearch::mutable_song_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:pb.remote.ResponseGlobalSearch.song_metadata)
  return song_metadata_.Mutable(index);
}
inline ::pb::remote::SongMetadata* ResponseGlobalSearch::add_song_metadata() {
  // @@protoc_insertion_point(field_add:pb.remote.ResponseGlobalSearch.song_metadata)
  return song_metadata_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pb::remote::SongMetadata >*
ResponseGlobalSearch::mutable_song_metadata() {
  // @@protoc_insertion_point(field_mutable_list:pb.remote.ResponseGlobalSearch.song_metadata)
  return &song_metadata_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::remote::SongMetadata >&
ResponseGlobalSearch::song_metadata() const {
  // @@protoc_insertion_point(field_list:pb.remote.ResponseGlobalSearch.song_metadata)
  return song_metadata_;
}

// optional bytes search_provider_icon = 5;
inline bool ResponseGlobalSearch::has_search_provider_icon() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResponseGlobalSearch::set_has_search_provider_icon() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ResponseGlobalSearch::clear_has_search_provider_icon() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ResponseGlobalSearch::clear_search_provider_icon() {
  search_provider_icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_search_provider_icon();
}
inline const ::std::string& ResponseGlobalSearch::search_provider_icon() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseGlobalSearch.search_provider_icon)
  return search_provider_icon_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseGlobalSearch::set_search_provider_icon(const ::std::string& value) {
  set_has_search_provider_icon();
  search_provider_icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.remote.ResponseGlobalSearch.search_provider_icon)
}
inline void ResponseGlobalSearch::set_search_provider_icon(const char* value) {
  set_has_search_provider_icon();
  search_provider_icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.remote.ResponseGlobalSearch.search_provider_icon)
}
inline void ResponseGlobalSearch::set_search_provider_icon(const void* value, size_t size) {
  set_has_search_provider_icon();
  search_provider_icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.remote.ResponseGlobalSearch.search_provider_icon)
}
inline ::std::string* ResponseGlobalSearch::mutable_search_provider_icon() {
  set_has_search_provider_icon();
  // @@protoc_insertion_point(field_mutable:pb.remote.ResponseGlobalSearch.search_provider_icon)
  return search_provider_icon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseGlobalSearch::release_search_provider_icon() {
  // @@protoc_insertion_point(field_release:pb.remote.ResponseGlobalSearch.search_provider_icon)
  clear_has_search_provider_icon();
  return search_provider_icon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseGlobalSearch::set_allocated_search_provider_icon(::std::string* search_provider_icon) {
  if (search_provider_icon != NULL) {
    set_has_search_provider_icon();
  } else {
    clear_has_search_provider_icon();
  }
  search_provider_icon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), search_provider_icon);
  // @@protoc_insertion_point(field_set_allocated:pb.remote.ResponseGlobalSearch.search_provider_icon)
}

// -------------------------------------------------------------------

// ResponseTranscoderStatus

// optional int32 processed = 1;
inline bool ResponseTranscoderStatus::has_processed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseTranscoderStatus::set_has_processed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseTranscoderStatus::clear_has_processed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseTranscoderStatus::clear_processed() {
  processed_ = 0;
  clear_has_processed();
}
inline ::google::protobuf::int32 ResponseTranscoderStatus::processed() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseTranscoderStatus.processed)
  return processed_;
}
inline void ResponseTranscoderStatus::set_processed(::google::protobuf::int32 value) {
  set_has_processed();
  processed_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.ResponseTranscoderStatus.processed)
}

// optional int32 total = 2;
inline bool ResponseTranscoderStatus::has_total() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResponseTranscoderStatus::set_has_total() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResponseTranscoderStatus::clear_has_total() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResponseTranscoderStatus::clear_total() {
  total_ = 0;
  clear_has_total();
}
inline ::google::protobuf::int32 ResponseTranscoderStatus::total() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseTranscoderStatus.total)
  return total_;
}
inline void ResponseTranscoderStatus::set_total(::google::protobuf::int32 value) {
  set_has_total();
  total_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.ResponseTranscoderStatus.total)
}

// -------------------------------------------------------------------

// ResponseGlobalSearchStatus

// optional int32 id = 1;
inline bool ResponseGlobalSearchStatus::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseGlobalSearchStatus::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseGlobalSearchStatus::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseGlobalSearchStatus::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ResponseGlobalSearchStatus::id() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseGlobalSearchStatus.id)
  return id_;
}
inline void ResponseGlobalSearchStatus::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.ResponseGlobalSearchStatus.id)
}

// optional string query = 2;
inline bool ResponseGlobalSearchStatus::has_query() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResponseGlobalSearchStatus::set_has_query() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResponseGlobalSearchStatus::clear_has_query() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResponseGlobalSearchStatus::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
inline const ::std::string& ResponseGlobalSearchStatus::query() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseGlobalSearchStatus.query)
  return query_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseGlobalSearchStatus::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.remote.ResponseGlobalSearchStatus.query)
}
inline void ResponseGlobalSearchStatus::set_query(const char* value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.remote.ResponseGlobalSearchStatus.query)
}
inline void ResponseGlobalSearchStatus::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.remote.ResponseGlobalSearchStatus.query)
}
inline ::std::string* ResponseGlobalSearchStatus::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:pb.remote.ResponseGlobalSearchStatus.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseGlobalSearchStatus::release_query() {
  // @@protoc_insertion_point(field_release:pb.remote.ResponseGlobalSearchStatus.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseGlobalSearchStatus::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:pb.remote.ResponseGlobalSearchStatus.query)
}

// optional .pb.remote.GlobalSearchStatus status = 3;
inline bool ResponseGlobalSearchStatus::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResponseGlobalSearchStatus::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResponseGlobalSearchStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResponseGlobalSearchStatus::clear_status() {
  status_ = 1;
  clear_has_status();
}
inline ::pb::remote::GlobalSearchStatus ResponseGlobalSearchStatus::status() const {
  // @@protoc_insertion_point(field_get:pb.remote.ResponseGlobalSearchStatus.status)
  return static_cast< ::pb::remote::GlobalSearchStatus >(status_);
}
inline void ResponseGlobalSearchStatus::set_status(::pb::remote::GlobalSearchStatus value) {
  assert(::pb::remote::GlobalSearchStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.ResponseGlobalSearchStatus.status)
}

// -------------------------------------------------------------------

// Message

// optional int32 version = 1 [default = 21];
inline bool Message::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message::clear_version() {
  version_ = 21;
  clear_has_version();
}
inline ::google::protobuf::int32 Message::version() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.version)
  return version_;
}
inline void Message::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.Message.version)
}

// optional .pb.remote.MsgType type = 2 [default = UNKNOWN];
inline bool Message::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Message::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Message::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Message::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::pb::remote::MsgType Message::type() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.type)
  return static_cast< ::pb::remote::MsgType >(type_);
}
inline void Message::set_type(::pb::remote::MsgType value) {
  assert(::pb::remote::MsgType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.remote.Message.type)
}

// optional .pb.remote.RequestConnect request_connect = 21;
inline bool Message::has_request_connect() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Message::set_has_request_connect() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Message::clear_has_request_connect() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Message::clear_request_connect() {
  if (request_connect_ != NULL) request_connect_->::pb::remote::RequestConnect::Clear();
  clear_has_request_connect();
}
inline const ::pb::remote::RequestConnect& Message::request_connect() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.request_connect)
  return request_connect_ != NULL ? *request_connect_ : *default_instance_->request_connect_;
}
inline ::pb::remote::RequestConnect* Message::mutable_request_connect() {
  set_has_request_connect();
  if (request_connect_ == NULL) {
    request_connect_ = new ::pb::remote::RequestConnect;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.request_connect)
  return request_connect_;
}
inline ::pb::remote::RequestConnect* Message::release_request_connect() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.request_connect)
  clear_has_request_connect();
  ::pb::remote::RequestConnect* temp = request_connect_;
  request_connect_ = NULL;
  return temp;
}
inline void Message::set_allocated_request_connect(::pb::remote::RequestConnect* request_connect) {
  delete request_connect_;
  request_connect_ = request_connect;
  if (request_connect) {
    set_has_request_connect();
  } else {
    clear_has_request_connect();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.request_connect)
}

// optional .pb.remote.RequestPlaylists request_playlists = 27;
inline bool Message::has_request_playlists() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Message::set_has_request_playlists() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Message::clear_has_request_playlists() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Message::clear_request_playlists() {
  if (request_playlists_ != NULL) request_playlists_->::pb::remote::RequestPlaylists::Clear();
  clear_has_request_playlists();
}
inline const ::pb::remote::RequestPlaylists& Message::request_playlists() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.request_playlists)
  return request_playlists_ != NULL ? *request_playlists_ : *default_instance_->request_playlists_;
}
inline ::pb::remote::RequestPlaylists* Message::mutable_request_playlists() {
  set_has_request_playlists();
  if (request_playlists_ == NULL) {
    request_playlists_ = new ::pb::remote::RequestPlaylists;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.request_playlists)
  return request_playlists_;
}
inline ::pb::remote::RequestPlaylists* Message::release_request_playlists() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.request_playlists)
  clear_has_request_playlists();
  ::pb::remote::RequestPlaylists* temp = request_playlists_;
  request_playlists_ = NULL;
  return temp;
}
inline void Message::set_allocated_request_playlists(::pb::remote::RequestPlaylists* request_playlists) {
  delete request_playlists_;
  request_playlists_ = request_playlists;
  if (request_playlists) {
    set_has_request_playlists();
  } else {
    clear_has_request_playlists();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.request_playlists)
}

// optional .pb.remote.RequestPlaylistSongs request_playlist_songs = 10;
inline bool Message::has_request_playlist_songs() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Message::set_has_request_playlist_songs() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Message::clear_has_request_playlist_songs() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Message::clear_request_playlist_songs() {
  if (request_playlist_songs_ != NULL) request_playlist_songs_->::pb::remote::RequestPlaylistSongs::Clear();
  clear_has_request_playlist_songs();
}
inline const ::pb::remote::RequestPlaylistSongs& Message::request_playlist_songs() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.request_playlist_songs)
  return request_playlist_songs_ != NULL ? *request_playlist_songs_ : *default_instance_->request_playlist_songs_;
}
inline ::pb::remote::RequestPlaylistSongs* Message::mutable_request_playlist_songs() {
  set_has_request_playlist_songs();
  if (request_playlist_songs_ == NULL) {
    request_playlist_songs_ = new ::pb::remote::RequestPlaylistSongs;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.request_playlist_songs)
  return request_playlist_songs_;
}
inline ::pb::remote::RequestPlaylistSongs* Message::release_request_playlist_songs() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.request_playlist_songs)
  clear_has_request_playlist_songs();
  ::pb::remote::RequestPlaylistSongs* temp = request_playlist_songs_;
  request_playlist_songs_ = NULL;
  return temp;
}
inline void Message::set_allocated_request_playlist_songs(::pb::remote::RequestPlaylistSongs* request_playlist_songs) {
  delete request_playlist_songs_;
  request_playlist_songs_ = request_playlist_songs;
  if (request_playlist_songs) {
    set_has_request_playlist_songs();
  } else {
    clear_has_request_playlist_songs();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.request_playlist_songs)
}

// optional .pb.remote.RequestChangeSong request_change_song = 11;
inline bool Message::has_request_change_song() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Message::set_has_request_change_song() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Message::clear_has_request_change_song() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Message::clear_request_change_song() {
  if (request_change_song_ != NULL) request_change_song_->::pb::remote::RequestChangeSong::Clear();
  clear_has_request_change_song();
}
inline const ::pb::remote::RequestChangeSong& Message::request_change_song() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.request_change_song)
  return request_change_song_ != NULL ? *request_change_song_ : *default_instance_->request_change_song_;
}
inline ::pb::remote::RequestChangeSong* Message::mutable_request_change_song() {
  set_has_request_change_song();
  if (request_change_song_ == NULL) {
    request_change_song_ = new ::pb::remote::RequestChangeSong;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.request_change_song)
  return request_change_song_;
}
inline ::pb::remote::RequestChangeSong* Message::release_request_change_song() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.request_change_song)
  clear_has_request_change_song();
  ::pb::remote::RequestChangeSong* temp = request_change_song_;
  request_change_song_ = NULL;
  return temp;
}
inline void Message::set_allocated_request_change_song(::pb::remote::RequestChangeSong* request_change_song) {
  delete request_change_song_;
  request_change_song_ = request_change_song;
  if (request_change_song) {
    set_has_request_change_song();
  } else {
    clear_has_request_change_song();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.request_change_song)
}

// optional .pb.remote.RequestSetVolume request_set_volume = 12;
inline bool Message::has_request_set_volume() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Message::set_has_request_set_volume() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Message::clear_has_request_set_volume() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Message::clear_request_set_volume() {
  if (request_set_volume_ != NULL) request_set_volume_->::pb::remote::RequestSetVolume::Clear();
  clear_has_request_set_volume();
}
inline const ::pb::remote::RequestSetVolume& Message::request_set_volume() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.request_set_volume)
  return request_set_volume_ != NULL ? *request_set_volume_ : *default_instance_->request_set_volume_;
}
inline ::pb::remote::RequestSetVolume* Message::mutable_request_set_volume() {
  set_has_request_set_volume();
  if (request_set_volume_ == NULL) {
    request_set_volume_ = new ::pb::remote::RequestSetVolume;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.request_set_volume)
  return request_set_volume_;
}
inline ::pb::remote::RequestSetVolume* Message::release_request_set_volume() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.request_set_volume)
  clear_has_request_set_volume();
  ::pb::remote::RequestSetVolume* temp = request_set_volume_;
  request_set_volume_ = NULL;
  return temp;
}
inline void Message::set_allocated_request_set_volume(::pb::remote::RequestSetVolume* request_set_volume) {
  delete request_set_volume_;
  request_set_volume_ = request_set_volume;
  if (request_set_volume) {
    set_has_request_set_volume();
  } else {
    clear_has_request_set_volume();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.request_set_volume)
}

// optional .pb.remote.RequestSetTrackPosition request_set_track_position = 23;
inline bool Message::has_request_set_track_position() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Message::set_has_request_set_track_position() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Message::clear_has_request_set_track_position() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Message::clear_request_set_track_position() {
  if (request_set_track_position_ != NULL) request_set_track_position_->::pb::remote::RequestSetTrackPosition::Clear();
  clear_has_request_set_track_position();
}
inline const ::pb::remote::RequestSetTrackPosition& Message::request_set_track_position() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.request_set_track_position)
  return request_set_track_position_ != NULL ? *request_set_track_position_ : *default_instance_->request_set_track_position_;
}
inline ::pb::remote::RequestSetTrackPosition* Message::mutable_request_set_track_position() {
  set_has_request_set_track_position();
  if (request_set_track_position_ == NULL) {
    request_set_track_position_ = new ::pb::remote::RequestSetTrackPosition;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.request_set_track_position)
  return request_set_track_position_;
}
inline ::pb::remote::RequestSetTrackPosition* Message::release_request_set_track_position() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.request_set_track_position)
  clear_has_request_set_track_position();
  ::pb::remote::RequestSetTrackPosition* temp = request_set_track_position_;
  request_set_track_position_ = NULL;
  return temp;
}
inline void Message::set_allocated_request_set_track_position(::pb::remote::RequestSetTrackPosition* request_set_track_position) {
  delete request_set_track_position_;
  request_set_track_position_ = request_set_track_position;
  if (request_set_track_position) {
    set_has_request_set_track_position();
  } else {
    clear_has_request_set_track_position();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.request_set_track_position)
}

// optional .pb.remote.RequestInsertUrls request_insert_urls = 25;
inline bool Message::has_request_insert_urls() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Message::set_has_request_insert_urls() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Message::clear_has_request_insert_urls() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Message::clear_request_insert_urls() {
  if (request_insert_urls_ != NULL) request_insert_urls_->::pb::remote::RequestInsertUrls::Clear();
  clear_has_request_insert_urls();
}
inline const ::pb::remote::RequestInsertUrls& Message::request_insert_urls() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.request_insert_urls)
  return request_insert_urls_ != NULL ? *request_insert_urls_ : *default_instance_->request_insert_urls_;
}
inline ::pb::remote::RequestInsertUrls* Message::mutable_request_insert_urls() {
  set_has_request_insert_urls();
  if (request_insert_urls_ == NULL) {
    request_insert_urls_ = new ::pb::remote::RequestInsertUrls;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.request_insert_urls)
  return request_insert_urls_;
}
inline ::pb::remote::RequestInsertUrls* Message::release_request_insert_urls() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.request_insert_urls)
  clear_has_request_insert_urls();
  ::pb::remote::RequestInsertUrls* temp = request_insert_urls_;
  request_insert_urls_ = NULL;
  return temp;
}
inline void Message::set_allocated_request_insert_urls(::pb::remote::RequestInsertUrls* request_insert_urls) {
  delete request_insert_urls_;
  request_insert_urls_ = request_insert_urls;
  if (request_insert_urls) {
    set_has_request_insert_urls();
  } else {
    clear_has_request_insert_urls();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.request_insert_urls)
}

// optional .pb.remote.RequestRemoveSongs request_remove_songs = 26;
inline bool Message::has_request_remove_songs() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Message::set_has_request_remove_songs() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Message::clear_has_request_remove_songs() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Message::clear_request_remove_songs() {
  if (request_remove_songs_ != NULL) request_remove_songs_->::pb::remote::RequestRemoveSongs::Clear();
  clear_has_request_remove_songs();
}
inline const ::pb::remote::RequestRemoveSongs& Message::request_remove_songs() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.request_remove_songs)
  return request_remove_songs_ != NULL ? *request_remove_songs_ : *default_instance_->request_remove_songs_;
}
inline ::pb::remote::RequestRemoveSongs* Message::mutable_request_remove_songs() {
  set_has_request_remove_songs();
  if (request_remove_songs_ == NULL) {
    request_remove_songs_ = new ::pb::remote::RequestRemoveSongs;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.request_remove_songs)
  return request_remove_songs_;
}
inline ::pb::remote::RequestRemoveSongs* Message::release_request_remove_songs() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.request_remove_songs)
  clear_has_request_remove_songs();
  ::pb::remote::RequestRemoveSongs* temp = request_remove_songs_;
  request_remove_songs_ = NULL;
  return temp;
}
inline void Message::set_allocated_request_remove_songs(::pb::remote::RequestRemoveSongs* request_remove_songs) {
  delete request_remove_songs_;
  request_remove_songs_ = request_remove_songs;
  if (request_remove_songs) {
    set_has_request_remove_songs();
  } else {
    clear_has_request_remove_songs();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.request_remove_songs)
}

// optional .pb.remote.RequestOpenPlaylist request_open_playlist = 28;
inline bool Message::has_request_open_playlist() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Message::set_has_request_open_playlist() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Message::clear_has_request_open_playlist() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Message::clear_request_open_playlist() {
  if (request_open_playlist_ != NULL) request_open_playlist_->::pb::remote::RequestOpenPlaylist::Clear();
  clear_has_request_open_playlist();
}
inline const ::pb::remote::RequestOpenPlaylist& Message::request_open_playlist() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.request_open_playlist)
  return request_open_playlist_ != NULL ? *request_open_playlist_ : *default_instance_->request_open_playlist_;
}
inline ::pb::remote::RequestOpenPlaylist* Message::mutable_request_open_playlist() {
  set_has_request_open_playlist();
  if (request_open_playlist_ == NULL) {
    request_open_playlist_ = new ::pb::remote::RequestOpenPlaylist;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.request_open_playlist)
  return request_open_playlist_;
}
inline ::pb::remote::RequestOpenPlaylist* Message::release_request_open_playlist() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.request_open_playlist)
  clear_has_request_open_playlist();
  ::pb::remote::RequestOpenPlaylist* temp = request_open_playlist_;
  request_open_playlist_ = NULL;
  return temp;
}
inline void Message::set_allocated_request_open_playlist(::pb::remote::RequestOpenPlaylist* request_open_playlist) {
  delete request_open_playlist_;
  request_open_playlist_ = request_open_playlist;
  if (request_open_playlist) {
    set_has_request_open_playlist();
  } else {
    clear_has_request_open_playlist();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.request_open_playlist)
}

// optional .pb.remote.RequestClosePlaylist request_close_playlist = 29;
inline bool Message::has_request_close_playlist() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Message::set_has_request_close_playlist() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Message::clear_has_request_close_playlist() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Message::clear_request_close_playlist() {
  if (request_close_playlist_ != NULL) request_close_playlist_->::pb::remote::RequestClosePlaylist::Clear();
  clear_has_request_close_playlist();
}
inline const ::pb::remote::RequestClosePlaylist& Message::request_close_playlist() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.request_close_playlist)
  return request_close_playlist_ != NULL ? *request_close_playlist_ : *default_instance_->request_close_playlist_;
}
inline ::pb::remote::RequestClosePlaylist* Message::mutable_request_close_playlist() {
  set_has_request_close_playlist();
  if (request_close_playlist_ == NULL) {
    request_close_playlist_ = new ::pb::remote::RequestClosePlaylist;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.request_close_playlist)
  return request_close_playlist_;
}
inline ::pb::remote::RequestClosePlaylist* Message::release_request_close_playlist() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.request_close_playlist)
  clear_has_request_close_playlist();
  ::pb::remote::RequestClosePlaylist* temp = request_close_playlist_;
  request_close_playlist_ = NULL;
  return temp;
}
inline void Message::set_allocated_request_close_playlist(::pb::remote::RequestClosePlaylist* request_close_playlist) {
  delete request_close_playlist_;
  request_close_playlist_ = request_close_playlist;
  if (request_close_playlist) {
    set_has_request_close_playlist();
  } else {
    clear_has_request_close_playlist();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.request_close_playlist)
}

// optional .pb.remote.RequestDownloadSongs request_download_songs = 31;
inline bool Message::has_request_download_songs() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Message::set_has_request_download_songs() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Message::clear_has_request_download_songs() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Message::clear_request_download_songs() {
  if (request_download_songs_ != NULL) request_download_songs_->::pb::remote::RequestDownloadSongs::Clear();
  clear_has_request_download_songs();
}
inline const ::pb::remote::RequestDownloadSongs& Message::request_download_songs() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.request_download_songs)
  return request_download_songs_ != NULL ? *request_download_songs_ : *default_instance_->request_download_songs_;
}
inline ::pb::remote::RequestDownloadSongs* Message::mutable_request_download_songs() {
  set_has_request_download_songs();
  if (request_download_songs_ == NULL) {
    request_download_songs_ = new ::pb::remote::RequestDownloadSongs;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.request_download_songs)
  return request_download_songs_;
}
inline ::pb::remote::RequestDownloadSongs* Message::release_request_download_songs() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.request_download_songs)
  clear_has_request_download_songs();
  ::pb::remote::RequestDownloadSongs* temp = request_download_songs_;
  request_download_songs_ = NULL;
  return temp;
}
inline void Message::set_allocated_request_download_songs(::pb::remote::RequestDownloadSongs* request_download_songs) {
  delete request_download_songs_;
  request_download_songs_ = request_download_songs;
  if (request_download_songs) {
    set_has_request_download_songs();
  } else {
    clear_has_request_download_songs();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.request_download_songs)
}

// optional .pb.remote.RequestRateSong request_rate_song = 35;
inline bool Message::has_request_rate_song() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Message::set_has_request_rate_song() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Message::clear_has_request_rate_song() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Message::clear_request_rate_song() {
  if (request_rate_song_ != NULL) request_rate_song_->::pb::remote::RequestRateSong::Clear();
  clear_has_request_rate_song();
}
inline const ::pb::remote::RequestRateSong& Message::request_rate_song() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.request_rate_song)
  return request_rate_song_ != NULL ? *request_rate_song_ : *default_instance_->request_rate_song_;
}
inline ::pb::remote::RequestRateSong* Message::mutable_request_rate_song() {
  set_has_request_rate_song();
  if (request_rate_song_ == NULL) {
    request_rate_song_ = new ::pb::remote::RequestRateSong;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.request_rate_song)
  return request_rate_song_;
}
inline ::pb::remote::RequestRateSong* Message::release_request_rate_song() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.request_rate_song)
  clear_has_request_rate_song();
  ::pb::remote::RequestRateSong* temp = request_rate_song_;
  request_rate_song_ = NULL;
  return temp;
}
inline void Message::set_allocated_request_rate_song(::pb::remote::RequestRateSong* request_rate_song) {
  delete request_rate_song_;
  request_rate_song_ = request_rate_song;
  if (request_rate_song) {
    set_has_request_rate_song();
  } else {
    clear_has_request_rate_song();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.request_rate_song)
}

// optional .pb.remote.RequestGlobalSearch request_global_search = 37;
inline bool Message::has_request_global_search() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Message::set_has_request_global_search() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Message::clear_has_request_global_search() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Message::clear_request_global_search() {
  if (request_global_search_ != NULL) request_global_search_->::pb::remote::RequestGlobalSearch::Clear();
  clear_has_request_global_search();
}
inline const ::pb::remote::RequestGlobalSearch& Message::request_global_search() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.request_global_search)
  return request_global_search_ != NULL ? *request_global_search_ : *default_instance_->request_global_search_;
}
inline ::pb::remote::RequestGlobalSearch* Message::mutable_request_global_search() {
  set_has_request_global_search();
  if (request_global_search_ == NULL) {
    request_global_search_ = new ::pb::remote::RequestGlobalSearch;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.request_global_search)
  return request_global_search_;
}
inline ::pb::remote::RequestGlobalSearch* Message::release_request_global_search() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.request_global_search)
  clear_has_request_global_search();
  ::pb::remote::RequestGlobalSearch* temp = request_global_search_;
  request_global_search_ = NULL;
  return temp;
}
inline void Message::set_allocated_request_global_search(::pb::remote::RequestGlobalSearch* request_global_search) {
  delete request_global_search_;
  request_global_search_ = request_global_search;
  if (request_global_search) {
    set_has_request_global_search();
  } else {
    clear_has_request_global_search();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.request_global_search)
}

// optional .pb.remote.Repeat repeat = 13;
inline bool Message::has_repeat() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Message::set_has_repeat() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Message::clear_has_repeat() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Message::clear_repeat() {
  if (repeat_ != NULL) repeat_->::pb::remote::Repeat::Clear();
  clear_has_repeat();
}
inline const ::pb::remote::Repeat& Message::repeat() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.repeat)
  return repeat_ != NULL ? *repeat_ : *default_instance_->repeat_;
}
inline ::pb::remote::Repeat* Message::mutable_repeat() {
  set_has_repeat();
  if (repeat_ == NULL) {
    repeat_ = new ::pb::remote::Repeat;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.repeat)
  return repeat_;
}
inline ::pb::remote::Repeat* Message::release_repeat() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.repeat)
  clear_has_repeat();
  ::pb::remote::Repeat* temp = repeat_;
  repeat_ = NULL;
  return temp;
}
inline void Message::set_allocated_repeat(::pb::remote::Repeat* repeat) {
  delete repeat_;
  repeat_ = repeat;
  if (repeat) {
    set_has_repeat();
  } else {
    clear_has_repeat();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.repeat)
}

// optional .pb.remote.Shuffle shuffle = 14;
inline bool Message::has_shuffle() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Message::set_has_shuffle() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Message::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Message::clear_shuffle() {
  if (shuffle_ != NULL) shuffle_->::pb::remote::Shuffle::Clear();
  clear_has_shuffle();
}
inline const ::pb::remote::Shuffle& Message::shuffle() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.shuffle)
  return shuffle_ != NULL ? *shuffle_ : *default_instance_->shuffle_;
}
inline ::pb::remote::Shuffle* Message::mutable_shuffle() {
  set_has_shuffle();
  if (shuffle_ == NULL) {
    shuffle_ = new ::pb::remote::Shuffle;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.shuffle)
  return shuffle_;
}
inline ::pb::remote::Shuffle* Message::release_shuffle() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.shuffle)
  clear_has_shuffle();
  ::pb::remote::Shuffle* temp = shuffle_;
  shuffle_ = NULL;
  return temp;
}
inline void Message::set_allocated_shuffle(::pb::remote::Shuffle* shuffle) {
  delete shuffle_;
  shuffle_ = shuffle;
  if (shuffle) {
    set_has_shuffle();
  } else {
    clear_has_shuffle();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.shuffle)
}

// optional .pb.remote.ResponseClementineInfo response_clementine_info = 15;
inline bool Message::has_response_clementine_info() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Message::set_has_response_clementine_info() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Message::clear_has_response_clementine_info() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Message::clear_response_clementine_info() {
  if (response_clementine_info_ != NULL) response_clementine_info_->::pb::remote::ResponseClementineInfo::Clear();
  clear_has_response_clementine_info();
}
inline const ::pb::remote::ResponseClementineInfo& Message::response_clementine_info() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.response_clementine_info)
  return response_clementine_info_ != NULL ? *response_clementine_info_ : *default_instance_->response_clementine_info_;
}
inline ::pb::remote::ResponseClementineInfo* Message::mutable_response_clementine_info() {
  set_has_response_clementine_info();
  if (response_clementine_info_ == NULL) {
    response_clementine_info_ = new ::pb::remote::ResponseClementineInfo;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.response_clementine_info)
  return response_clementine_info_;
}
inline ::pb::remote::ResponseClementineInfo* Message::release_response_clementine_info() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.response_clementine_info)
  clear_has_response_clementine_info();
  ::pb::remote::ResponseClementineInfo* temp = response_clementine_info_;
  response_clementine_info_ = NULL;
  return temp;
}
inline void Message::set_allocated_response_clementine_info(::pb::remote::ResponseClementineInfo* response_clementine_info) {
  delete response_clementine_info_;
  response_clementine_info_ = response_clementine_info;
  if (response_clementine_info) {
    set_has_response_clementine_info();
  } else {
    clear_has_response_clementine_info();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.response_clementine_info)
}

// optional .pb.remote.ResponseCurrentMetadata response_current_metadata = 16;
inline bool Message::has_response_current_metadata() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Message::set_has_response_current_metadata() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Message::clear_has_response_current_metadata() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Message::clear_response_current_metadata() {
  if (response_current_metadata_ != NULL) response_current_metadata_->::pb::remote::ResponseCurrentMetadata::Clear();
  clear_has_response_current_metadata();
}
inline const ::pb::remote::ResponseCurrentMetadata& Message::response_current_metadata() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.response_current_metadata)
  return response_current_metadata_ != NULL ? *response_current_metadata_ : *default_instance_->response_current_metadata_;
}
inline ::pb::remote::ResponseCurrentMetadata* Message::mutable_response_current_metadata() {
  set_has_response_current_metadata();
  if (response_current_metadata_ == NULL) {
    response_current_metadata_ = new ::pb::remote::ResponseCurrentMetadata;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.response_current_metadata)
  return response_current_metadata_;
}
inline ::pb::remote::ResponseCurrentMetadata* Message::release_response_current_metadata() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.response_current_metadata)
  clear_has_response_current_metadata();
  ::pb::remote::ResponseCurrentMetadata* temp = response_current_metadata_;
  response_current_metadata_ = NULL;
  return temp;
}
inline void Message::set_allocated_response_current_metadata(::pb::remote::ResponseCurrentMetadata* response_current_metadata) {
  delete response_current_metadata_;
  response_current_metadata_ = response_current_metadata;
  if (response_current_metadata) {
    set_has_response_current_metadata();
  } else {
    clear_has_response_current_metadata();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.response_current_metadata)
}

// optional .pb.remote.ResponsePlaylists response_playlists = 17;
inline bool Message::has_response_playlists() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Message::set_has_response_playlists() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Message::clear_has_response_playlists() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Message::clear_response_playlists() {
  if (response_playlists_ != NULL) response_playlists_->::pb::remote::ResponsePlaylists::Clear();
  clear_has_response_playlists();
}
inline const ::pb::remote::ResponsePlaylists& Message::response_playlists() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.response_playlists)
  return response_playlists_ != NULL ? *response_playlists_ : *default_instance_->response_playlists_;
}
inline ::pb::remote::ResponsePlaylists* Message::mutable_response_playlists() {
  set_has_response_playlists();
  if (response_playlists_ == NULL) {
    response_playlists_ = new ::pb::remote::ResponsePlaylists;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.response_playlists)
  return response_playlists_;
}
inline ::pb::remote::ResponsePlaylists* Message::release_response_playlists() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.response_playlists)
  clear_has_response_playlists();
  ::pb::remote::ResponsePlaylists* temp = response_playlists_;
  response_playlists_ = NULL;
  return temp;
}
inline void Message::set_allocated_response_playlists(::pb::remote::ResponsePlaylists* response_playlists) {
  delete response_playlists_;
  response_playlists_ = response_playlists;
  if (response_playlists) {
    set_has_response_playlists();
  } else {
    clear_has_response_playlists();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.response_playlists)
}

// optional .pb.remote.ResponsePlaylistSongs response_playlist_songs = 18;
inline bool Message::has_response_playlist_songs() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Message::set_has_response_playlist_songs() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Message::clear_has_response_playlist_songs() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Message::clear_response_playlist_songs() {
  if (response_playlist_songs_ != NULL) response_playlist_songs_->::pb::remote::ResponsePlaylistSongs::Clear();
  clear_has_response_playlist_songs();
}
inline const ::pb::remote::ResponsePlaylistSongs& Message::response_playlist_songs() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.response_playlist_songs)
  return response_playlist_songs_ != NULL ? *response_playlist_songs_ : *default_instance_->response_playlist_songs_;
}
inline ::pb::remote::ResponsePlaylistSongs* Message::mutable_response_playlist_songs() {
  set_has_response_playlist_songs();
  if (response_playlist_songs_ == NULL) {
    response_playlist_songs_ = new ::pb::remote::ResponsePlaylistSongs;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.response_playlist_songs)
  return response_playlist_songs_;
}
inline ::pb::remote::ResponsePlaylistSongs* Message::release_response_playlist_songs() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.response_playlist_songs)
  clear_has_response_playlist_songs();
  ::pb::remote::ResponsePlaylistSongs* temp = response_playlist_songs_;
  response_playlist_songs_ = NULL;
  return temp;
}
inline void Message::set_allocated_response_playlist_songs(::pb::remote::ResponsePlaylistSongs* response_playlist_songs) {
  delete response_playlist_songs_;
  response_playlist_songs_ = response_playlist_songs;
  if (response_playlist_songs) {
    set_has_response_playlist_songs();
  } else {
    clear_has_response_playlist_songs();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.response_playlist_songs)
}

// optional .pb.remote.ResponseEngineStateChanged response_engine_state_changed = 19;
inline bool Message::has_response_engine_state_changed() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Message::set_has_response_engine_state_changed() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Message::clear_has_response_engine_state_changed() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Message::clear_response_engine_state_changed() {
  if (response_engine_state_changed_ != NULL) response_engine_state_changed_->::pb::remote::ResponseEngineStateChanged::Clear();
  clear_has_response_engine_state_changed();
}
inline const ::pb::remote::ResponseEngineStateChanged& Message::response_engine_state_changed() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.response_engine_state_changed)
  return response_engine_state_changed_ != NULL ? *response_engine_state_changed_ : *default_instance_->response_engine_state_changed_;
}
inline ::pb::remote::ResponseEngineStateChanged* Message::mutable_response_engine_state_changed() {
  set_has_response_engine_state_changed();
  if (response_engine_state_changed_ == NULL) {
    response_engine_state_changed_ = new ::pb::remote::ResponseEngineStateChanged;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.response_engine_state_changed)
  return response_engine_state_changed_;
}
inline ::pb::remote::ResponseEngineStateChanged* Message::release_response_engine_state_changed() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.response_engine_state_changed)
  clear_has_response_engine_state_changed();
  ::pb::remote::ResponseEngineStateChanged* temp = response_engine_state_changed_;
  response_engine_state_changed_ = NULL;
  return temp;
}
inline void Message::set_allocated_response_engine_state_changed(::pb::remote::ResponseEngineStateChanged* response_engine_state_changed) {
  delete response_engine_state_changed_;
  response_engine_state_changed_ = response_engine_state_changed;
  if (response_engine_state_changed) {
    set_has_response_engine_state_changed();
  } else {
    clear_has_response_engine_state_changed();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.response_engine_state_changed)
}

// optional .pb.remote.ResponseUpdateTrackPosition response_update_track_position = 20;
inline bool Message::has_response_update_track_position() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Message::set_has_response_update_track_position() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Message::clear_has_response_update_track_position() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Message::clear_response_update_track_position() {
  if (response_update_track_position_ != NULL) response_update_track_position_->::pb::remote::ResponseUpdateTrackPosition::Clear();
  clear_has_response_update_track_position();
}
inline const ::pb::remote::ResponseUpdateTrackPosition& Message::response_update_track_position() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.response_update_track_position)
  return response_update_track_position_ != NULL ? *response_update_track_position_ : *default_instance_->response_update_track_position_;
}
inline ::pb::remote::ResponseUpdateTrackPosition* Message::mutable_response_update_track_position() {
  set_has_response_update_track_position();
  if (response_update_track_position_ == NULL) {
    response_update_track_position_ = new ::pb::remote::ResponseUpdateTrackPosition;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.response_update_track_position)
  return response_update_track_position_;
}
inline ::pb::remote::ResponseUpdateTrackPosition* Message::release_response_update_track_position() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.response_update_track_position)
  clear_has_response_update_track_position();
  ::pb::remote::ResponseUpdateTrackPosition* temp = response_update_track_position_;
  response_update_track_position_ = NULL;
  return temp;
}
inline void Message::set_allocated_response_update_track_position(::pb::remote::ResponseUpdateTrackPosition* response_update_track_position) {
  delete response_update_track_position_;
  response_update_track_position_ = response_update_track_position;
  if (response_update_track_position) {
    set_has_response_update_track_position();
  } else {
    clear_has_response_update_track_position();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.response_update_track_position)
}

// optional .pb.remote.ResponseDisconnect response_disconnect = 22;
inline bool Message::has_response_disconnect() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Message::set_has_response_disconnect() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Message::clear_has_response_disconnect() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Message::clear_response_disconnect() {
  if (response_disconnect_ != NULL) response_disconnect_->::pb::remote::ResponseDisconnect::Clear();
  clear_has_response_disconnect();
}
inline const ::pb::remote::ResponseDisconnect& Message::response_disconnect() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.response_disconnect)
  return response_disconnect_ != NULL ? *response_disconnect_ : *default_instance_->response_disconnect_;
}
inline ::pb::remote::ResponseDisconnect* Message::mutable_response_disconnect() {
  set_has_response_disconnect();
  if (response_disconnect_ == NULL) {
    response_disconnect_ = new ::pb::remote::ResponseDisconnect;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.response_disconnect)
  return response_disconnect_;
}
inline ::pb::remote::ResponseDisconnect* Message::release_response_disconnect() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.response_disconnect)
  clear_has_response_disconnect();
  ::pb::remote::ResponseDisconnect* temp = response_disconnect_;
  response_disconnect_ = NULL;
  return temp;
}
inline void Message::set_allocated_response_disconnect(::pb::remote::ResponseDisconnect* response_disconnect) {
  delete response_disconnect_;
  response_disconnect_ = response_disconnect;
  if (response_disconnect) {
    set_has_response_disconnect();
  } else {
    clear_has_response_disconnect();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.response_disconnect)
}

// optional .pb.remote.ResponseActiveChanged response_active_changed = 24;
inline bool Message::has_response_active_changed() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Message::set_has_response_active_changed() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Message::clear_has_response_active_changed() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Message::clear_response_active_changed() {
  if (response_active_changed_ != NULL) response_active_changed_->::pb::remote::ResponseActiveChanged::Clear();
  clear_has_response_active_changed();
}
inline const ::pb::remote::ResponseActiveChanged& Message::response_active_changed() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.response_active_changed)
  return response_active_changed_ != NULL ? *response_active_changed_ : *default_instance_->response_active_changed_;
}
inline ::pb::remote::ResponseActiveChanged* Message::mutable_response_active_changed() {
  set_has_response_active_changed();
  if (response_active_changed_ == NULL) {
    response_active_changed_ = new ::pb::remote::ResponseActiveChanged;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.response_active_changed)
  return response_active_changed_;
}
inline ::pb::remote::ResponseActiveChanged* Message::release_response_active_changed() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.response_active_changed)
  clear_has_response_active_changed();
  ::pb::remote::ResponseActiveChanged* temp = response_active_changed_;
  response_active_changed_ = NULL;
  return temp;
}
inline void Message::set_allocated_response_active_changed(::pb::remote::ResponseActiveChanged* response_active_changed) {
  delete response_active_changed_;
  response_active_changed_ = response_active_changed;
  if (response_active_changed) {
    set_has_response_active_changed();
  } else {
    clear_has_response_active_changed();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.response_active_changed)
}

// optional .pb.remote.ResponseLyrics response_lyrics = 30;
inline bool Message::has_response_lyrics() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Message::set_has_response_lyrics() {
  _has_bits_[0] |= 0x02000000u;
}
inline void Message::clear_has_response_lyrics() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void Message::clear_response_lyrics() {
  if (response_lyrics_ != NULL) response_lyrics_->::pb::remote::ResponseLyrics::Clear();
  clear_has_response_lyrics();
}
inline const ::pb::remote::ResponseLyrics& Message::response_lyrics() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.response_lyrics)
  return response_lyrics_ != NULL ? *response_lyrics_ : *default_instance_->response_lyrics_;
}
inline ::pb::remote::ResponseLyrics* Message::mutable_response_lyrics() {
  set_has_response_lyrics();
  if (response_lyrics_ == NULL) {
    response_lyrics_ = new ::pb::remote::ResponseLyrics;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.response_lyrics)
  return response_lyrics_;
}
inline ::pb::remote::ResponseLyrics* Message::release_response_lyrics() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.response_lyrics)
  clear_has_response_lyrics();
  ::pb::remote::ResponseLyrics* temp = response_lyrics_;
  response_lyrics_ = NULL;
  return temp;
}
inline void Message::set_allocated_response_lyrics(::pb::remote::ResponseLyrics* response_lyrics) {
  delete response_lyrics_;
  response_lyrics_ = response_lyrics;
  if (response_lyrics) {
    set_has_response_lyrics();
  } else {
    clear_has_response_lyrics();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.response_lyrics)
}

// optional .pb.remote.ResponseSongFileChunk response_song_file_chunk = 32;
inline bool Message::has_response_song_file_chunk() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void Message::set_has_response_song_file_chunk() {
  _has_bits_[0] |= 0x04000000u;
}
inline void Message::clear_has_response_song_file_chunk() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void Message::clear_response_song_file_chunk() {
  if (response_song_file_chunk_ != NULL) response_song_file_chunk_->::pb::remote::ResponseSongFileChunk::Clear();
  clear_has_response_song_file_chunk();
}
inline const ::pb::remote::ResponseSongFileChunk& Message::response_song_file_chunk() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.response_song_file_chunk)
  return response_song_file_chunk_ != NULL ? *response_song_file_chunk_ : *default_instance_->response_song_file_chunk_;
}
inline ::pb::remote::ResponseSongFileChunk* Message::mutable_response_song_file_chunk() {
  set_has_response_song_file_chunk();
  if (response_song_file_chunk_ == NULL) {
    response_song_file_chunk_ = new ::pb::remote::ResponseSongFileChunk;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.response_song_file_chunk)
  return response_song_file_chunk_;
}
inline ::pb::remote::ResponseSongFileChunk* Message::release_response_song_file_chunk() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.response_song_file_chunk)
  clear_has_response_song_file_chunk();
  ::pb::remote::ResponseSongFileChunk* temp = response_song_file_chunk_;
  response_song_file_chunk_ = NULL;
  return temp;
}
inline void Message::set_allocated_response_song_file_chunk(::pb::remote::ResponseSongFileChunk* response_song_file_chunk) {
  delete response_song_file_chunk_;
  response_song_file_chunk_ = response_song_file_chunk;
  if (response_song_file_chunk) {
    set_has_response_song_file_chunk();
  } else {
    clear_has_response_song_file_chunk();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.response_song_file_chunk)
}

// optional .pb.remote.ResponseSongOffer response_song_offer = 33;
inline bool Message::has_response_song_offer() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void Message::set_has_response_song_offer() {
  _has_bits_[0] |= 0x08000000u;
}
inline void Message::clear_has_response_song_offer() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void Message::clear_response_song_offer() {
  if (response_song_offer_ != NULL) response_song_offer_->::pb::remote::ResponseSongOffer::Clear();
  clear_has_response_song_offer();
}
inline const ::pb::remote::ResponseSongOffer& Message::response_song_offer() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.response_song_offer)
  return response_song_offer_ != NULL ? *response_song_offer_ : *default_instance_->response_song_offer_;
}
inline ::pb::remote::ResponseSongOffer* Message::mutable_response_song_offer() {
  set_has_response_song_offer();
  if (response_song_offer_ == NULL) {
    response_song_offer_ = new ::pb::remote::ResponseSongOffer;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.response_song_offer)
  return response_song_offer_;
}
inline ::pb::remote::ResponseSongOffer* Message::release_response_song_offer() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.response_song_offer)
  clear_has_response_song_offer();
  ::pb::remote::ResponseSongOffer* temp = response_song_offer_;
  response_song_offer_ = NULL;
  return temp;
}
inline void Message::set_allocated_response_song_offer(::pb::remote::ResponseSongOffer* response_song_offer) {
  delete response_song_offer_;
  response_song_offer_ = response_song_offer;
  if (response_song_offer) {
    set_has_response_song_offer();
  } else {
    clear_has_response_song_offer();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.response_song_offer)
}

// optional .pb.remote.ResponseLibraryChunk response_library_chunk = 34;
inline bool Message::has_response_library_chunk() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void Message::set_has_response_library_chunk() {
  _has_bits_[0] |= 0x10000000u;
}
inline void Message::clear_has_response_library_chunk() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void Message::clear_response_library_chunk() {
  if (response_library_chunk_ != NULL) response_library_chunk_->::pb::remote::ResponseLibraryChunk::Clear();
  clear_has_response_library_chunk();
}
inline const ::pb::remote::ResponseLibraryChunk& Message::response_library_chunk() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.response_library_chunk)
  return response_library_chunk_ != NULL ? *response_library_chunk_ : *default_instance_->response_library_chunk_;
}
inline ::pb::remote::ResponseLibraryChunk* Message::mutable_response_library_chunk() {
  set_has_response_library_chunk();
  if (response_library_chunk_ == NULL) {
    response_library_chunk_ = new ::pb::remote::ResponseLibraryChunk;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.response_library_chunk)
  return response_library_chunk_;
}
inline ::pb::remote::ResponseLibraryChunk* Message::release_response_library_chunk() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.response_library_chunk)
  clear_has_response_library_chunk();
  ::pb::remote::ResponseLibraryChunk* temp = response_library_chunk_;
  response_library_chunk_ = NULL;
  return temp;
}
inline void Message::set_allocated_response_library_chunk(::pb::remote::ResponseLibraryChunk* response_library_chunk) {
  delete response_library_chunk_;
  response_library_chunk_ = response_library_chunk;
  if (response_library_chunk) {
    set_has_response_library_chunk();
  } else {
    clear_has_response_library_chunk();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.response_library_chunk)
}

// optional .pb.remote.ResponseDownloadTotalSize response_download_total_size = 36;
inline bool Message::has_response_download_total_size() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void Message::set_has_response_download_total_size() {
  _has_bits_[0] |= 0x20000000u;
}
inline void Message::clear_has_response_download_total_size() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void Message::clear_response_download_total_size() {
  if (response_download_total_size_ != NULL) response_download_total_size_->::pb::remote::ResponseDownloadTotalSize::Clear();
  clear_has_response_download_total_size();
}
inline const ::pb::remote::ResponseDownloadTotalSize& Message::response_download_total_size() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.response_download_total_size)
  return response_download_total_size_ != NULL ? *response_download_total_size_ : *default_instance_->response_download_total_size_;
}
inline ::pb::remote::ResponseDownloadTotalSize* Message::mutable_response_download_total_size() {
  set_has_response_download_total_size();
  if (response_download_total_size_ == NULL) {
    response_download_total_size_ = new ::pb::remote::ResponseDownloadTotalSize;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.response_download_total_size)
  return response_download_total_size_;
}
inline ::pb::remote::ResponseDownloadTotalSize* Message::release_response_download_total_size() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.response_download_total_size)
  clear_has_response_download_total_size();
  ::pb::remote::ResponseDownloadTotalSize* temp = response_download_total_size_;
  response_download_total_size_ = NULL;
  return temp;
}
inline void Message::set_allocated_response_download_total_size(::pb::remote::ResponseDownloadTotalSize* response_download_total_size) {
  delete response_download_total_size_;
  response_download_total_size_ = response_download_total_size;
  if (response_download_total_size) {
    set_has_response_download_total_size();
  } else {
    clear_has_response_download_total_size();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.response_download_total_size)
}

// optional .pb.remote.ResponseGlobalSearch response_global_search = 38;
inline bool Message::has_response_global_search() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void Message::set_has_response_global_search() {
  _has_bits_[0] |= 0x40000000u;
}
inline void Message::clear_has_response_global_search() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void Message::clear_response_global_search() {
  if (response_global_search_ != NULL) response_global_search_->::pb::remote::ResponseGlobalSearch::Clear();
  clear_has_response_global_search();
}
inline const ::pb::remote::ResponseGlobalSearch& Message::response_global_search() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.response_global_search)
  return response_global_search_ != NULL ? *response_global_search_ : *default_instance_->response_global_search_;
}
inline ::pb::remote::ResponseGlobalSearch* Message::mutable_response_global_search() {
  set_has_response_global_search();
  if (response_global_search_ == NULL) {
    response_global_search_ = new ::pb::remote::ResponseGlobalSearch;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.response_global_search)
  return response_global_search_;
}
inline ::pb::remote::ResponseGlobalSearch* Message::release_response_global_search() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.response_global_search)
  clear_has_response_global_search();
  ::pb::remote::ResponseGlobalSearch* temp = response_global_search_;
  response_global_search_ = NULL;
  return temp;
}
inline void Message::set_allocated_response_global_search(::pb::remote::ResponseGlobalSearch* response_global_search) {
  delete response_global_search_;
  response_global_search_ = response_global_search;
  if (response_global_search) {
    set_has_response_global_search();
  } else {
    clear_has_response_global_search();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.response_global_search)
}

// optional .pb.remote.ResponseTranscoderStatus response_transcoder_status = 39;
inline bool Message::has_response_transcoder_status() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void Message::set_has_response_transcoder_status() {
  _has_bits_[0] |= 0x80000000u;
}
inline void Message::clear_has_response_transcoder_status() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void Message::clear_response_transcoder_status() {
  if (response_transcoder_status_ != NULL) response_transcoder_status_->::pb::remote::ResponseTranscoderStatus::Clear();
  clear_has_response_transcoder_status();
}
inline const ::pb::remote::ResponseTranscoderStatus& Message::response_transcoder_status() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.response_transcoder_status)
  return response_transcoder_status_ != NULL ? *response_transcoder_status_ : *default_instance_->response_transcoder_status_;
}
inline ::pb::remote::ResponseTranscoderStatus* Message::mutable_response_transcoder_status() {
  set_has_response_transcoder_status();
  if (response_transcoder_status_ == NULL) {
    response_transcoder_status_ = new ::pb::remote::ResponseTranscoderStatus;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.response_transcoder_status)
  return response_transcoder_status_;
}
inline ::pb::remote::ResponseTranscoderStatus* Message::release_response_transcoder_status() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.response_transcoder_status)
  clear_has_response_transcoder_status();
  ::pb::remote::ResponseTranscoderStatus* temp = response_transcoder_status_;
  response_transcoder_status_ = NULL;
  return temp;
}
inline void Message::set_allocated_response_transcoder_status(::pb::remote::ResponseTranscoderStatus* response_transcoder_status) {
  delete response_transcoder_status_;
  response_transcoder_status_ = response_transcoder_status;
  if (response_transcoder_status) {
    set_has_response_transcoder_status();
  } else {
    clear_has_response_transcoder_status();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.response_transcoder_status)
}

// optional .pb.remote.ResponseGlobalSearchStatus response_global_search_status = 40;
inline bool Message::has_response_global_search_status() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void Message::set_has_response_global_search_status() {
  _has_bits_[1] |= 0x00000001u;
}
inline void Message::clear_has_response_global_search_status() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void Message::clear_response_global_search_status() {
  if (response_global_search_status_ != NULL) response_global_search_status_->::pb::remote::ResponseGlobalSearchStatus::Clear();
  clear_has_response_global_search_status();
}
inline const ::pb::remote::ResponseGlobalSearchStatus& Message::response_global_search_status() const {
  // @@protoc_insertion_point(field_get:pb.remote.Message.response_global_search_status)
  return response_global_search_status_ != NULL ? *response_global_search_status_ : *default_instance_->response_global_search_status_;
}
inline ::pb::remote::ResponseGlobalSearchStatus* Message::mutable_response_global_search_status() {
  set_has_response_global_search_status();
  if (response_global_search_status_ == NULL) {
    response_global_search_status_ = new ::pb::remote::ResponseGlobalSearchStatus;
  }
  // @@protoc_insertion_point(field_mutable:pb.remote.Message.response_global_search_status)
  return response_global_search_status_;
}
inline ::pb::remote::ResponseGlobalSearchStatus* Message::release_response_global_search_status() {
  // @@protoc_insertion_point(field_release:pb.remote.Message.response_global_search_status)
  clear_has_response_global_search_status();
  ::pb::remote::ResponseGlobalSearchStatus* temp = response_global_search_status_;
  response_global_search_status_ = NULL;
  return temp;
}
inline void Message::set_allocated_response_global_search_status(::pb::remote::ResponseGlobalSearchStatus* response_global_search_status) {
  delete response_global_search_status_;
  response_global_search_status_ = response_global_search_status;
  if (response_global_search_status) {
    set_has_response_global_search_status();
  } else {
    clear_has_response_global_search_status();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.remote.Message.response_global_search_status)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace remote
}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::remote::SongMetadata_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::remote::SongMetadata_Type>() {
  return ::pb::remote::SongMetadata_Type_descriptor();
}
template <> struct is_proto_enum< ::pb::remote::MsgType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::remote::MsgType>() {
  return ::pb::remote::MsgType_descriptor();
}
template <> struct is_proto_enum< ::pb::remote::EngineState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::remote::EngineState>() {
  return ::pb::remote::EngineState_descriptor();
}
template <> struct is_proto_enum< ::pb::remote::RepeatMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::remote::RepeatMode>() {
  return ::pb::remote::RepeatMode_descriptor();
}
template <> struct is_proto_enum< ::pb::remote::ShuffleMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::remote::ShuffleMode>() {
  return ::pb::remote::ShuffleMode_descriptor();
}
template <> struct is_proto_enum< ::pb::remote::ReasonDisconnect> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::remote::ReasonDisconnect>() {
  return ::pb::remote::ReasonDisconnect_descriptor();
}
template <> struct is_proto_enum< ::pb::remote::DownloadItem> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::remote::DownloadItem>() {
  return ::pb::remote::DownloadItem_descriptor();
}
template <> struct is_proto_enum< ::pb::remote::GlobalSearchStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::remote::GlobalSearchStatus>() {
  return ::pb::remote::GlobalSearchStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_remotecontrolmessages_2eproto__INCLUDED
